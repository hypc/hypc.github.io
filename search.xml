<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Embed 嵌入静态资源</title>
      <link href="/2022/01/27/go-embed/"/>
      <url>/2022/01/27/go-embed/</url>
      
        <content type="html"><![CDATA[<p>go1.16 提供了一个新功能 <a href="https://pkg.go.dev/embed">embed</a>，使用 <a href="https://pkg.go.dev/embed">embed</a> 可以在编译的时候将静态文件资源嵌入到程序中。</p><p>在代码中使用 <code>//go:embed</code> 指令可以将文件资源映射为 <code>string</code>、<code>[]byte</code>、<code>embed.FS</code> 类型。</p><p>将一个文件嵌入为 <code>string</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;embed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed hello.txt</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>将一个文件嵌入为 <code>[]byte</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;embed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed hello.txt</span></span><br><span class="line"><span class="keyword">var</span> b []<span class="keyword">byte</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">string</span>(b))</span><br></pre></td></tr></table></figure><p>将一个文件嵌入为 <code>embed.FS</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;embed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed hello.txt</span></span><br><span class="line"><span class="keyword">var</span> f embed.FS</span><br><span class="line">data, _ := f.ReadFile(<span class="string">&quot;hello.txt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">string</span>(data))</span><br></pre></td></tr></table></figure><p>同时嵌入多个静态资源：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;embed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed assets/* templates/*</span></span><br><span class="line"><span class="keyword">var</span> f embed.FS</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 管道 Pipe</title>
      <link href="/2022/01/13/python-pipe/"/>
      <url>/2022/01/13/python-pipe/</url>
      
        <content type="html"><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipe</span><br></pre></td></tr></table></figure><p><strong>examples</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> * <span class="keyword">from</span> pipe</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">100</span>) | select(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>) | where(<span class="keyword">lambda</span> x: x &lt; <span class="number">100</span>))</span><br><span class="line"><span class="number">285</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] | where(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>] | traverse)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><p>阅读源码后，发现 pipe 关键代码是 <code>Pipe</code> 这个装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipe</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Represent a Pipeable Element :</span></span><br><span class="line"><span class="string">    Described as :</span></span><br><span class="line"><span class="string">    first = Pipe(lambda iterable: next(iter(iterable)))</span></span><br><span class="line"><span class="string">    and used as :</span></span><br><span class="line"><span class="string">    print [1, 2, 3] | first</span></span><br><span class="line"><span class="string">    printing 1</span></span><br><span class="line"><span class="string">    Or represent a Pipeable Function :</span></span><br><span class="line"><span class="string">    It&#x27;s a function returning a Pipe</span></span><br><span class="line"><span class="string">    Described as :</span></span><br><span class="line"><span class="string">    select = Pipe(lambda iterable, pred: (pred(x) for x in iterable))</span></span><br><span class="line"><span class="string">    and used as :</span></span><br><span class="line"><span class="string">    print [1, 2, 3] | select(lambda x: x * 2)</span></span><br><span class="line"><span class="string">    # 2, 4, 6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, function</span>):</span></span><br><span class="line">        self.function = function</span><br><span class="line">        functools.update_wrapper(self, function)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ror__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.function(other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Pipe(<span class="keyword">lambda</span> x: self.function(x, *args, **kwargs))</span><br></pre></td></tr></table></figure><p><code>Pipe</code> 这个装饰器重写了魔法函数 <code>__ror__</code>，实现了按位或运算符 <code>|</code>。这样，我们可以使用管道符 <code>|</code> 将多个操作连接起来，就如同上面的示例。</p><p>下面是官方提供的几个典型的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pipe</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dedup</span>(<span class="params">iterable, key=<span class="keyword">lambda</span> x: x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Only yield unique items. Use a set to keep track of duplicate data.&quot;&quot;&quot;</span></span><br><span class="line">    seen = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">        dupkey = key(item)</span><br><span class="line">        <span class="keyword">if</span> dupkey <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">            seen.add(dupkey)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span>(<span class="params">iterable, selector</span>):</span></span><br><span class="line">    <span class="keyword">return</span> builtins.<span class="built_in">map</span>(selector, iterable)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">where</span>(<span class="params">iterable, predicate</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x <span class="keyword">for</span> x <span class="keyword">in</span> iterable <span class="keyword">if</span> (predicate(x)))</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupby</span>(<span class="params">iterable, keyfunc</span>):</span></span><br><span class="line">    <span class="keyword">return</span> itertools.groupby(<span class="built_in">sorted</span>(iterable, key=keyfunc), keyfunc)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span>(<span class="params">iterable, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(iterable, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">reversed</span>(iterable)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json 序列化及反序列化</title>
      <link href="/2022/01/10/go-json/"/>
      <url>/2022/01/10/go-json/</url>
      
        <content type="html"><![CDATA[<p>包 <a href="https://pkg.go.dev/encoding/json">encoding/json</a> 提供了有关 json 的操作：</p><ul><li><code>json.Marshal</code>: 序列化 json</li><li><code>json.Unmarshal</code>: 反序列化 json 字符串</li></ul><h2 id="基础类型序列化及反序列化"><a href="#基础类型序列化及反序列化" class="headerlink" title="基础类型序列化及反序列化"></a>基础类型序列化及反序列化</h2><p>直接使用 <code>json.Marshal</code> 进行序列化，使用 <code>json.Unmarshal</code> 反序列化 json 字符串。在进行反序列化时需要注意接受数据的变量类型。</p><h2 id="map-序列化及反序列化"><a href="#map-序列化及反序列化" class="headerlink" title="map 序列化及反序列化"></a>map 序列化及反序列化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">article := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;article_id&quot;</span>:    <span class="number">6931630572720619534</span>,</span><br><span class="line"><span class="string">&quot;user_id&quot;</span>:       <span class="number">465848661970824</span>,</span><br><span class="line"><span class="string">&quot;category_id&quot;</span>:   <span class="number">6809637769959178254</span>,</span><br><span class="line"><span class="string">&quot;tag_ids&quot;</span>:       []<span class="keyword">int</span>&#123;<span class="number">6809640445233070094</span>&#125;,</span><br><span class="line"><span class="string">&quot;link_url&quot;</span>:      <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;cover_image&quot;</span>:   <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;title&quot;</span>:         <span class="string">&quot;spring中那些让你爱不释手的代码技巧&quot;</span>,</span><br><span class="line"><span class="string">&quot;brief_content&quot;</span>: <span class="string">&quot;最近越来越多的读者认可我的文章，还是件挺让人高兴的事情。有些读者私信我说希望后面多分享spring方面的文章，这样能够在实际工作中派上用场。正好我对spring源码有过一定的研究，并结合我这几年实际的工作经验，把spring中我认为不错的知识点总结一下，希望对您有所帮助。 实现…&quot;</span>,</span><br><span class="line"><span class="string">&quot;is_english&quot;</span>:    <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;is_original&quot;</span>:   <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;content&quot;</span>:       <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;ctime&quot;</span>:         <span class="number">1613896165</span>,</span><br><span class="line"><span class="string">&quot;mtime&quot;</span>:         <span class="number">1625579546</span>,</span><br><span class="line"><span class="string">&quot;rtime&quot;</span>:         <span class="number">1613994419</span>,</span><br><span class="line"><span class="string">&quot;view_count&quot;</span>:    <span class="number">10374</span>,</span><br><span class="line"><span class="string">&quot;collect_count&quot;</span>: <span class="number">533</span>,</span><br><span class="line"><span class="string">&quot;digg_count&quot;</span>:    <span class="number">339</span>,</span><br><span class="line"><span class="string">&quot;comment_count&quot;</span>: <span class="number">22</span>,</span><br><span class="line"><span class="string">&quot;status&quot;</span>:        <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">str, _ := json.Marshal(article)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(str))</span><br><span class="line"><span class="keyword">var</span> article2 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">_ = json.Unmarshal(str, &amp;article2)</span><br><span class="line">fmt.Println(article2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="struct-序列化及反序列化"><a href="#struct-序列化及反序列化" class="headerlink" title="struct 序列化及反序列化"></a>struct 序列化及反序列化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Article <span class="keyword">struct</span> &#123;</span><br><span class="line">ArticleId    <span class="keyword">int</span>    <span class="string">`json:&quot;article_id&quot;`</span></span><br><span class="line">UserId       <span class="keyword">int</span>    <span class="string">`json:&quot;user_id&quot;`</span></span><br><span class="line">CategoryId   <span class="keyword">int</span>    <span class="string">`json:&quot;category_id&quot;`</span></span><br><span class="line">TagIds       []<span class="keyword">int</span>  <span class="string">`json:&quot;tag_ids&quot;`</span></span><br><span class="line">LinkUrl      <span class="keyword">string</span> <span class="string">`json:&quot;link_url&quot;`</span></span><br><span class="line">CoverImage   <span class="keyword">string</span> <span class="string">`json:&quot;cover_image&quot;`</span></span><br><span class="line">Title        <span class="keyword">string</span> <span class="string">`json:&quot;title&quot;`</span></span><br><span class="line">BriefContent <span class="keyword">string</span> <span class="string">`json:&quot;brief_content&quot;`</span></span><br><span class="line">IsEnglish    <span class="keyword">int</span>    <span class="string">`json:&quot;is_english&quot;`</span></span><br><span class="line">IsOriginal   <span class="keyword">int</span>    <span class="string">`json:&quot;is_original&quot;`</span></span><br><span class="line">Content      <span class="keyword">string</span> <span class="string">`json:&quot;content&quot;`</span></span><br><span class="line">Ctime        <span class="keyword">int</span>    <span class="string">`json:&quot;ctime&quot;`</span></span><br><span class="line">Mtime        <span class="keyword">int</span>    <span class="string">`json:&quot;mtime&quot;`</span></span><br><span class="line">Rtime        <span class="keyword">int</span>    <span class="string">`json:&quot;rtime&quot;`</span></span><br><span class="line">ViewCount    <span class="keyword">int</span>    <span class="string">`json:&quot;view_count&quot;`</span></span><br><span class="line">CollectCount <span class="keyword">int</span>    <span class="string">`json:&quot;collect_count&quot;`</span></span><br><span class="line">DiggCount    <span class="keyword">int</span>    <span class="string">`json:&quot;digg_count&quot;`</span></span><br><span class="line">CommentCount <span class="keyword">int</span>    <span class="string">`json:&quot;comment_count&quot;`</span></span><br><span class="line">Status       <span class="keyword">int</span>    <span class="string">`json:&quot;status&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">article := &amp;Article&#123;</span><br><span class="line">ArticleId:    <span class="number">6931630572720619534</span>,</span><br><span class="line">UserId:       <span class="number">465848661970824</span>,</span><br><span class="line">CategoryId:   <span class="number">6809637769959178254</span>,</span><br><span class="line">TagIds:       []<span class="keyword">int</span>&#123;<span class="number">6809640445233070094</span>&#125;,</span><br><span class="line">LinkUrl:      <span class="string">&quot;&quot;</span>,</span><br><span class="line">CoverImage:   <span class="string">&quot;&quot;</span>,</span><br><span class="line">Title:        <span class="string">&quot;spring中那些让你爱不释手的代码技巧&quot;</span>,</span><br><span class="line">BriefContent: <span class="string">&quot;最近越来越多的读者认可我的文章，还是件挺让人高兴的事情。有些读者私信我说希望后面多分享spring方面的文章，这样能够在实际工作中派上用场。正好我对spring源码有过一定的研究，并结合我这几年实际的工作经验，把spring中我认为不错的知识点总结一下，希望对您有所帮助。 实现…&quot;</span>,</span><br><span class="line">IsEnglish:    <span class="number">0</span>,</span><br><span class="line">IsOriginal:   <span class="number">1</span>,</span><br><span class="line">Content:      <span class="string">&quot;&quot;</span>,</span><br><span class="line">Ctime:        <span class="number">1613896165</span>,</span><br><span class="line">Mtime:        <span class="number">1625579546</span>,</span><br><span class="line">Rtime:        <span class="number">1613994419</span>,</span><br><span class="line">ViewCount:    <span class="number">10374</span>,</span><br><span class="line">CollectCount: <span class="number">533</span>,</span><br><span class="line">DiggCount:    <span class="number">339</span>,</span><br><span class="line">CommentCount: <span class="number">22</span>,</span><br><span class="line">Status:       <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">str, _ := json.Marshal(article)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(str))</span><br><span class="line">article2 := &amp;Article&#123;&#125;</span><br><span class="line">_ = json.Unmarshal(str, article2)</span><br><span class="line">fmt.Println(article2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http 请求及响应解析</title>
      <link href="/2022/01/10/go-http/"/>
      <url>/2022/01/10/go-http/</url>
      
        <content type="html"><![CDATA[<p>包 <a href="https://pkg.go.dev/net/http">net/http</a> 提供了 HTTP 客户端及服务器的实现。</p><h2 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;https://httpbin.org/get&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode &gt; <span class="number">299</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Response failed with status code: %d and\nbody: %s\n&quot;</span>, resp.StatusCode, body)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="PostForm"><a href="#PostForm" class="headerlink" title="PostForm"></a>PostForm</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">params := url.Values&#123;&#125;</span><br><span class="line">params.Set(<span class="string">&quot;param1&quot;</span>, <span class="string">&quot;value1&quot;</span>)</span><br><span class="line">params.Set(<span class="string">&quot;param2&quot;</span>, <span class="string">&quot;value2&quot;</span>)</span><br><span class="line"></span><br><span class="line">resp, err := http.PostForm(<span class="string">&quot;https://httpbin.org/post&quot;</span>, params)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode &gt; <span class="number">299</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Response failed with status code: %d and\nbody: %s\n&quot;</span>, resp.StatusCode, body)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Complex-Post"><a href="#Complex-Post" class="headerlink" title="Complex Post"></a>Complex Post</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">params, _ := json.Marshal(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;param1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line"><span class="string">&quot;param2&quot;</span>: <span class="string">&quot;value2&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://httpbin.org/post&quot;</span>, bytes.NewReader(params))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line"></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode &gt; <span class="number">299</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Response failed with status code: %d and\nbody: %s\n&quot;</span>, resp.StatusCode, body)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 chan + goroutine 实现生成器</title>
      <link href="/2022/01/06/go-generator/"/>
      <url>/2022/01/06/go-generator/</url>
      
        <content type="html"><![CDATA[<p>在其他语言中可以直接使用 <code>yield</code> 实现生成器的用法，go 中并没有直接实现生成器的用法。但是我们可以使用 chan + goroutine 的方式实现生成器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Generator</span><span class="params">()</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="built_in">close</span>(ch)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">            ch &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> Generator() &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重要</strong></p><p>在 chan 使用完之后记得关闭，否则读取完最后一条数据之后，进程将处于堵塞状态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AdGuard Home</title>
      <link href="/2022/01/03/adguard-home/"/>
      <url>/2022/01/03/adguard-home/</url>
      
        <content type="html"><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ol><li><p>直接使用下面 <code>docker-compose.yaml</code> 启动服务：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">adguard:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adguard/adguardhome</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">adguard</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.adguard.rule=Host(`adguard.domain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.adguard.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.adguard.service=adguard</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.adguard.loadbalancer.server.port=3000</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/opt/adguardhome/conf</span></span><br></pre></td></tr></table></figure></li><li><p>使用浏览器打开页面 <a href="https://adguard.domain.com/">https://adguard.domain.com</a> ，根据向导初始化 AdGuard 服务</p></li><li><p>修改 <code>config/AdGuardHome.yaml</code> 文件，将 <code>bind_port</code> 修改为 <code>3000</code>，然后重启服务</p></li><li><p>再次打开网页 <a href="https://adguard.domain.com/">https://adguard.domain.com</a> ，进入 Dashboard 页面</p></li></ol><span id="more"></span><h2 id="进一步设置"><a href="#进一步设置" class="headerlink" title="进一步设置"></a>进一步设置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* AdGuard Home 设置</span><br><span class="line">    * 常规设置</span><br><span class="line">        * 过滤器更新时间</span><br><span class="line">        * 浏览安全</span><br><span class="line">        * 日志配置</span><br><span class="line">            * 日志保留时间</span><br><span class="line">            * 统计保留时长</span><br><span class="line">    * DNS 设置</span><br><span class="line">        * 上游 DNS 服务器</span><br><span class="line">        * Bootstrap DNS 服务器</span><br><span class="line">        * DNS 查询速度限制</span><br><span class="line">    * DNS 封锁清单</span><br><span class="line">    * DNS 重写</span><br></pre></td></tr></table></figure><p><strong>上游 DNS 服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tls://dns.google</span><br><span class="line">tls://1.1.1.1</span><br><span class="line">https://1.1.1.1/dns-query</span><br><span class="line">https://dns.cloudflare.com/dns-query</span><br><span class="line">tls://dns.alidns.com</span><br><span class="line">https://dns.alidns.com/dns-query</span><br><span class="line">tls://doh.pub</span><br><span class="line">https://doh.pub/dns-query</span><br><span class="line">https://dns.pub/dns-query</span><br></pre></td></tr></table></figure><p><strong>Bootstrap DNS 服务器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">9.9.9.9</span><br><span class="line">8.8.8.8</span><br><span class="line">1.1.1.1</span><br><span class="line">223.5.5.5</span><br><span class="line">119.29.29.29</span><br></pre></td></tr></table></figure><p><strong>DNS 封锁清单</strong></p><p>启用默认的拦截清单，并添加以下阻止列表：</p><ul><li><a href="https://anti-ad.net/adguard.txt">https://anti-ad.net/adguard.txt</a></li><li><a href="https://anti-ad.net/easylist.txt">https://anti-ad.net/easylist.txt</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> adguard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jamstack</title>
      <link href="/2021/12/31/jamstack/"/>
      <url>/2021/12/31/jamstack/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Jamstack？"><a href="#什么是-Jamstack？" class="headerlink" title="什么是 Jamstack？"></a>什么是 Jamstack？</h2><p>Jamstack 并非一个具体的技术，而是一个概念。</p><p>在了解 Jamstack 之前，我们先了解一下：</p><ul><li>网页动静之分</li><li>动态内容静态化</li></ul><h3 id="网页动静之分"><a href="#网页动静之分" class="headerlink" title="网页动静之分"></a>网页动静之分</h3><p><img src="images/jamstack-01.svg"></p><p>如果网页内容都由 html 静态资源提供，那么 web 是静态的。否则，如果网页内容是通过查询后端服务，由浏览器实时渲染出来的，那就是动态 web。</p><p>静态网页具有以下优点：</p><ul><li>对资源占用极少</li><li>可缓存，如 CDN 等</li><li>易被搜索引擎收录</li></ul><span id="more"></span><h3 id="动态内容静态化"><a href="#动态内容静态化" class="headerlink" title="动态内容静态化"></a>动态内容静态化</h3><p>存在另外一种情况，那就是内容并不是完全动态的，有一些动态内容具备以下特征：</p><ul><li>内容的变更并不频繁，只在少数情况下需要</li><li>内容更多的是为了展现</li><li>内容不具备复杂的业务逻辑</li></ul><p>比如播客，播客便具备以上特征，稍微调整下，我们完全可以把播客这种动态的内容静态化。</p><p><img src="images/jamstack-02.svg"></p><p>而这就是 Jamstack，<strong>一种将动态内容静态化的理念</strong>。</p><h2 id="Jamstack-的组成"><a href="#Jamstack-的组成" class="headerlink" title="Jamstack 的组成"></a>Jamstack 的组成</h2><p>一个完善的 Jamstack 解决方案，必然包含以下两个部分：</p><ul><li>内容管理</li><li>构建工具</li></ul><h3 id="内容管理"><a href="#内容管理" class="headerlink" title="内容管理"></a>内容管理</h3><p>内容管理就是负责你内容的地方，你可以在这个地方随意的添加、修改或删除你的内容。</p><p>你可以使用 hexo、gitbook 这种本地文件系统的模式，可以使用 strapi、nocodb 这种 headless cms 的方式管理你的内容。</p><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>构建工具应具备以下功能：</p><ul><li>负责读取内容，并生成合适的页面</li><li>负责页面的展现（非必须，你可以使用 nginx、apache、CDN 等方式展现你的页面）</li></ul><h2 id="Jamstack-的优点及缺点"><a href="#Jamstack-的优点及缺点" class="headerlink" title="Jamstack 的优点及缺点"></a>Jamstack 的优点及缺点</h2><p>很明显，Jamstack 结合了动态与静态的优点：</p><ol><li>一方面，它支持内容的动态管理，你可以使用内容管理服务来管理你的内容，这意味着你不需要直接为这些动态内容编写静态的 HTML。</li><li>在此之上，内容与UI做到了完美的分离，在内容不变的情况下，你可以随时修改你的样式或 UI，甚至可以支持不同的载体，比如网页，小程序，App 等。</li><li>另一方面，它最终生成的是静态页面，意味着静态网页所具有的<strong>高性能</strong>，<strong>易于缓存</strong>，<strong>对搜索友善</strong>等特点它都具备。</li></ol><p>当然，这不是说 Jamstack 是万能的。</p><p>Jamstack的局限性：</p><ul><li>其一是它仅仅适合一部分以展现为主的动态内容。比如博客，文档，视频，产品展现等，它并不适合业务逻辑很强的动态内容，比如库存管理，雇员管理或订单管理这些。</li><li>其二是它的更新比较频繁，每次动态内容的变更都需要重新生成网页。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jamstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 魔法函数 - __missing__</title>
      <link href="/2021/12/27/python-magic-missing/"/>
      <url>/2021/12/27/python-magic-missing/</url>
      
        <content type="html"><![CDATA[<p>魔法函数 <a href="https://docs.python.org/3.8/reference/datamodel.html#object.__missing__">object.<strong>missing</strong></a>，官方原文描述如下：</p><blockquote><p>Called by <a href="https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__">dict.<strong>getitem</strong>()</a> to implement <code>self[key]</code> for dict subclasses when key is not in the dictionary.</p></blockquote><p>翻译过来大概意思是：当语句 <code>self[key]</code> 中的 <code>key</code> 不在字典中的时候被调用。</p><p>通常情况下，我们从 dict 中获取一个不存在的 key 时会抛出 KeyError 异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/***/code.py&quot;</span>, line <span class="number">90</span>, <span class="keyword">in</span> runcode</span><br><span class="line">    <span class="built_in">exec</span>(code, self.<span class="built_in">locals</span>)</span><br><span class="line">  File <span class="string">&quot;&lt;input&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><p>如果不想抛出异常，那么大概率会使用 <code>defaultdict</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(<span class="keyword">lambda</span>: <span class="string">&#x27;default value&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;default value&#x27;</span></span><br></pre></td></tr></table></figure><p>使用 <code>help(dict)</code> 可以发现，dict 描述中虽然有许多魔法函数，但是却没有 <code>__missing__</code>。而使用 <code>help(defaultdict)</code> 查看，可以发现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">defaultdict</span>(<span class="params">builtins.<span class="built_in">dict</span></span>)</span></span><br><span class="line"><span class="class"> |  <span class="title">defaultdict</span>(<span class="params">default_factory[, ...]</span>) --&gt; <span class="built_in">dict</span> <span class="keyword">with</span> default factory</span></span><br><span class="line"><span class="class"> |  ...</span></span><br><span class="line"><span class="class"> |  __missing__(...)</span></span><br><span class="line"><span class="class"> |      __missing__(key) # Called by __getitem__ <span class="keyword">for</span> missing key; pseudo-code:</span></span><br><span class="line"> |      <span class="keyword">if</span> self.default_factory <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">raise</span> KeyError((key,))</span><br><span class="line"> |      self[key] = value = self.default_factory()</span><br><span class="line"> |      <span class="keyword">return</span> value</span><br><span class="line"> |  ...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>contextvars</title>
      <link href="/2021/12/23/contextvars/"/>
      <url>/2021/12/23/contextvars/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.python.org/zh-cn/3/library/contextvars.html">contextvars</a> 用于管理、存储和访问上下文相关的状态。</p><p>在了解 contextvars 之前，我们先了解一下 ThreadLocal。</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>顾名思义，ThreadLocal 就是本地线程变量，它可用来管理当前线程中的变量。主要有以下几种使用场景：</p><ol><li>跨层传输数据的时候，可以简化参数传递，打破层与层之间的屏障</li><li>隔离线程之间的数据</li></ol><p>用法大致如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">global_data = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(global_data, <span class="string">&#x27;num&#x27;</span>):</span><br><span class="line">        global_data.num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        global_data.num += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread().getName(), global_data.num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        thread = threading.Thread(target=func)</span><br><span class="line">        thread.start()</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>ThreadLocal 不适合使用的场景：</p><ol><li> 协程：一些阻塞的操作，我们经常会使用到协程（如 gevent）进行处理；</li><li> 线程池：在 WSGI 中，并不能保证每次都产生一个新的线程来处理请求， 那么上一个请求遗留下来的数据将会污染当前请求。</li></ol><span id="more"></span><h2 id="contextvars"><a href="#contextvars" class="headerlink" title="contextvars"></a>contextvars</h2><p>ThreadLocal 虽然在线程中隔离效果特别好，但是在协程中效果并不理想，于是 contextvars 便出现了，它用于管理、存储和访问上下文相关的状态。</p><p>contextvars 在 asyncio 中有原生的支持并且无需任何额外配置即可被使用。例如，以下是一个简单的回显服务器，它使用 contextvars 来将客户端的地址传递到请求处理的协程中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> contextvars</span><br><span class="line"></span><br><span class="line">client_addr_var = contextvars.ContextVar(<span class="string">&#x27;client_addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_goodbye</span>():</span></span><br><span class="line">    <span class="comment"># The address of the currently handled client can be accessed</span></span><br><span class="line">    <span class="comment"># without passing it explicitly to this function.</span></span><br><span class="line"></span><br><span class="line">    client_addr = client_addr_var.get()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Good bye, client @ <span class="subst">&#123;client_addr&#125;</span>\n&#x27;</span>.encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handle_request</span>(<span class="params">reader, writer</span>):</span></span><br><span class="line">    addr = writer.transport.get_extra_info(<span class="string">&#x27;socket&#x27;</span>).getpeername()</span><br><span class="line">    client_addr_var.<span class="built_in">set</span>(addr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># In any code that we call is now possible to get</span></span><br><span class="line">    <span class="comment"># client&#x27;s address by calling &#x27;client_addr_var.get()&#x27;.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = <span class="keyword">await</span> reader.readline()</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.strip():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        writer.write(line)</span><br><span class="line"></span><br><span class="line">    writer.write(render_goodbye())</span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    srv = <span class="keyword">await</span> asyncio.start_server(</span><br><span class="line">        handle_request, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8081</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> srv:</span><br><span class="line">        <span class="keyword">await</span> srv.serve_forever()</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2 授权与 PKCE 重定向攻击</title>
      <link href="/2021/12/08/oauth2-pkce/"/>
      <url>/2021/12/08/oauth2-pkce/</url>
      
        <content type="html"><![CDATA[<h2 id="PKCE"><a href="#PKCE" class="headerlink" title="PKCE"></a>PKCE</h2><p>PKCE，发音为 <code>pixy</code>，是 Proof Key for Code Exchange 的首字母缩写。PKCE 流程和标准授权代码流程之间的主要区别是用户不需要提供 client_secret。PKCE 降低了<strong>本地应用程序</strong>（Native Application， OAuth客户端的一种）的安全风险，因为源代码中不需要嵌入 <code>secret</code>，这限制了通过逆向工程的获取 <code>secret</code> 的可能性。</p><p>为了代替 <code>client_secret</code>，客户端应用程序创建了一个唯一的字符串值 <code>code_verifier</code>，并其进行哈希处理生成 <code>code_challenge</code>。当客户端应用程序启动授权码流程的第一部分时，它会发送一个 <code>code_challenge</code>。</p><p>一旦用户通过身份验证并将授权码返回给客户端应用程序，它就会用授权码请求换取一个 <code>access_token</code>。</p><p>在此步骤中，客户端应用程序必须在 <code>code_verifier</code> 参数中包含原始唯一字符串值。如果成功匹配，则身份验证完成并返回 <code>access_token</code>。</p><p>其工作流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">autonumber</span><br><span class="line">participant Webapp</span><br><span class="line">participant Passport</span><br><span class="line">participant Backend</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; Webapp: generate and store code_verifier</span><br><span class="line">Webapp -&gt;&gt; +Passport: redirect /login?...&lt;br/&gt;&amp;redirect_uri=webapp&lt;br/&gt;&amp;code_challenge=hash(code_verifier)</span><br><span class="line">Passport -&gt;&gt; Passport: login</span><br><span class="line">Passport --&gt;&gt; -Webapp: ?code=...</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; +Passport: /TOKEN?code=...</span><br><span class="line">Passport --&gt;&gt; -Webapp: access_token</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; Backend: Authorization: Bearer &lt;access_token&gt;</span><br></pre></td></tr></table></figure><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>攻击者无法篡改流程中的任何信息，但是在很多情况下，请求可能会被截获。在移动应用程序中，攻击者可以为指定的 URL 注册专门的处理程序，或者通过后端程序将请求日志记录到一个不安全的地方。这两种方式，攻击者都能拿到授权码，进而获取到有效的授权令牌。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">autonumber</span><br><span class="line">participant Webapp</span><br><span class="line">participant Passport</span><br><span class="line">Actor Attacker</span><br><span class="line">participant Backend</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; Webapp: generate and store code_verifier</span><br><span class="line">Webapp -&gt;&gt; +Passport: redirect /login?...&lt;br/&gt;&amp;redirect_uri=webapp&lt;br/&gt;&amp;code_challenge=hash(code_verifier)</span><br><span class="line">Passport -&gt;&gt; Passport: login</span><br><span class="line">Note Over Attacker: intercept redirect</span><br><span class="line">Passport --&gt;&gt; -Attacker: ?code=...</span><br><span class="line"></span><br><span class="line">Attacker -&gt;&gt; +Passport: /TOKEN?code=...</span><br><span class="line">Passport --&gt;&gt; -Attacker: access_token</span><br><span class="line"></span><br><span class="line">Attacker -&gt;&gt; Backend: Authorization: Bearer &lt;access_token&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>防止这种的攻击的办法也比较简单，可以在请求 token 的时候，加上参数 <code>code_verifier</code>，授权服务器对 <code>code_verifier</code> 进行 hash 检验。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">autonumber</span><br><span class="line">participant Webapp</span><br><span class="line">participant Passport</span><br><span class="line">Actor Attacker</span><br><span class="line">participant Backend</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; Webapp: generate and store code_verifier</span><br><span class="line">Webapp -&gt;&gt; +Passport: redirect /login?...&lt;br/&gt;&amp;redirect_uri=webapp&lt;br/&gt;&amp;code_challenge=hash(code_verifier)</span><br><span class="line">Passport -&gt;&gt; Passport: login</span><br><span class="line">Passport --&gt;&gt; -Webapp: ?code=...</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; +Passport: /TOKEN?code=...&amp;code_verifier=code_verifier</span><br><span class="line">Passport --&gt;&gt; -Webapp: access_token</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; Backend: Authorization: Bearer &lt;access_token&gt;</span><br><span class="line"></span><br><span class="line">Note Over Webapp, Backend: PKCE Attack</span><br><span class="line">Webapp -&gt;&gt; Webapp: generate and store code_verifier</span><br><span class="line">Webapp -&gt;&gt; +Passport: redirect /login?...&lt;br/&gt;&amp;redirect_uri=webapp&lt;br/&gt;&amp;code_challenge=hash(code_verifier)</span><br><span class="line">Passport -&gt;&gt; Passport: login</span><br><span class="line">Note Over Attacker: intercept redirect</span><br><span class="line">Passport --&gt;&gt; -Attacker: ?code=...</span><br><span class="line"></span><br><span class="line">Attacker -&gt;&gt; +Passport: /TOKEN?code=...</span><br><span class="line">Note Over Passport: missing code_verifier</span><br><span class="line">Passport --&gt;&gt; -Attacker: error</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> oauth2 </tag>
            
            <tag> pkce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2 授权与 CSRF 攻击</title>
      <link href="/2021/12/08/oauth2-csrf/"/>
      <url>/2021/12/08/oauth2-csrf/</url>
      
        <content type="html"><![CDATA[<p>我们在开发微服务的时候，多半会采用 OAuth2 进行授权认证。本文将介绍如何通过状态随机数来防止可能的 CSRF 攻击。</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><a href="/2021/12/06/csrf/" title="CSRF 攻击">CSRF 攻击</a><h2 id="OAuth2-中的-CSRF-攻击"><a href="#OAuth2-中的-CSRF-攻击" class="headerlink" title="OAuth2 中的 CSRF 攻击"></a>OAuth2 中的 CSRF 攻击</h2><p>OAuth2 授权过程中有以下几个参数：</p><ul><li><code>response_type=code</code></li><li><code>client_id</code></li><li><code>redirect_uri</code></li></ul><p>这几个参数都是公开的，所有用户都使用相同的值。攻击者也无法控制 <code>redirect_uri</code>，因为这个会配置在授权服务器的合法地址列表中。</p><p>攻击者能控制的是可选参数 <code>state</code>，如果授权过程中提供了 <code>state</code>，那么授权成功后会原封不动的返回 <code>state</code>。授权流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">autonumber</span><br><span class="line">participant A as Webapp</span><br><span class="line">participant C as Passport</span><br><span class="line">participant B as Backend</span><br><span class="line"></span><br><span class="line">A -&gt;&gt; +C: redirect /login?...&amp;state=value</span><br><span class="line">C -&gt;&gt; C: login</span><br><span class="line">C --&gt;&gt; -A: redirect /?code=...&amp;state=value</span><br><span class="line"></span><br><span class="line">A --&gt;&gt; +C: /TOKEN?code=...</span><br><span class="line">C --&gt;&gt; -A: access_token</span><br><span class="line"></span><br><span class="line">A -&gt;&gt; B: Authorization: Bearer &lt;access_token&gt;</span><br></pre></td></tr></table></figure><p><code>state</code> 本身不容易受到任何攻击，但是 Web 应用程序可能会实现自定义逻辑，这种逻辑使用攻击者有机可乘。攻击流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">autonumber</span><br><span class="line">participant A as Webapp</span><br><span class="line">participant C as Passport</span><br><span class="line">Actor D as Attacker</span><br><span class="line">participant B as Backend</span><br><span class="line"></span><br><span class="line">D -&gt;&gt; +C: redirect /login?...&amp;state=value</span><br><span class="line">C -&gt;&gt; C: login</span><br><span class="line">C --&gt;&gt; -A: redirect /?code=...&amp;state=value</span><br><span class="line"></span><br><span class="line">A --&gt;&gt; +C: /TOKEN?code=...</span><br><span class="line">C --&gt;&gt; -A: access_token</span><br><span class="line"></span><br><span class="line">A -&gt;&gt; A: read state</span><br><span class="line"></span><br><span class="line">A -&gt;&gt; B: CSRF Attack</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>要防止这种攻击也非常简单，将 <code>state</code> 换成随机数，应用程序在本地妥善保存这个随机数与业务之间的关系。在授权结束后，通过随机数判断要执行的业务，并在同时将随机数与业务对应的关系删除。而在每次请求时都使用新的随机数，这样便能防止攻击者猜测到真正要执行的业务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">autonumber</span><br><span class="line">participant Webapp</span><br><span class="line">participant Passport</span><br><span class="line">Actor Attacker</span><br><span class="line">participant Backend</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; +Passport: redirect /login?...&amp;state=nonce</span><br><span class="line">Passport -&gt;&gt; Passport: login</span><br><span class="line">Passport --&gt;&gt; -Webapp: redirect /?code=...&amp;state=nonce</span><br><span class="line"></span><br><span class="line">Webapp --&gt;&gt; +Passport: /TOKEN?code=...</span><br><span class="line">Passport --&gt;&gt; -Webapp: access_token</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; Webapp: compare state nonce with stored</span><br><span class="line">Webapp -&gt;&gt; Backend: Authorization: Bearer &lt;access_token&gt;</span><br><span class="line"></span><br><span class="line">Note Over Webapp, Backend: CSRF Attack</span><br><span class="line">Attacker -&gt;&gt; +Passport: redirect /login?...&amp;state=nonce</span><br><span class="line">Passport -&gt;&gt; Passport: login</span><br><span class="line">Passport --&gt;&gt; -Webapp: redirect /?code=...&amp;state=nonce</span><br><span class="line"></span><br><span class="line">Webapp --&gt;&gt; +Passport: /TOKEN?code=...</span><br><span class="line">Passport --&gt;&gt; -Webapp: access_token</span><br><span class="line"></span><br><span class="line">Webapp -&gt;&gt; Webapp: no stored nonce</span><br><span class="line">Note Over Webapp: Error</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> csrf </tag>
            
            <tag> oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF 攻击</title>
      <link href="/2021/12/06/csrf/"/>
      <url>/2021/12/06/csrf/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-CSRF-攻击"><a href="#什么是-CSRF-攻击" class="headerlink" title="什么是 CSRF 攻击"></a>什么是 CSRF 攻击</h2><p>CSRF（Cross-Site Request Forgery）的全称是<code>跨站请求伪造</code>，也被称为 <code>One Click Attack</code> 或者 <code>Session Riding</code>，通常缩写为 CSRF 或者 XSRF。CSRF 的中文名称尽管听起来像跨站脚本攻击（XSS），但它与XSS非常不同，并且攻击方式几乎相左。XSS 利用站点内的信任用户，而 CSRF 则通过伪装来自受信任用户的请求来攻击受信任的网站。与 XSS 攻击相比，CSRF 攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比 XSS 更具危险性。</p><p>我们可以这么理解 CSRF 攻击：攻击者借助浏览器自动封装 cookie 来伪造请求，以你的名义进行某些非法操作。CSRF 能够使用你的账户发送邮件，获取你的敏感信息，甚至盗走你的账户购买商品等。CSRF 攻击其实是利用了 web 中用户身份认证验证的一个漏洞：简单的身份验证仅仅能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p><p>想要达成 CSRF 攻击，需要两个条件：</p><ol><li>用户先登陆受信任的站点 A，并产生 cookie 信息</li><li>在 cookie 未失效的情况下，访问危险网站 B</li></ol><h2 id="CSRF-攻击流程"><a href="#CSRF-攻击流程" class="headerlink" title="CSRF 攻击流程"></a>CSRF 攻击流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">autonumber</span><br><span class="line">Actor User as User (Browser)</span><br><span class="line">participant A as Web A (Trusted)</span><br><span class="line">participant B as Web B (Hacked)</span><br><span class="line"></span><br><span class="line">User -&gt;&gt; +A: 用户登陆网站 A</span><br><span class="line">A --&gt;&gt; -User: 登陆成功，并生成 cookie 信息</span><br><span class="line"></span><br><span class="line">User -&gt;&gt; +B: 浏览危险网站 B</span><br><span class="line">B --&gt;&gt; -User: 伪造对网站 A 的请求 R（可能是一个危险请求）</span><br><span class="line">User --&gt;&gt; +A: 在用户不知情的情况下对网站 A 发起请求 R，请求会自动携带 cookie</span><br><span class="line">A --&gt;&gt; -User: 网站 A 执行请求 R</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="预防-CSRF-攻击"><a href="#预防-CSRF-攻击" class="headerlink" title="预防 CSRF 攻击"></a>预防 CSRF 攻击</h2><h3 id="验证-Referer-请求头"><a href="#验证-Referer-请求头" class="headerlink" title="验证 Referer 请求头"></a>验证 <code>Referer</code> 请求头</h3><p>按照 HTTP 协议，在 HTTP 请求头中有一个 <code>Referer</code> 的请求头，它用来记载发起 HTTP 请求的地址。我们可以通过 <code>Referer</code> 中的域名信息来判断请求是否来自我们自己的网站，如果请求来自其他网站，那么极有可能是黑客的 CSRF 攻击。</p><p>这种方法的好处便是简单易行，只要开发人员在请求入口处进行统一判断就行。</p><p>然而，这种方法也并非万无一失。<code>Referer</code> 请求头由浏览器提供，虽然 HTTP 协议有明确要求，但是每个浏览器对 <code>Referer</code> 的具体实现也可能有差别，并不能保证浏览器本身没有问题。另外，将 <code>Referer</code> 寄托于第三方浏览器本身也是一种不安全的行为。</p><p>通过 <code>Referer</code> 可以追踪到用户的浏览行为，而有些用户为了防止隐私泄漏，设置禁止请求携带 <code>Referer</code> 请求头。这样的话，服务器因为无法获取 <code>Referer</code>，从而拒绝服务。</p><p>最新版的浏览器无法篡改 <code>Referer</code>，但是一些旧版本的浏览器可能会被黑客篡改 <code>Referer</code>，从而达成 CSRF 攻击。</p><h3 id="请求中携带-token-并验证"><a href="#请求中携带-token-并验证" class="headerlink" title="请求中携带 token 并验证"></a>请求中携带 token 并验证</h3><p>token 是一种类似 sessionid 的东西，由于浏览器请求会自动携带 cookie，所以 token 不能放在 cookie 中。一般情况下可以将 token 放在请求参数中，服务器在接受到请求时，会同时判断 token 的有效性。</p><p>如果只是为了防止 CSRF 攻击，token 也没必要每次都不一样，我们可以在用户登陆的时候与 sessionid 同时生成并返回给用户。</p><h3 id="在请求头中携带自定义属性"><a href="#在请求头中携带自定义属性" class="headerlink" title="在请求头中携带自定义属性"></a>在请求头中携带自定义属性</h3><p>与请求参数中携带 token 类似，这里是将 token 放置在请求头中。</p><h3 id="防止-CSRF-攻击流程如下"><a href="#防止-CSRF-攻击流程如下" class="headerlink" title="防止 CSRF 攻击流程如下"></a>防止 CSRF 攻击流程如下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">autonumber</span><br><span class="line">Actor User as User (Browser)</span><br><span class="line">participant A as Web A (Trusted)</span><br><span class="line">participant B as Web B (Hacked)</span><br><span class="line"></span><br><span class="line">User -&gt;&gt; +A: 用户登陆网站 A</span><br><span class="line">A --&gt;&gt; -User: 登陆成功，并生成 cookie 信息</span><br><span class="line"></span><br><span class="line">User -&gt;&gt; +B: 浏览危险网站 B</span><br><span class="line">B --&gt;&gt; -User: 伪造对网站 A 的请求 R（可能是一个危险请求）</span><br><span class="line">User --&gt;&gt; +A: 在用户不知情的情况下对网站 A 发起请求 R</span><br><span class="line">A --&gt;&gt; A: 网站 A 验证 Referer/token</span><br><span class="line">A --&gt;&gt; -User: 验证失败，网站 A 拒绝请求 R</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> csrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lerna</title>
      <link href="/2021/11/23/lerna/"/>
      <url>/2021/11/23/lerna/</url>
      
        <content type="html"><![CDATA[<p><a href="https://lerna.js.org/">Lerna</a> 是一个管理工具，用于管理包含多个软件包（package）的 JavaScript 项目。</p><p><a href="https://lerna.js.org/">Lerna</a> 有两种工作模式：</p><ul><li><strong>Fixed/Locked mode</strong> (default): 所有的包共用一个版本号。</li><li><strong>Independent mode</strong>: 使用 <code>--independent, -i</code> 参数初始化项目，每个包单独指定版本号。</li></ul><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>初始化项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir lerna-demo &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ npm install -D lerna</span><br><span class="line">$ npx lerna init</span><br></pre></td></tr></table></figure><p>目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lerna-demo/</span><br><span class="line">|-- packages/</span><br><span class="line">|-- package.json</span><br><span class="line">|-- lerna.json</span><br></pre></td></tr></table></figure><p>创建包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx lerna create @lerna-demo/package1</span><br></pre></td></tr></table></figure><p>最终目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lerna-demo/</span><br><span class="line">|-- packages/</span><br><span class="line">    |-- package1/</span><br><span class="line">        |-- __tests__/</span><br><span class="line">            |-- package1.test.js</span><br><span class="line">        |-- lib/</span><br><span class="line">            |-- package1.js</span><br><span class="line">        |-- package.json</span><br><span class="line">        |-- README.md</span><br><span class="line">|-- package.json</span><br><span class="line">|-- lerna.json</span><br></pre></td></tr></table></figure><p>当然，除了可以使用 <code>lerna create &lt;pkg-name&gt;</code> 创建 <code>package</code> 之外，还可以使用其他 <code>cli</code> 工具自行创建 <code>package</code>。</p><span id="more"></span><h2 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h2><ul><li><a href="https://github.com/lerna/lerna/blob/main/commands/publish#readme"><code>lerna publish</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/version#readme"><code>lerna version</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/bootstrap#readme"><code>lerna bootstrap</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/list#readme"><code>lerna list</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/changed#readme"><code>lerna changed</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/diff#readme"><code>lerna diff</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/exec#readme"><code>lerna exec</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/run#readme"><code>lerna run</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/init#readme"><code>lerna init</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/add#readme"><code>lerna add</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/clean#readme"><code>lerna clean</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/import#readme"><code>lerna import</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/link#readme"><code>lerna link</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/create#readme"><code>lerna create</code></a></li><li><a href="https://github.com/lerna/lerna/blob/main/commands/info#readme"><code>lerna info</code></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> lerna </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gin中间件</title>
      <link href="/2021/11/11/gin-middleware/"/>
      <url>/2021/11/11/gin-middleware/</url>
      
        <content type="html"><![CDATA[<h2 id="Using-middleware"><a href="#Using-middleware" class="headerlink" title="Using middleware"></a>Using middleware</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Creates a router without any middleware by default</span></span><br><span class="line">r := gin.New()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Global middleware</span></span><br><span class="line"><span class="comment">// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.</span></span><br><span class="line"><span class="comment">// By default gin.DefaultWriter = os.Stdout</span></span><br><span class="line">r.Use(gin.Logger())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recovery middleware recovers from any panics and writes a 500 if there was one.</span></span><br><span class="line">r.Use(gin.Recovery())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Per route middleware, you can add as many as you desire.</span></span><br><span class="line">r.GET(<span class="string">&quot;/benchmark&quot;</span>, MyBenchLogger(), benchEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Authorization group</span></span><br><span class="line"><span class="comment">// authorized := r.Group(&quot;/&quot;, AuthRequired())</span></span><br><span class="line"><span class="comment">// exactly the same as:</span></span><br><span class="line">authorized := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="comment">// per group middleware! in this case we use the custom created</span></span><br><span class="line"><span class="comment">// AuthRequired() middleware just in the &quot;authorized&quot; group.</span></span><br><span class="line">authorized.Use(AuthRequired())</span><br><span class="line">&#123;</span><br><span class="line">authorized.POST(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">authorized.POST(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">authorized.POST(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="comment">// nested group</span></span><br><span class="line">testing := authorized.Group(<span class="string">&quot;testing&quot;</span>)</span><br><span class="line">testing.GET(<span class="string">&quot;/analytics&quot;</span>, analyticsEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Custom-Middleware"><a href="#Custom-Middleware" class="headerlink" title="Custom Middleware"></a>Custom Middleware</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Logger</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">t := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set example variable</span></span><br><span class="line">c.Set(<span class="string">&quot;example&quot;</span>, <span class="string">&quot;12345&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// before request</span></span><br><span class="line"></span><br><span class="line">c.Next()</span><br><span class="line"></span><br><span class="line"><span class="comment">// after request</span></span><br><span class="line">latency := time.Since(t)</span><br><span class="line">log.Print(latency)</span><br><span class="line"></span><br><span class="line"><span class="comment">// access the status we are sending</span></span><br><span class="line">status := c.Writer.Status()</span><br><span class="line">log.Println(status)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.New()</span><br><span class="line">r.Use(Logger())</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">example := c.MustGet(<span class="string">&quot;example&quot;</span>).(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// it would print: &quot;12345&quot;</span></span><br><span class="line">log.Println(example)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gin响应</title>
      <link href="/2021/11/11/gin-response/"/>
      <url>/2021/11/11/gin-response/</url>
      
        <content type="html"><![CDATA[<h2 id="XML-JSON-YAML-ProtoBuf-rendering"><a href="#XML-JSON-YAML-ProtoBuf-rendering" class="headerlink" title="XML/JSON/YAML/ProtoBuf rendering"></a>XML/JSON/YAML/ProtoBuf rendering</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin.H is a shortcut for map[string]interface&#123;&#125;</span></span><br><span class="line">r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/moreJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// You also can use a struct</span></span><br><span class="line"><span class="keyword">var</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">Number  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">msg.Name = <span class="string">&quot;Lena&quot;</span></span><br><span class="line">msg.Message = <span class="string">&quot;hey&quot;</span></span><br><span class="line">msg.Number = <span class="number">123</span></span><br><span class="line"><span class="comment">// Note that msg.Name becomes &quot;user&quot; in the JSON</span></span><br><span class="line"><span class="comment">// Will output  :   &#123;&quot;user&quot;: &quot;Lena&quot;, &quot;Message&quot;: &quot;hey&quot;, &quot;Number&quot;: 123&#125;</span></span><br><span class="line">c.JSON(http.StatusOK, msg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/someXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.XML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/someYAML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.YAML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/someProtoBuf&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">reps := []<span class="keyword">int64</span>&#123;<span class="keyword">int64</span>(<span class="number">1</span>), <span class="keyword">int64</span>(<span class="number">2</span>)&#125;</span><br><span class="line">label := <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="comment">// The specific definition of protobuf is written in the testdata/protoexample file.</span></span><br><span class="line">data := &amp;protoexample.Test&#123;</span><br><span class="line">Label: &amp;label,</span><br><span class="line">Reps:  reps,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Note that data becomes binary data in the response</span></span><br><span class="line"><span class="comment">// Will output protoexample.Test protobuf serialized data</span></span><br><span class="line">c.ProtoBuf(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gin请求参数</title>
      <link href="/2021/11/11/gin-request-params/"/>
      <url>/2021/11/11/gin-request-params/</url>
      
        <content type="html"><![CDATA[<h2 id="Query-and-post-form"><a href="#Query-and-post-form" class="headerlink" title="Query and post form"></a>Query and post form</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/post&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.Query(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">page := c.DefaultQuery(<span class="string">&quot;page&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">name := c.PostForm(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">message := c.PostForm(<span class="string">&quot;message&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;id: %s; page: %s; name: %s; message: %s&quot;</span>, id, page, name, message)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Bind-query-string-or-post-data"><a href="#Bind-query-string-or-post-data" class="headerlink" title="Bind query string or post data"></a>Bind query string or post data</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="keyword">string</span>    <span class="string">`form:&quot;name&quot;`</span></span><br><span class="line">Address  <span class="keyword">string</span>    <span class="string">`form:&quot;address&quot;`</span></span><br><span class="line">Birthday time.Time <span class="string">`form:&quot;birthday&quot; time_format:&quot;2006-01-02&quot; time_utc:&quot;1&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line">route.GET(<span class="string">&quot;/testing&quot;</span>, startPage)</span><br><span class="line">route.Run(<span class="string">&quot;:8085&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startPage</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> person Person</span><br><span class="line"><span class="comment">// If `GET`, only `Form` binding engine (`query`) used.</span></span><br><span class="line"><span class="comment">// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).</span></span><br><span class="line"><span class="comment">// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48</span></span><br><span class="line"><span class="keyword">if</span> c.ShouldBind(&amp;person) == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(person.Name)</span><br><span class="line">log.Println(person.Address)</span><br><span class="line">log.Println(person.Birthday)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Success&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Custom-validators"><a href="#Custom-validators" class="headerlink" title="Custom validators"></a>Custom validators</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin/binding&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-playground/validator/v10&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Booking contains binded and validated data.</span></span><br><span class="line"><span class="keyword">type</span> Booking <span class="keyword">struct</span> &#123;</span><br><span class="line">CheckIn  time.Time <span class="string">`form:&quot;check_in&quot; binding:&quot;required,bookabledate&quot; time_format:&quot;2006-01-02&quot;`</span></span><br><span class="line">CheckOut time.Time <span class="string">`form:&quot;check_out&quot; binding:&quot;required,gtfield=CheckIn,bookabledate&quot; time_format:&quot;2006-01-02&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bookableDate validator.Func = <span class="function"><span class="keyword">func</span><span class="params">(fl validator.FieldLevel)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">date, ok := fl.Field().Interface().(time.Time)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">today := time.Now()</span><br><span class="line"><span class="keyword">if</span> today.After(date) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">&quot;bookabledate&quot;</span>, bookableDate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">route.GET(<span class="string">&quot;/bookable&quot;</span>, getBookable)</span><br><span class="line">route.Run(<span class="string">&quot;:8085&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBookable</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b Booking</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindWith(&amp;b, binding.Query); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Booking dates are valid!&quot;</span>&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gin路由设置</title>
      <link href="/2021/11/11/gin-route/"/>
      <url>/2021/11/11/gin-route/</url>
      
        <content type="html"><![CDATA[<h2 id="Grouping-routes"><a href="#Grouping-routes" class="headerlink" title="Grouping routes"></a>Grouping routes</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple group: v1</span></span><br><span class="line">v1 := router.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">v1.POST(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">v1.POST(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple group: v2</span></span><br><span class="line">v2 := router.Group(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v2.POST(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">v2.POST(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">v2.POST(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Parameters-in-path"><a href="#Parameters-in-path" class="headerlink" title="Parameters in path"></a>Parameters in path</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// This handler will match /user/john but will not match /user/ or /user</span></span><br><span class="line">router.GET(<span class="string">&quot;/user/:name&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Hello %s&quot;</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// However, this one will match /user/john/ and also /user/john/send</span></span><br><span class="line"><span class="comment">// If no other routers match /user/john, it will redirect to /user/john/</span></span><br><span class="line">router.GET(<span class="string">&quot;/user/:name/*action&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">action := c.Param(<span class="string">&quot;action&quot;</span>)</span><br><span class="line">message := name + <span class="string">&quot; is &quot;</span> + action</span><br><span class="line">c.String(http.StatusOK, message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bind-Uri"><a href="#Bind-Uri" class="headerlink" title="Bind Uri"></a>Bind Uri</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="keyword">string</span> <span class="string">`uri:&quot;id&quot; binding:&quot;required,uuid&quot;`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`uri:&quot;name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line">route.GET(<span class="string">&quot;/:name/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> person Person</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindUri(&amp;person); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;msg&quot;</span>: err&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;name&quot;</span>: person.Name, <span class="string">&quot;uuid&quot;</span>: person.ID&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">route.Run(<span class="string">&quot;:8088&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gin快速入门</title>
      <link href="/2021/11/11/gin-quick-started/"/>
      <url>/2021/11/11/gin-quick-started/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gin-gonic.com/">Gin</a> 是使用 Go 实现的 HTTP Web 框架。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><p>编写 <code>main.go</code> 文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run main.go and vist http://0.0.0.0:8080/ping on browser</span></span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Odoo Error：应收账款和应付账款字段无效</title>
      <link href="/2021/11/08/account-receivable-or-account-payable-not-valid/"/>
      <url>/2021/11/08/account-receivable-or-account-payable-not-valid/</url>
      
        <content type="html"><![CDATA[<p>在开票模块安装之后（主动安装或被动安装），需要设置开票中的 <code>会计制度</code>，否则会出现 <code>应收账款和应付账款字段无效</code> 的问题。</p><p><img src="/images/account_receivable_or_account_payable_not_valid.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> odoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署jupyter服务</title>
      <link href="/2021/10/21/docker-jupyter/"/>
      <url>/2021/10/21/docker-jupyter/</url>
      
        <content type="html"><![CDATA[<p>Jupyter Notebook 是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。</p><p>JupyterLab 是 <a href="https://jupyter.org/">Jupyter</a> 主打的最新数据科学生产工具，某种意义上，它的出现是为了取代 Jupyter Notebook。不过不用担心 Jupyter Notebook 会消失，JupyterLab 包含了 Jupyter Notebook 所有功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jupyter:</span></span><br><span class="line">    <span class="comment"># https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jupyter/datascience-notebook</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.jupyter.rule=Host(`jupyter.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.jupyter.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.jupyter.service=jupyter</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.jupyter.loadbalancer.server.port=8888</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JUPYTER_ENABLE_LAB=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/home/jovyan</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django：导出数据</title>
      <link href="/2021/10/13/django-export-data/"/>
      <url>/2021/10/13/django-export-data/</url>
      
        <content type="html"><![CDATA[<p>有4个关键点：</p><ol><li>对于导出数据中任意一行，尽量做到只做一次数据库查询，如果 <code>Django</code> 原生不支持，那就写 <code>SQL</code> 语句</li><li>只查询导出的字段，不要查询不需要的字段</li><li>分批获取数据，建议每次获取 10000 行（并非绝对，可以先用 SQL 语句在数据库查询，取一个较优的数值）</li><li>使用 <code>StreamingHttpResponse</code> 做流式响应（文本文件可以边查边响应，二进制文件就在临时文件生成之后再响应）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> StreamingHttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sample.models <span class="keyword">import</span> Bicycle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_csv</span>(<span class="params">request</span>):</span></span><br><span class="line">    heads = (<span class="string">&#x27;bicycle_num&#x27;</span>, <span class="string">&#x27;bicycle_type&#x27;</span>, <span class="string">&#x27;body_num&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;platform_qrcode&#x27;</span>, <span class="string">&#x27;put_status&#x27;</span>, <span class="string">&#x27;bicycle_qrcode&#x27;</span>, <span class="string">&#x27;created_time&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query_data</span>():</span></span><br><span class="line">        q = Q()</span><br><span class="line">        limit, offset = <span class="number">10000</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            bicycles = Bicycle.objects.<span class="built_in">filter</span>(q).values(*heads)[offset: offset + limit]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(bicycles) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">yield</span> bicycles</span><br><span class="line">            offset += limit</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_csv</span>():</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;,&#x27;</span>.join(heads) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> query_data():</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&#x27;,&#x27;</span>.join([<span class="string">f&#x27;&quot;<span class="subst">&#123;row[head]&#125;</span>&quot;&#x27;</span> <span class="keyword">for</span> head <span class="keyword">in</span> heads]) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> StreamingHttpResponse(_to_csv(), headers=&#123;</span><br><span class="line">        <span class="string">&#x27;content_type&#x27;</span>: <span class="string">&#x27;application/csv&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content-disposition&#x27;</span>: <span class="string">&#x27;attachment; filename=export.csv&#x27;</span>,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> StreamingHttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exporter</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data=(<span class="params"></span>), *, heads=(<span class="params"></span>), filename=<span class="string">&#x27;export&#x27;</span></span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.heads = heads</span><br><span class="line">        self.filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_csv</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;,&#x27;</span>.join(self.heads) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&#x27;,&#x27;</span>.join([<span class="string">f&#x27;&quot;<span class="subst">&#123;row[head]&#125;</span>&quot;&#x27;</span> <span class="keyword">for</span> head <span class="keyword">in</span> self.heads]) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_xml</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;data&gt;\n&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">yield</span> dict_to_xml(row) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;&lt;/data&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_tsv</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;\t&#x27;</span>.join(self.heads) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&#x27;\t&#x27;</span>.join([<span class="string">f&#x27;&quot;<span class="subst">&#123;row[head]&#125;</span>&quot;&#x27;</span> <span class="keyword">for</span> head <span class="keyword">in</span> self.heads]) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_json</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;&#123; &quot;data&quot;: [&#x27;</span></span><br><span class="line">        is_first = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">if</span> is_first:</span><br><span class="line">                    is_first = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&#x27;  &#x27;</span> + json.dumps(row)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">yield</span> <span class="string">&#x27;,\n  &#x27;</span> + json.dumps(row)</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;\n]&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_xlsx</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">export</span>(<span class="params">self, fmt=<span class="string">&#x27;csv&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> StreamingHttpResponse(<span class="built_in">getattr</span>(self, <span class="string">f&#x27;_to_<span class="subst">&#123;fmt&#125;</span>&#x27;</span>)(), headers=&#123;</span><br><span class="line">            <span class="string">&#x27;content_type&#x27;</span>: <span class="string">f&#x27;application/<span class="subst">&#123;fmt&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content-disposition&#x27;</span>: <span class="string">f&#x27;attachment; filename=<span class="subst">&#123;self.filename&#125;</span>.<span class="subst">&#123;fmt&#125;</span>&#x27;</span>,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><strong>Usage</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExportView</span>(<span class="params">View</span>):</span></span><br><span class="line">    heads = (<span class="string">&#x27;bicycle_num&#x27;</span>, <span class="string">&#x27;bicycle_type&#x27;</span>, <span class="string">&#x27;body_num&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;platform_qrcode&#x27;</span>, <span class="string">&#x27;put_status&#x27;</span>, <span class="string">&#x27;bicycle_qrcode&#x27;</span>, <span class="string">&#x27;created_time&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        form = ExportForm(request.GET)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> form.is_valid():</span><br><span class="line">            fmt = <span class="string">&#x27;csv&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fmt = form.cleaned_data[<span class="string">&#x27;fmt&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        q = Q()</span><br><span class="line">        bicycles = Bicycle.objects.<span class="built_in">filter</span>(q)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">query</span>():</span></span><br><span class="line">            offset, limit = <span class="number">0</span>, <span class="number">10000</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                data = bicycles[offset: offset + limit]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">yield</span> [row.detail_info() <span class="keyword">for</span> row <span class="keyword">in</span> data]</span><br><span class="line">                offset += limit</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Exporter(query(), heads=self.heads, filename=<span class="string">&#x27;bicycles&#x27;</span>).export(fmt)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django协程化</title>
      <link href="/2021/09/29/django-coroutine/"/>
      <url>/2021/09/29/django-coroutine/</url>
      
        <content type="html"><![CDATA[<h2 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">django</span><br><span class="line">gunicorn</span><br><span class="line">gevent  # use this if you use gevent workers</span><br><span class="line"># eventlet  # use this if you use eventlet workers</span><br><span class="line">psycopg2-binary</span><br><span class="line">psycogreen</span><br><span class="line">django-db-geventpool</span><br><span class="line">celery</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="gunicorn-服务"><a href="#gunicorn-服务" class="headerlink" title="gunicorn 服务"></a>gunicorn 服务</h2><p>配置 <code>gunicorn</code> 配置文件 <code>gunicorn.conf.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker_class = <span class="string">&#x27;gevent&#x27;</span>  <span class="comment"># use this if you use gevent workers</span></span><br><span class="line"><span class="comment"># worker_class = &#x27;eventlet&#x27;  # use this if you use eventlet workers</span></span><br></pre></td></tr></table></figure><h2 id="psycopg2"><a href="#psycopg2" class="headerlink" title="psycopg2"></a>psycopg2</h2><p>配置 <code>gunicorn</code> 配置文件 <code>gunicorn.conf.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_fork</span>(<span class="params">server, worker</span>):</span></span><br><span class="line">    <span class="keyword">from</span> psycogreen.gevent <span class="keyword">import</span> patch_psycopg  <span class="comment"># use this if you use gevent workers</span></span><br><span class="line">    <span class="comment"># from psycogreen.eventlet import patch_psycopg  # use this if you use eventlet workers</span></span><br><span class="line">    patch_psycopg()</span><br></pre></td></tr></table></figure><p>配置 <code>settings.py</code> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django_db_geventpool.backends.postgresql_psycopg2&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;ENGINE&#x27;: &#x27;django_db_geventpool.backends.postgis&#x27;,  # use this if you use postgis</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="celery"><a href="#celery" class="headerlink" title="celery"></a>celery</h2><p>配置 <code>celery.py</code> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.signals <span class="keyword">import</span> worker_ready</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@worker_ready.connect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_worker_ready</span>():</span></span><br><span class="line">    <span class="keyword">from</span> psycogreen.gevent <span class="keyword">import</span> patch_psycopg  <span class="comment"># use this if you use gevent workers</span></span><br><span class="line">    <span class="comment"># from psycogreen.eventlet import patch_psycopg  # use this if you use eventlet workers</span></span><br><span class="line">    patch_psycopg()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaniko</title>
      <link href="/2021/09/25/kaniko/"/>
      <url>/2021/09/25/kaniko/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/GoogleContainerTools/kaniko">Kaniko</a> 是一种在容器或 <code>Kubernetes</code> 集群内从 <code>Dockerfile</code> 构建容器镜像的工具。</p><p><a href="https://github.com/GoogleContainerTools/kaniko">Kaniko</a> 不依赖于 <code>Docker</code> 守护进程，而是完全在用户空间中执行 <code>Dockerfile</code> 中的每个命令。这使得在无法轻松或安全地运行 <code>Docker</code> 守护程序的环境中构建容器镜像成为可能，例如标准的 <code>Kubernetes</code> 集群。</p><p>下面是一个使用 Docker 构建并将镜像上传到 <code>gcr.io</code> 服务器的示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -v <span class="string">&quot;<span class="variable">$HOME</span>&quot;</span>/.config/gcloud:/root/.config/gcloud \</span><br><span class="line">    -v /path/to/context:/workspace \</span><br><span class="line">    gcr.io/kaniko-project/executor:latest \</span><br><span class="line">    --dockerfile /workspace/Dockerfile \</span><br><span class="line">    --destination <span class="string">&quot;gcr.io/<span class="variable">$PROJECT_ID</span>/<span class="variable">$IMAGE_NAME</span>:<span class="variable">$TAG</span>&quot;</span> \</span><br><span class="line">    --context dir:///workspace/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kaniko </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cryptography</title>
      <link href="/2021/09/18/cryptography/"/>
      <url>/2021/09/18/cryptography/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/pyca/cryptography">Cryptography</a> 是 Python 中的一个加密库，它只能在 <code>Python3.6+</code>、<code>PyPi3 7.2+</code> 上使用。</p><p>可以直接使用下面命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cryptography</span><br></pre></td></tr></table></figure><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">private_key = rsa.generate_private_key(public_exponent=<span class="number">65537</span>, key_size=<span class="number">2048</span>)</span><br><span class="line">public_key = private_key.public_key()</span><br></pre></td></tr></table></figure><h2 id="导出密钥对"><a href="#导出密钥对" class="headerlink" title="导出密钥对"></a>导出密钥对</h2><p>可以生成多个格式的文件。</p><p><strong>导出私钥</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.serialization <span class="keyword">import</span> Encoding, PrivateFormat, NoEncryption</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> encoding <span class="keyword">in</span> Encoding:</span><br><span class="line">    <span class="keyword">for</span> fmt <span class="keyword">in</span> PrivateFormat:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 无密码私钥</span></span><br><span class="line">            <span class="built_in">print</span>(encoding, fmt, private_key.private_bytes(encoding, fmt, NoEncryption()))</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Encoding.PEM PrivateFormat.PKCS8 b&#x27;-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDv4hmEYSthE3Uw\nROoyazwkp5XafO3ADbsdcQZNCx4r76ajJhMRlqdk+P2B3FYYDWSZPTLJssWMC8QW\net+IEaub9/v+FwssdX9/Axc8PGNpDWcuoWt+BStW/87yTpvXjMkJGzM8Se0PiYyt\nlLWx3UUandQayEN4FY6JwJIjy0ZLPXRFL1VvmHYEdMTSEj17HgcS5mFGIImrARIa\nXGVBHzzLDmFXd2CW/DK+vDXRRX+LvquYuseq1xEr9nPKNzU9FRDDU/IxmdjB2UQB\nXproON3O7+kL4D6FMfKQShBE39elryll2D9v+e2filAuSl6GOOkfXzhpYxvL77qm\nyUW2fnAnAgMBAAECggEARBPPmBEXhYJHJL66FDr4o5Jn5czEkFeVPcLAvgaktmVZ\nzj1U9g3iTbaYA02rpUHPxelnS3SPubHxIUwXuf8By86x1idmBWUHHN2cr3yX3c1u\n9f3birUe2p7YdU23zpFm0E3G2ZpFS76GjRCCDAs2vFoEQuGIvECp5hAfqUbcGSe3\n+osQCgQef8rZSG5aBM95+BAjCUkFi8jHuCVdeH6cc0VLS/D7v+lAkDWvvoIHLIme\nLrD13zfeFQa586esBM9qIAKmahuCtAnWrgEqPELmk6StK9s7B81dNy7ilBmkBTwB\n749Os46jxh7HZxYEm0cIq/Ee+TlFx0JEESaUwDNMiQKBgQD33fhwzxcsxirj9mL7\noPCqfBaFAsycfsHZ8OY5XxCtbgXRqFHnhj7Y6hUepLcs3/oBPS8zf1p0WkT+pvDJ\ncDuLrrPC5zGaN/OZwzSQbOG/3INJBhxhK4LZGMSadoligHksfNKGCS2xul91rN+k\nAdv/iqN9YL0UUS5jrvGwRtvT/QKBgQD3wREBi1/0t/yXaJt4z3Y7dw546EboacEs\ngTUEXjVqxB3t4gre+hHs3fe1PT3D+9LVKPI15YNk6RTHuzygH/4+WrdNfhtDipBp\n3rKwPOr5WrLBkn+RfteCyGl7GvzIRNq3HjeyyGieN03uZYnlGW8YedPDlyHIbqfp\nrL/lnY1D8wKBgA2uCYUoWM4Wzc0xDvt2QXIXUSLcKbDFait+GSa3cXMw7E9K6+JM\nTXGpUasUSivG3MRuvQkpkTN0u/QWAJoNgKvP44nxOpKZXe9xj5gc+kSdhf1kwfI2\n9YzHyioAOsrd7lIfPXs6THRPpe8XsGwb0imDXEySJz1U0aucvygMcRt9AoGBAMuN\n14ASV+tDQwfPDXWr1jMzNTPHe4K2aN085ydIk9C9gu2Qe2gJw7J+CGfjAh1EiEtU\nEfSQNm0xRz52qm/Q+V2XwOStSI8siExDiUJdOp1WlGmQCLmsojo0mN1pJekRETXE\nYPTFzZa4T5If4LTXOby9U2xufnYj3FeT9DIeSRNbAoGBANgrcQKDu5R8jukffJEh\nYw/lbFUF39bKvwQuTdQgkjSYWPoVKf/YzheCMgFOPkAFgMOVFdM+XueOnmIZ55EM\nouwzxN3DvS5Gj9w7Hez2igTIOjV05dkkDuU2zlJOCkgGWa7tRnCsRH5xsusKYCrB\n/4glxXtjQZxS4ZCAXLHS8j2u\n-----END PRIVATE KEY-----\n&#x27;</span><br><span class="line">Encoding.PEM PrivateFormat.TraditionalOpenSSL b&#x27;-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA7+IZhGErYRN1METqMms8JKeV2nztwA27HXEGTQseK++moyYT\nEZanZPj9gdxWGA1kmT0yybLFjAvEFnrfiBGrm/f7/hcLLHV/fwMXPDxjaQ1nLqFr\nfgUrVv/O8k6b14zJCRszPEntD4mMrZS1sd1FGp3UGshDeBWOicCSI8tGSz10RS9V\nb5h2BHTE0hI9ex4HEuZhRiCJqwESGlxlQR88yw5hV3dglvwyvrw10UV/i76rmLrH\nqtcRK/Zzyjc1PRUQw1PyMZnYwdlEAV6a6Djdzu/pC+A+hTHykEoQRN/Xpa8pZdg/\nb/ntn4pQLkpehjjpH184aWMby++6pslFtn5wJwIDAQABAoIBAEQTz5gRF4WCRyS+\nuhQ6+KOSZ+XMxJBXlT3CwL4GpLZlWc49VPYN4k22mANNq6VBz8XpZ0t0j7mx8SFM\nF7n/AcvOsdYnZgVlBxzdnK98l93NbvX924q1Htqe2HVNt86RZtBNxtmaRUu+ho0Q\nggwLNrxaBELhiLxAqeYQH6lG3Bknt/qLEAoEHn/K2UhuWgTPefgQIwlJBYvIx7gl\nXXh+nHNFS0vw+7/pQJA1r76CByyJni6w9d833hUGufOnrATPaiACpmobgrQJ1q4B\nKjxC5pOkrSvbOwfNXTcu4pQZpAU8Ae+PTrOOo8Yex2cWBJtHCKvxHvk5RcdCRBEm\nlMAzTIkCgYEA9934cM8XLMYq4/Zi+6DwqnwWhQLMnH7B2fDmOV8QrW4F0ahR54Y+\n2OoVHqS3LN/6AT0vM39adFpE/qbwyXA7i66zwucxmjfzmcM0kGzhv9yDSQYcYSuC\n2RjEmnaJYoB5LHzShgktsbpfdazfpAHb/4qjfWC9FFEuY67xsEbb0/0CgYEA98ER\nAYtf9Lf8l2ibeM92O3cOeOhG6GnBLIE1BF41asQd7eIK3voR7N33tT09w/vS1Sjy\nNeWDZOkUx7s8oB/+Plq3TX4bQ4qQad6ysDzq+VqywZJ/kX7Xgshpexr8yETatx43\nsshonjdN7mWJ5RlvGHnTw5chyG6n6ay/5Z2NQ/MCgYANrgmFKFjOFs3NMQ77dkFy\nF1Ei3CmwxWorfhkmt3FzMOxPSuviTE1xqVGrFEorxtzEbr0JKZEzdLv0FgCaDYCr\nz+OJ8TqSmV3vcY+YHPpEnYX9ZMHyNvWMx8oqADrK3e5SHz17Okx0T6XvF7BsG9Ip\ng1xMkic9VNGrnL8oDHEbfQKBgQDLjdeAElfrQ0MHzw11q9YzMzUzx3uCtmjdPOcn\nSJPQvYLtkHtoCcOyfghn4wIdRIhLVBH0kDZtMUc+dqpv0Pldl8DkrUiPLIhMQ4lC\nXTqdVpRpkAi5rKI6NJjdaSXpERE1xGD0xc2WuE+SH+C01zm8vVNsbn52I9xXk/Qy\nHkkTWwKBgQDYK3ECg7uUfI7pH3yRIWMP5WxVBd/Wyr8ELk3UIJI0mFj6FSn/2M4X\ngjIBTj5ABYDDlRXTPl7njp5iGeeRDKLsM8Tdw70uRo/cOx3s9ooEyDo1dOXZJA7l\nNs5STgpIBlmu7UZwrER+cbLrCmAqwf+IJcV7Y0GcUuGQgFyx0vI9rg==\n-----END RSA PRIVATE KEY-----\n&#x27;</span><br><span class="line">Encoding.PEM PrivateFormat.OpenSSH b&#x27;-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcnNhAAAA\nAwEAAQAAAQEA7+IZhGErYRN1METqMms8JKeV2nztwA27HXEGTQseK++moyYTEZanZPj9gdxWGA1k\nmT0yybLFjAvEFnrfiBGrm/f7/hcLLHV/fwMXPDxjaQ1nLqFrfgUrVv/O8k6b14zJCRszPEntD4mM\nrZS1sd1FGp3UGshDeBWOicCSI8tGSz10RS9Vb5h2BHTE0hI9ex4HEuZhRiCJqwESGlxlQR88yw5h\nV3dglvwyvrw10UV/i76rmLrHqtcRK/Zzyjc1PRUQw1PyMZnYwdlEAV6a6Djdzu/pC+A+hTHykEoQ\nRN/Xpa8pZdg/b/ntn4pQLkpehjjpH184aWMby++6pslFtn5wJwAAA7jlnL0C5Zy9AgAAAAdzc2gt\ncnNhAAABAQDv4hmEYSthE3UwROoyazwkp5XafO3ADbsdcQZNCx4r76ajJhMRlqdk+P2B3FYYDWSZ\nPTLJssWMC8QWet+IEaub9/v+FwssdX9/Axc8PGNpDWcuoWt+BStW/87yTpvXjMkJGzM8Se0PiYyt\nlLWx3UUandQayEN4FY6JwJIjy0ZLPXRFL1VvmHYEdMTSEj17HgcS5mFGIImrARIaXGVBHzzLDmFX\nd2CW/DK+vDXRRX+LvquYuseq1xEr9nPKNzU9FRDDU/IxmdjB2UQBXproON3O7+kL4D6FMfKQShBE\n39elryll2D9v+e2filAuSl6GOOkfXzhpYxvL77qmyUW2fnAnAAAAAwEAAQAAAQBEE8+YEReFgkck\nvroUOvijkmflzMSQV5U9wsC+BqS2ZVnOPVT2DeJNtpgDTaulQc/F6WdLdI+5sfEhTBe5/wHLzrHW\nJ2YFZQcc3ZyvfJfdzW71/duKtR7anth1TbfOkWbQTcbZmkVLvoaNEIIMCza8WgRC4Yi8QKnmEB+p\nRtwZJ7f6ixAKBB5/ytlIbloEz3n4ECMJSQWLyMe4JV14fpxzRUtL8Pu/6UCQNa++ggcsiZ4usPXf\nN94VBrnzp6wEz2ogAqZqG4K0CdauASo8QuaTpK0r2zsHzV03LuKUGaQFPAHvj06zjqPGHsdnFgSb\nRwir8R75OUXHQkQRJpTAM0yJAAAAgQDYK3ECg7uUfI7pH3yRIWMP5WxVBd/Wyr8ELk3UIJI0mFj6\nFSn/2M4XgjIBTj5ABYDDlRXTPl7njp5iGeeRDKLsM8Tdw70uRo/cOx3s9ooEyDo1dOXZJA7lNs5S\nTgpIBlmu7UZwrER+cbLrCmAqwf+IJcV7Y0GcUuGQgFyx0vI9rgAAAIEA9934cM8XLMYq4/Zi+6Dw\nqnwWhQLMnH7B2fDmOV8QrW4F0ahR54Y+2OoVHqS3LN/6AT0vM39adFpE/qbwyXA7i66zwucxmjfz\nmcM0kGzhv9yDSQYcYSuC2RjEmnaJYoB5LHzShgktsbpfdazfpAHb/4qjfWC9FFEuY67xsEbb0/0A\nAACBAPfBEQGLX/S3/Jdom3jPdjt3DnjoRuhpwSyBNQReNWrEHe3iCt76Eezd97U9PcP70tUo8jXl\ng2TpFMe7PKAf/j5at01+G0OKkGnesrA86vlassGSf5F+14LIaXsa/MhE2rceN7LIaJ43Te5lieUZ\nbxh508OXIchup+msv+WdjUPzAAAAAAEC\n-----END OPENSSH PRIVATE KEY-----\n&#x27;</span><br><span class="line">Encoding.DER PrivateFormat.PKCS8 b&#x27;0\x82\x04\xbe\x02\x01\x000\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\x00\x04\x82\x04\xa80\x82\x04\xa4\x02\x01\x00\x02\x82\x01\x01\x00\xef\xe2\x19\x84a+a\x13u0D\xea2k&lt;$\xa7\x95\xda|\xed\xc0\r\xbb\x1dq\x06M\x0b\x1e+\xef\xa6\xa3&amp;\x13\x11\x96\xa7d\xf8\xfd\x81\xdcV\x18\rd\x99=2\xc9\xb2\xc5\x8c\x0b\xc4\x16z\xdf\x88\x11\xab\x9b\xf7\xfb\xfe\x17\x0b,u\x7f\x7f\x03\x17&lt;&lt;ci\rg.\xa1k~\x05+V\xff\xce\xf2N\x9b\xd7\x8c\xc9\t\x1b3&lt;I\xed\x0f\x89\x8c\xad\x94\xb5\xb1\xddE\x1a\x9d\xd4\x1a\xc8Cx\x15\x8e\x89\xc0\x92#\xcbFK=tE/Uo\x98v\x04t\xc4\xd2\x12=&#123;\x1e\x07\x12\xe6aF \x89\xab\x01\x12\x1a\\eA\x1f&lt;\xcb\x0eaWw`\x96\xfc2\xbe\xbc5\xd1E\x7f\x8b\xbe\xab\x98\xba\xc7\xaa\xd7\x11+\xf6s\xca75=\x15\x10\xc3S\xf21\x99\xd8\xc1\xd9D\x01^\x9a\xe88\xdd\xce\xef\xe9\x0b\xe0&gt;\x851\xf2\x90J\x10D\xdf\xd7\xa5\xaf)e\xd8?o\xf9\xed\x9f\x8aP.J^\x868\xe9\x1f_8ic\x1b\xcb\xef\xba\xa6\xc9E\xb6~p\&#x27;\x02\x03\x01\x00\x01\x02\x82\x01\x00D\x13\xcf\x98\x11\x17\x85\x82G$\xbe\xba\x14:\xf8\xa3\x92g\xe5\xcc\xc4\x90W\x95=\xc2\xc0\xbe\x06\xa4\xb6eY\xce=T\xf6\r\xe2M\xb6\x98\x03M\xab\xa5A\xcf\xc5\xe9gKt\x8f\xb9\xb1\xf1!L\x17\xb9\xff\x01\xcb\xce\xb1\xd6\&#x27;f\x05e\x07\x1c\xdd\x9c\xaf|\x97\xdd\xcdn\xf5\xfd\xdb\x8a\xb5\x1e\xda\x9e\xd8uM\xb7\xce\x91f\xd0M\xc6\xd9\x9aEK\xbe\x86\x8d\x10\x82\x0c\x0b6\xbcZ\x04B\xe1\x88\xbc@\xa9\xe6\x10\x1f\xa9F\xdc\x19\&#x27;\xb7\xfa\x8b\x10\n\x04\x1e\x7f\xca\xd9HnZ\x04\xcfy\xf8\x10#\tI\x05\x8b\xc8\xc7\xb8%]x~\x9csEKK\xf0\xfb\xbf\xe9@\x905\xaf\xbe\x82\x07,\x89\x9e.\xb0\xf5\xdf7\xde\x15\x06\xb9\xf3\xa7\xac\x04\xcfj \x02\xa6j\x1b\x82\xb4\t\xd6\xae\x01*&lt;B\xe6\x93\xa4\xad+\xdb;\x07\xcd]7.\xe2\x94\x19\xa4\x05&lt;\x01\xef\x8fN\xb3\x8e\xa3\xc6\x1e\xc7g\x16\x04\x9bG\x08\xab\xf1\x1e\xf99E\xc7BD\x11&amp;\x94\xc03L\x89\x02\x81\x81\x00\xf7\xdd\xf8p\xcf\x17,\xc6*\xe3\xf6b\xfb\xa0\xf0\xaa|\x16\x85\x02\xcc\x9c~\xc1\xd9\xf0\xe69_\x10\xadn\x05\xd1\xa8Q\xe7\x86&gt;\xd8\xea\x15\x1e\xa4\xb7,\xdf\xfa\x01=/3\x7fZtZD\xfe\xa6\xf0\xc9p;\x8b\xae\xb3\xc2\xe71\x9a7\xf3\x99\xc34\x90l\xe1\xbf\xdc\x83I\x06\x1ca+\x82\xd9\x18\xc4\x9av\x89b\x80y,|\xd2\x86\t-\xb1\xba_u\xac\xdf\xa4\x01\xdb\xff\x8a\xa3&#125;`\xbd\x14Q.c\xae\xf1\xb0F\xdb\xd3\xfd\x02\x81\x81\x00\xf7\xc1\x11\x01\x8b_\xf4\xb7\xfc\x97h\x9bx\xcfv;w\x0ex\xe8F\xe8i\xc1,\x815\x04^5j\xc4\x1d\xed\xe2\n\xde\xfa\x11\xec\xdd\xf7\xb5==\xc3\xfb\xd2\xd5(\xf25\xe5\x83d\xe9\x14\xc7\xbb&lt;\xa0\x1f\xfe&gt;Z\xb7M~\x1bC\x8a\x90i\xde\xb2\xb0&lt;\xea\xf9Z\xb2\xc1\x92\x7f\x91~\xd7\x82\xc8i&#123;\x1a\xfc\xc8D\xda\xb7\x1e7\xb2\xc8h\x9e7M\xeee\x89\xe5\x19o\x18y\xd3\xc3\x97!\xc8n\xa7\xe9\xac\xbf\xe5\x9d\x8dC\xf3\x02\x81\x80\r\xae\t\x85(X\xce\x16\xcd\xcd1\x0e\xfbvAr\x17Q&quot;\xdc)\xb0\xc5j+~\x19&amp;\xb7qs0\xecOJ\xeb\xe2LMq\xa9Q\xab\x14J+\xc6\xdc\xc4n\xbd\t)\x913t\xbb\xf4\x16\x00\x9a\r\x80\xab\xcf\xe3\x89\xf1:\x92\x99]\xefq\x8f\x98\x1c\xfaD\x9d\x85\xfdd\xc1\xf26\xf5\x8c\xc7\xca*\x00:\xca\xdd\xeeR\x1f=&#123;:LtO\xa5\xef\x17\xb0l\x1b\xd2)\x83\\L\x92\&#x27;=T\xd1\xab\x9c\xbf(\x0cq\x1b&#125;\x02\x81\x81\x00\xcb\x8d\xd7\x80\x12W\xebCC\x07\xcf\ru\xab\xd63353\xc7&#123;\x82\xb6h\xdd&lt;\xe7\&#x27;H\x93\xd0\xbd\x82\xed\x90&#123;h\t\xc3\xb2~\x08g\xe3\x02\x1dD\x88KT\x11\xf4\x906m1G&gt;v\xaao\xd0\xf9]\x97\xc0\xe4\xadH\x8f,\x88LC\x89B]:\x9dV\x94i\x90\x08\xb9\xac\xa2:4\x98\xddi%\xe9\x11\x115\xc4`\xf4\xc5\xcd\x96\xb8O\x92\x1f\xe0\xb4\xd79\xbc\xbdSln~v#\xdcW\x93\xf42\x1eI\x13[\x02\x81\x81\x00\xd8+q\x02\x83\xbb\x94|\x8e\xe9\x1f|\x91!c\x0f\xe5lU\x05\xdf\xd6\xca\xbf\x04.M\xd4 \x924\x98X\xfa\x15)\xff\xd8\xce\x17\x822\x01N&gt;@\x05\x80\xc3\x95\x15\xd3&gt;^\xe7\x8e\x9eb\x19\xe7\x91\x0c\xa2\xec3\xc4\xdd\xc3\xbd.F\x8f\xdc;\x1d\xec\xf6\x8a\x04\xc8:5t\xe5\xd9$\x0e\xe56\xceRN\nH\x06Y\xae\xedFp\xacD~q\xb2\xeb\n`*\xc1\xff\x88%\xc5&#123;cA\x9cR\xe1\x90\x80\\\xb1\xd2\xf2=\xae&#x27;</span><br><span class="line">Encoding.DER PrivateFormat.TraditionalOpenSSL b&#x27;0\x82\x04\xa4\x02\x01\x00\x02\x82\x01\x01\x00\xef\xe2\x19\x84a+a\x13u0D\xea2k&lt;$\xa7\x95\xda|\xed\xc0\r\xbb\x1dq\x06M\x0b\x1e+\xef\xa6\xa3&amp;\x13\x11\x96\xa7d\xf8\xfd\x81\xdcV\x18\rd\x99=2\xc9\xb2\xc5\x8c\x0b\xc4\x16z\xdf\x88\x11\xab\x9b\xf7\xfb\xfe\x17\x0b,u\x7f\x7f\x03\x17&lt;&lt;ci\rg.\xa1k~\x05+V\xff\xce\xf2N\x9b\xd7\x8c\xc9\t\x1b3&lt;I\xed\x0f\x89\x8c\xad\x94\xb5\xb1\xddE\x1a\x9d\xd4\x1a\xc8Cx\x15\x8e\x89\xc0\x92#\xcbFK=tE/Uo\x98v\x04t\xc4\xd2\x12=&#123;\x1e\x07\x12\xe6aF \x89\xab\x01\x12\x1a\\eA\x1f&lt;\xcb\x0eaWw`\x96\xfc2\xbe\xbc5\xd1E\x7f\x8b\xbe\xab\x98\xba\xc7\xaa\xd7\x11+\xf6s\xca75=\x15\x10\xc3S\xf21\x99\xd8\xc1\xd9D\x01^\x9a\xe88\xdd\xce\xef\xe9\x0b\xe0&gt;\x851\xf2\x90J\x10D\xdf\xd7\xa5\xaf)e\xd8?o\xf9\xed\x9f\x8aP.J^\x868\xe9\x1f_8ic\x1b\xcb\xef\xba\xa6\xc9E\xb6~p\&#x27;\x02\x03\x01\x00\x01\x02\x82\x01\x00D\x13\xcf\x98\x11\x17\x85\x82G$\xbe\xba\x14:\xf8\xa3\x92g\xe5\xcc\xc4\x90W\x95=\xc2\xc0\xbe\x06\xa4\xb6eY\xce=T\xf6\r\xe2M\xb6\x98\x03M\xab\xa5A\xcf\xc5\xe9gKt\x8f\xb9\xb1\xf1!L\x17\xb9\xff\x01\xcb\xce\xb1\xd6\&#x27;f\x05e\x07\x1c\xdd\x9c\xaf|\x97\xdd\xcdn\xf5\xfd\xdb\x8a\xb5\x1e\xda\x9e\xd8uM\xb7\xce\x91f\xd0M\xc6\xd9\x9aEK\xbe\x86\x8d\x10\x82\x0c\x0b6\xbcZ\x04B\xe1\x88\xbc@\xa9\xe6\x10\x1f\xa9F\xdc\x19\&#x27;\xb7\xfa\x8b\x10\n\x04\x1e\x7f\xca\xd9HnZ\x04\xcfy\xf8\x10#\tI\x05\x8b\xc8\xc7\xb8%]x~\x9csEKK\xf0\xfb\xbf\xe9@\x905\xaf\xbe\x82\x07,\x89\x9e.\xb0\xf5\xdf7\xde\x15\x06\xb9\xf3\xa7\xac\x04\xcfj \x02\xa6j\x1b\x82\xb4\t\xd6\xae\x01*&lt;B\xe6\x93\xa4\xad+\xdb;\x07\xcd]7.\xe2\x94\x19\xa4\x05&lt;\x01\xef\x8fN\xb3\x8e\xa3\xc6\x1e\xc7g\x16\x04\x9bG\x08\xab\xf1\x1e\xf99E\xc7BD\x11&amp;\x94\xc03L\x89\x02\x81\x81\x00\xf7\xdd\xf8p\xcf\x17,\xc6*\xe3\xf6b\xfb\xa0\xf0\xaa|\x16\x85\x02\xcc\x9c~\xc1\xd9\xf0\xe69_\x10\xadn\x05\xd1\xa8Q\xe7\x86&gt;\xd8\xea\x15\x1e\xa4\xb7,\xdf\xfa\x01=/3\x7fZtZD\xfe\xa6\xf0\xc9p;\x8b\xae\xb3\xc2\xe71\x9a7\xf3\x99\xc34\x90l\xe1\xbf\xdc\x83I\x06\x1ca+\x82\xd9\x18\xc4\x9av\x89b\x80y,|\xd2\x86\t-\xb1\xba_u\xac\xdf\xa4\x01\xdb\xff\x8a\xa3&#125;`\xbd\x14Q.c\xae\xf1\xb0F\xdb\xd3\xfd\x02\x81\x81\x00\xf7\xc1\x11\x01\x8b_\xf4\xb7\xfc\x97h\x9bx\xcfv;w\x0ex\xe8F\xe8i\xc1,\x815\x04^5j\xc4\x1d\xed\xe2\n\xde\xfa\x11\xec\xdd\xf7\xb5==\xc3\xfb\xd2\xd5(\xf25\xe5\x83d\xe9\x14\xc7\xbb&lt;\xa0\x1f\xfe&gt;Z\xb7M~\x1bC\x8a\x90i\xde\xb2\xb0&lt;\xea\xf9Z\xb2\xc1\x92\x7f\x91~\xd7\x82\xc8i&#123;\x1a\xfc\xc8D\xda\xb7\x1e7\xb2\xc8h\x9e7M\xeee\x89\xe5\x19o\x18y\xd3\xc3\x97!\xc8n\xa7\xe9\xac\xbf\xe5\x9d\x8dC\xf3\x02\x81\x80\r\xae\t\x85(X\xce\x16\xcd\xcd1\x0e\xfbvAr\x17Q&quot;\xdc)\xb0\xc5j+~\x19&amp;\xb7qs0\xecOJ\xeb\xe2LMq\xa9Q\xab\x14J+\xc6\xdc\xc4n\xbd\t)\x913t\xbb\xf4\x16\x00\x9a\r\x80\xab\xcf\xe3\x89\xf1:\x92\x99]\xefq\x8f\x98\x1c\xfaD\x9d\x85\xfdd\xc1\xf26\xf5\x8c\xc7\xca*\x00:\xca\xdd\xeeR\x1f=&#123;:LtO\xa5\xef\x17\xb0l\x1b\xd2)\x83\\L\x92\&#x27;=T\xd1\xab\x9c\xbf(\x0cq\x1b&#125;\x02\x81\x81\x00\xcb\x8d\xd7\x80\x12W\xebCC\x07\xcf\ru\xab\xd63353\xc7&#123;\x82\xb6h\xdd&lt;\xe7\&#x27;H\x93\xd0\xbd\x82\xed\x90&#123;h\t\xc3\xb2~\x08g\xe3\x02\x1dD\x88KT\x11\xf4\x906m1G&gt;v\xaao\xd0\xf9]\x97\xc0\xe4\xadH\x8f,\x88LC\x89B]:\x9dV\x94i\x90\x08\xb9\xac\xa2:4\x98\xddi%\xe9\x11\x115\xc4`\xf4\xc5\xcd\x96\xb8O\x92\x1f\xe0\xb4\xd79\xbc\xbdSln~v#\xdcW\x93\xf42\x1eI\x13[\x02\x81\x81\x00\xd8+q\x02\x83\xbb\x94|\x8e\xe9\x1f|\x91!c\x0f\xe5lU\x05\xdf\xd6\xca\xbf\x04.M\xd4 \x924\x98X\xfa\x15)\xff\xd8\xce\x17\x822\x01N&gt;@\x05\x80\xc3\x95\x15\xd3&gt;^\xe7\x8e\x9eb\x19\xe7\x91\x0c\xa2\xec3\xc4\xdd\xc3\xbd.F\x8f\xdc;\x1d\xec\xf6\x8a\x04\xc8:5t\xe5\xd9$\x0e\xe56\xceRN\nH\x06Y\xae\xedFp\xacD~q\xb2\xeb\n`*\xc1\xff\x88%\xc5&#123;cA\x9cR\xe1\x90\x80\\\xb1\xd2\xf2=\xae&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.serialization <span class="keyword">import</span> Encoding, PrivateFormat, BestAvailableEncryption</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> encoding <span class="keyword">in</span> Encoding:</span><br><span class="line">    <span class="keyword">for</span> fmt <span class="keyword">in</span> PrivateFormat:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 使用密码 `123456` 加密私钥，只有 PKCS8 支持使用密码加密私钥</span></span><br><span class="line">            <span class="built_in">print</span>(encoding, fmt, private_key.private_bytes(encoding, fmt, BestAvailableEncryption(<span class="string">b&#x27;123456&#x27;</span>)))</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">except</span> UnsupportedAlgorithm:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Encoding.PEM PrivateFormat.PKCS8 b&#x27;-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFLTBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQIQTqcHtgJTvsCAggA\nMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBDfyYznd/O6Rie3uvQUf/CsBIIE\n0C1LcQbGbisX0tlI/Hvb8RkY77L6iuTQZns25rtfE34Obu4Ilevnz7pbk0T3kBXI\npo5uReb+Hf/ffsgvpUyizXeqLUu5l0Hu2kQY1K1IwG8IikOQs0TM6KErBm7qndd8\n64V2rAr30V/14BVHAa19wReMkUe0mVVTz1yH9w8cjhxAfp0dtWFTk7Q0DoZETraZ\nLrW4Ncav7240odWHvPkZLK/VwKT+67IacGigTHlT9dxsHeornJent0tTPYFeLgmI\n8sENGQ9eEBwBDc9+8wbfQTUnhIvl9RaSwZj2R3NbImH+GTN6LP4WhDxFzp6mRbdP\nrXpYdCGep6/LeW15zUX8liQ5j9mT4/4nDzG33pyZtkO3dUfo/1A2GlXh642MPbZc\nnOCwO7COaeLuUYQ75ZWEpPoZGay4Rybax7bh5P19F3KI57CPFRvkFlWD8E1Nuz6n\n2oTsFTE1jKAeV230k6kR7+pDcP+bEbJMS9ZMsEXjNTknYKeKV03xnZg74ZObwVgl\nVchp2H5D5jWh7aCUSbYh0Rnh06GTZmfAgGFJlNcuCo7vp5W6G11jM5chlyKDJwg1\narOHe9+qCHan7rmRHnf0J7q9H8H6FV4Nv7fK0I2WQzBGXMm2Z6cN7JUOKaI6KKyK\nmsazPfbYb1iIqKCC+9w3tk8DpdQOvhBM1RVwvy6P8JKnIFnTHa3jAe/iYORfcKYG\nqXVHt7OEoRm0y3/zzDKyzKHGOf3xutmrZMZ3OnX8SgD/aUCJQDzJT3+JaiEm2ubM\nwbrZVZ3UGzLJB2/kdHhvn3UTwPhoHp7xvTuY6C+w/ay8GByArZRXXwWFHGj1PXur\n7JSM17CLKFgJEbNpCoLXgF//AoTzUzee2er+HmcKnThmTVx4FuuhzyvT1sB6Ob9E\nmsXofb4tiVEnnVyGb/BRH6GPtYiLTZ3fXLRzjzagOPTOkMz8L1oaFUkNNJ4UaTkz\nHb+g+cFg0JytO6tNRSqctRbuoYxC1NcGGisxwFuHMOVX5QipBwtSvFMv/WcaHa3s\ntikEEmiJaVNapWpj/f0TMQqpfBmyzAra3kxdfiKWHDQpIFc0KFNVwqiGuQgcesBl\nwFSappNnulv1voa9sm/alKJn+N0SZZ6l1S0uoOyradKodKSQUMAbhVzPOctlVsO6\nVcml3EzT0+1kRp9Zn9cqNr9lA8cU/eAzF5v4/JfS4VZVUlR85G6ypJ4JmTpCPAwC\npDqFH9S/Wc4smYkiUs1VD5Ln822oz02IocDPmllqHRIh4HP/4vUqu0snF1t9wGPH\ncBcbazZO9+iIdHR5rw4gqjA7/6xGTQQ4tLKfwulcMW9IgR+LINkWB8Ls1ueSXOXi\n01kKf8xghODG4aHNx4PICnjTtMXZlzzJI1DxkG1XI4tR+fX9msxR8GsAtOXdHjSj\nrOmoOtomhyfDrpS0auMUuMbbWrDE3WcF9WGBL7Ad5vs2Fi/l/UhVK72nyJYbs5vD\n8UAUaQaa6JcG4GK8qzF7FZKGW3ht3JoKk0PurWEskAxDlTGTpTxKpImrBvdjLeR+\n4KEfrhP8TK54Tgc+izR7lvSfBC2jyeKhcoDIAMql2Fu3kfBZ5nKk5/+gnxT7UsV8\nnx/uH9xs7YqbgykGAA+PwfIK71CYXh7eLyi52o39aXKf\n-----END ENCRYPTED PRIVATE KEY-----\n&#x27;</span><br><span class="line">Encoding.PEM PrivateFormat.TraditionalOpenSSL b&#x27;-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: AES-256-CBC,106DE15E604344E7CD946BBD4475387F\n\nQdvIIdtEYoqsEN1bK9vUES2eE8C3+WyMS+hJHbrLxmxyD6W00b+sWrUH/b2Nl4+7\nUSN2r2m0T7wWRlWm6ahCLYB7qiGkuNX2HDrFdurvto4fluaBRW69YnOarVzu+dEw\nI/6yjAw19od8kouV0HPI8io2LyNHL2NE+8VttURzje2SGEGastsNHzoVMq+uh6pJ\njEDW3DztyhGANu+gpfx/DprM+7/molT+MhujHhAOPF6SZuF+K/pJ9sT6mw7mOL3g\nuWUCRmQuKgAls/CVLj9BJMYix6MLkB4nHmMfTx8HvIgvP4r5NHE1VOGzLyv9O1KD\n8EuPCoPFPMqa64dF6GgtsXPmsM/mMpUfLtqXxBi6+byqes5PgGofFhT2t3gA8c4t\nnwxrOblm3W9Ue13+AHQXfuyx+zVX+PAgy3SjRLTRYEBoNX887npdQlZYTdumjfgj\nxYeYrXBlBBVbFJGU+NTjl7BM6UoDtshFaE9B+GT7g7lz2H2tUmMU/34+Ch5m/idK\nmc/MiBAM5ncTHlKtxQIS6G5rQ1OFInl6ITr1EWS11C7kf7umz1mzGgAyp49ibiIG\nGQca3lbeLer22HGqRk6BXtkEoycHscfs1eLpuFUms++zbiLHw2jeESMr1r5AygxT\nFV7EG0U1nruO4aVxz4BjVLgxlyVaqmRMNA2N5+SAbvyVSh8XXDrRJW6/y5jD1jNQ\nxHm7yB6oQeiKLA++VM4JOTYyeV8d6BffUfEeALz2717vkrwGmjoZjszYmn5Tb3q5\nppSprrIf9k2AAnbn+Kqthhp95VpPXB6oyEnYrJ8+mEpzQgI6jbQYMf7Ct6OvXezj\n3VXTEebKVVXqC82pj3E0PnVijVmQ+duR1uptEiRMZIIe/kqddqx2g93GqFfXgTTi\nfy8ds9knPoKfTe2rjYFcdss6wO8Wff9nFXi2fVpFj6HDIGBURP0eOmbsAvUbfYCV\nL3A+f18iJF6KCmD7p7YwCBqCNyTM4zjGb9dZLN8Xe3QSH9j8noRtETvNmzSmRDof\n0p/LyGXpPTOKXZGZmcWUVoc+6VywvB7VQXamwfkn874ijnG8BzxpJP4Cd4DMJojI\n5z3btnjaI75N2Dg90kvRsHM2PNf71sk7Wrc1U2bbWgzn+UmdIIXZJ0XEyKMuBxr+\nVlSoOKjwIo3auTbhBSQb8vOSUmoc2BxIy+qzbZTXeUJDHGcSO2fMRKg+vI59+xiy\nuJLtT+6A87ZMi7qz83nwopddtmCkceL1H2019UfYAazUOScEWBvRdwGfT+UBnbHi\nrEzg4HPerFlVviCP0AghUnrAUWVXl/5RZl0VqK56avEDo3k+T1jRO2u9eRlY4LFe\nv37+/kIBBGJ3mMtGve0vkBTxLNkqPWvQgh+0JiNsVXIhqMFAoegxVnUOWNO5Pe9q\nOMhKwOWWtJ+9PeTJjzQIjNJG/sFysgVxICJI8E2ECiCDub3AvpK+UdaC1wfYVvvD\nGCyo+f7axTsGc/FYCGG6iPG2u25CPjuCTB8T7o+OCySvj6XMipau2fWByLQPhkrR\n9sXKjJMqIcHNWqgbjrwGaOi2XtlMsZOyGNdUruH+lyuphLLWefwJ+IEHj0xAo+tt\n-----END RSA PRIVATE KEY-----\n&#x27;</span><br><span class="line">Encoding.DER PrivateFormat.PKCS8 b&#x27;0\x82\x05-0W\x06\t*\x86H\x86\xf7\r\x01\x05\r0J0)\x06\t*\x86H\x86\xf7\r\x01\x05\x0c0\x1c\x04\x08)\xecF\xdb\xe6:\xf0\xea\x02\x02\x08\x000\x0c\x06\x08*\x86H\x86\xf7\r\x02\t\x05\x000\x1d\x06\t`\x86H\x01e\x03\x04\x01*\x04\x10\x8e\xf8\x0c\xd4\xb8\x0e!\x0fZ\xc3\x84\xd3\xd7\x0c\x05\x0b\x04\x82\x04\xd0\x18Z\xcd\xad\x90P\x8a\xc4x\xb8\x11\x8dX#\xfc&lt;\t\xa4@\xb1\x1a.\xf7\xac^?\xe3\x9b\x8d\&#x27;\xf6\xbb&quot;&amp;\xf0\t\x1bcY`ua\x99F\x861\xb7c\x00+\xd3\xa5n\x8b\xca\x14\xcc9\xc7[\xff\x05\xba\xe7\xbe\xba\x07\xee\x90\x0c\x8d\xf8K\x8f+\x0f\xe3\x17\xc1\xb7\x91he\xa5\xd4\xd9f\xf6\xf1#\xcf\x14il[\xfa\xf9\x88\xef\xa2\xc2\xe5\x0fv9\x0b\xda\xe72\x06&quot;\x18\x9dg\xda\xb7\x8c\x93f\xff\x1a\x81M\x1fS\xec\x92`\x0f\x82\x83Q\xfe+r\xe5r&gt;\xe1\xa9\xb7g \xf8+\x17\xc8!T\x912\x92\x16\x19^\xe5X\xbd\xaf\x9f!\x08\xa76w\xbak\x8e:\x00\xb3\xa9J\xf6\x97e\xa8&#123;.\xe4\xc8\x96-\x03\x941\x1fp%\rS\x7f\xf8\xd6\x9f\xa3\x83\x1eM\xfd\x9dEa&amp;\x1d\xe3\x86\x1e\xb6\x19\x99q\x8e&gt;\x04\x93\xd6P\xa2\x91\xc7b;\xfa\x01\x86Y\x16\xbe9_\xcc\xc0\xc2\x8b\xa1\xc1k+\xc79i-5\x12q\x9e\t\x9d\x82\xdaU:4\xec\x9d\xd5\xe7\xc8Y\xb6? \x01\xb9\xe6eW&amp;\x95\xae\xe9U\x90\x85\x1e\x0fV@\n\x85\x82\x88\x99\xd2\xef\x8f?\xcbUBO\xaex\x87\xf3\x07\xd5C\xd0;1X\xc0\xb3P\x91\x8b:\xb12\xfd0\xa7CJNi\xa0\xe0\xf7G\xe8\xe8\xbf\x86\xf5\xc0(\xdf\xf7\x0ex\x08\xbe\xd5\xa0)\xc1+\x98l\xd4\x9c\\|H\xb6u\x9b\x9a\xaf\x99\x9d\xb5\xede\x8ed3.\x9a36\xa2\x9b\xe1\xb2zb\xe4\xa5\x8d\x06Og\x9d\x851^\xf0y\x8e\xa7B\xaa\x97\xb7\xad\xec\x83\xda\x9a.\xd8\xaf3\xcbly\x13R\xa5\xb8\xb2o\xfb\x12\xfe\t|\xac\xa8\xb1g\xaeT\x0e\x05\x9fy\xa8\x03\x9b\xc2\xfe\xe2\x84\xday7\x86vnW\xfek\xd0\xaf\xb4\x9c\xf6\x8b\xc5\xd1\xf3\x12\x02\x9fG&#125;\xfd\x83\xe7\xe6\x0c\xbc:\xc8W%\x19y\xb0\xa8`\x0b\xd4\xe8\x91\xbf?\x1d\x1c\xf2R\xb0\xc8\x95\xa9\xbemh%0\xe5\xf4CQky\x11e\x1c\xc9\x1f\x8e\xcbBg(\x01\x04N\xeeN\xc8s,:\x19\xb8\x93\xfe\xf5\xc3E\x14\x8e\xce\xb7K\xabO\xe52K\xf9\xf3L9\xc5\xf3AD@\xdd&gt;!#$2!\xd7\x18]\xcb\xec]S)\xddw\xc9\xabI\x11-F\xb0\x88\x80\xa9\xf8\x008\x1e\x1aw\x02&lt;F\x8a|N\xf1\x89`um\xc5\xe0\x9f\x89\x95\xce\x8e\x8b\xa4\xfb\x8a\xec\xc2H@z\xe4\x0f\x9f\xb3\xe6&#123;\xa4\x9d\xfd0o#L^p\xce3_\xba\x1d&gt;4\xeb\xc8\x98\xc5\xf35bB\r\x88\xdf\xf8\xe4\xbcE\xfcv\x90\xf9\x81\xa97\xf9SU\xf0\x9b\x82\xf5NY.\x06\xc5\x03\xc1C\xb9\x12\xd7\x05\x0c\x80\x12v^\xfc\n\xf4\&#x27;*\x03`\xb3x\x8fp7\xd7\xb14c\xe8N)a\x95z\x12\xcef\x1b\x84*o\xa1\x81\xfd\x9cC\xed?\xfa\xcd\x88]\xb8w\xdf\xf1F\r\xd9\x81\x91\xc5\xb4-f`mn\x8c*\x12\xb4B%\x957\x88\x84\x9a\xae\xae\x91\xc1!\xb2K\xee\xb0G\xd8G\x12\x91?\x8b\xc1\xaaI\xe2d\xe4\x87\xa43K\x82W\xefYwG\xbe\xb4\x10\x1c\xb4\xdf\x7fA\xfaJ?h\x9c\xcc\xa0G\xd8\x9aS\xae\x9f%\xf2\xd2\x18\x95\xec,\xfc)T\x91BB\xc1\xd97\&#x27;\xe7\xe6\xec3\xe0\xf3\xcb\x8dE\x95\x020\x0c\xe3n\xda:vk\xa1\xd9\x0b\x91\xd5=Y\xacA\x80\xb5\x00\xe9m\x11\xf1\xb2y&quot;\xbav\xedQ\xc1\x89\xe6@d4zq%\xfc\xb7i\x1f\xf8\x13\xc5`\xbbV(\x87\x0e&#123;&amp;cF\x9d,e\xb4rDO\xec\xd7\x9cb\xadb\xbe\xa8\x883C\xf31~\x89z^@S\xbe\t\xa5\x00@W\xd2\x1cRLEX\xdcT\xbd&amp;lA0\&#x27;\xaa\xd4coG\x82-Y.\x0b\x8b&amp;\xb59\x87\x03\xbb\x80\xb4o\x11\xc9\xd8\xde\x07\x00\x9d\xf0\x91\x18\x9eu\xd6\xdd\x93\xe1\x18\xd7\xfb?\xfe\x18I\x89\xb5iZP%K\xf5N(X\x08\xa9\x81\x0fu\x84\xca\x10\xc1\xd1\x83\xeb\xd5mZ\xaaw|\x98\xcc\xf5#!\x1d_\x9d\x90\xf6\xe73\x9f\x9a\x1ao\xd1^\x02\&#x27;\x8a\x88M\xa7\xa5\x03\xe3\xed[g\xe6\\Z\xe0W&amp;I\x11J\x83\x96KO\x87(\xd0\x99m\xa8\xce\x1e\xd9\x8f&#125; &lt;3\x10\xa9b4z\x88\x878\x9a\x07\n\xbc\xce\xe7z\x1a:\xa2t\xd16\x93\x19\xfa \x1dS\xd4\xc8\xba\xfe\x83N\x9c\xee\x92\xbd\xbd\xd0\xbc\xf0e\xf1\xcc\xb5\xd0\xe3=)~\xab\xc6\r7\x9eA\xe2\xc0\xa5\xc2h\x9c\xc3\x04|~\&#x27;\x86\xf53\x05\xa5\xf2[Q\x85\xce\xf4\xf3\x82\xb5@&quot;r\x1a\xdcu\xc1\xce J\xae\xb1\xdeZ\xf9\xa1y5G\x80\x8f\xd5\xe0\xa3\x08)\xf8\x83\xe9\xc2\x8b\x8e\xadc\xaa\x1d\xa5\x0b\x87C\xec(\xc9bL\xe4`\xa7\x96&quot;\xe1\xa9M2f\x16\xb2\xfb\xe6\xbd*0\x9f\xe0\xe51\xdbt\xa4@&#125;\x80`\x0bs\xd1\xbb\xc1%u\x96h\x0b%1h\xa44\xdd\x18\xf9\xf6\xf2Z\xfa\x02\xa2W\xab0\xfd\xba\xeeX is&#x27;</span><br></pre></td></tr></table></figure><p><strong>导出公钥</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.serialization <span class="keyword">import</span> Encoding, PublicFormat</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> encoding <span class="keyword">in</span> Encoding:</span><br><span class="line">    <span class="keyword">for</span> fmt <span class="keyword">in</span> PublicFormat:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(encoding, fmt, public_key.public_bytes(encoding, fmt))</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Encoding.PEM PublicFormat.SubjectPublicKeyInfo b&#x27;-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7+IZhGErYRN1METqMms8\nJKeV2nztwA27HXEGTQseK++moyYTEZanZPj9gdxWGA1kmT0yybLFjAvEFnrfiBGr\nm/f7/hcLLHV/fwMXPDxjaQ1nLqFrfgUrVv/O8k6b14zJCRszPEntD4mMrZS1sd1F\nGp3UGshDeBWOicCSI8tGSz10RS9Vb5h2BHTE0hI9ex4HEuZhRiCJqwESGlxlQR88\nyw5hV3dglvwyvrw10UV/i76rmLrHqtcRK/Zzyjc1PRUQw1PyMZnYwdlEAV6a6Djd\nzu/pC+A+hTHykEoQRN/Xpa8pZdg/b/ntn4pQLkpehjjpH184aWMby++6pslFtn5w\nJwIDAQAB\n-----END PUBLIC KEY-----\n&#x27;</span><br><span class="line">Encoding.PEM PublicFormat.PKCS1 b&#x27;-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEA7+IZhGErYRN1METqMms8JKeV2nztwA27HXEGTQseK++moyYTEZan\nZPj9gdxWGA1kmT0yybLFjAvEFnrfiBGrm/f7/hcLLHV/fwMXPDxjaQ1nLqFrfgUr\nVv/O8k6b14zJCRszPEntD4mMrZS1sd1FGp3UGshDeBWOicCSI8tGSz10RS9Vb5h2\nBHTE0hI9ex4HEuZhRiCJqwESGlxlQR88yw5hV3dglvwyvrw10UV/i76rmLrHqtcR\nK/Zzyjc1PRUQw1PyMZnYwdlEAV6a6Djdzu/pC+A+hTHykEoQRN/Xpa8pZdg/b/nt\nn4pQLkpehjjpH184aWMby++6pslFtn5wJwIDAQAB\n-----END RSA PUBLIC KEY-----\n&#x27;</span><br><span class="line">Encoding.DER PublicFormat.SubjectPublicKeyInfo b&#x27;0\x82\x01&quot;0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x000\x82\x01\n\x02\x82\x01\x01\x00\xef\xe2\x19\x84a+a\x13u0D\xea2k&lt;$\xa7\x95\xda|\xed\xc0\r\xbb\x1dq\x06M\x0b\x1e+\xef\xa6\xa3&amp;\x13\x11\x96\xa7d\xf8\xfd\x81\xdcV\x18\rd\x99=2\xc9\xb2\xc5\x8c\x0b\xc4\x16z\xdf\x88\x11\xab\x9b\xf7\xfb\xfe\x17\x0b,u\x7f\x7f\x03\x17&lt;&lt;ci\rg.\xa1k~\x05+V\xff\xce\xf2N\x9b\xd7\x8c\xc9\t\x1b3&lt;I\xed\x0f\x89\x8c\xad\x94\xb5\xb1\xddE\x1a\x9d\xd4\x1a\xc8Cx\x15\x8e\x89\xc0\x92#\xcbFK=tE/Uo\x98v\x04t\xc4\xd2\x12=&#123;\x1e\x07\x12\xe6aF \x89\xab\x01\x12\x1a\\eA\x1f&lt;\xcb\x0eaWw`\x96\xfc2\xbe\xbc5\xd1E\x7f\x8b\xbe\xab\x98\xba\xc7\xaa\xd7\x11+\xf6s\xca75=\x15\x10\xc3S\xf21\x99\xd8\xc1\xd9D\x01^\x9a\xe88\xdd\xce\xef\xe9\x0b\xe0&gt;\x851\xf2\x90J\x10D\xdf\xd7\xa5\xaf)e\xd8?o\xf9\xed\x9f\x8aP.J^\x868\xe9\x1f_8ic\x1b\xcb\xef\xba\xa6\xc9E\xb6~p\&#x27;\x02\x03\x01\x00\x01&#x27;</span><br><span class="line">Encoding.DER PublicFormat.PKCS1 b&quot;0\x82\x01\n\x02\x82\x01\x01\x00\xef\xe2\x19\x84a+a\x13u0D\xea2k&lt;$\xa7\x95\xda|\xed\xc0\r\xbb\x1dq\x06M\x0b\x1e+\xef\xa6\xa3&amp;\x13\x11\x96\xa7d\xf8\xfd\x81\xdcV\x18\rd\x99=2\xc9\xb2\xc5\x8c\x0b\xc4\x16z\xdf\x88\x11\xab\x9b\xf7\xfb\xfe\x17\x0b,u\x7f\x7f\x03\x17&lt;&lt;ci\rg.\xa1k~\x05+V\xff\xce\xf2N\x9b\xd7\x8c\xc9\t\x1b3&lt;I\xed\x0f\x89\x8c\xad\x94\xb5\xb1\xddE\x1a\x9d\xd4\x1a\xc8Cx\x15\x8e\x89\xc0\x92#\xcbFK=tE/Uo\x98v\x04t\xc4\xd2\x12=&#123;\x1e\x07\x12\xe6aF \x89\xab\x01\x12\x1a\\eA\x1f&lt;\xcb\x0eaWw`\x96\xfc2\xbe\xbc5\xd1E\x7f\x8b\xbe\xab\x98\xba\xc7\xaa\xd7\x11+\xf6s\xca75=\x15\x10\xc3S\xf21\x99\xd8\xc1\xd9D\x01^\x9a\xe88\xdd\xce\xef\xe9\x0b\xe0&gt;\x851\xf2\x90J\x10D\xdf\xd7\xa5\xaf)e\xd8?o\xf9\xed\x9f\x8aP.J^\x868\xe9\x1f_8ic\x1b\xcb\xef\xba\xa6\xc9E\xb6~p&#x27;\x02\x03\x01\x00\x01&quot;</span><br><span class="line">Encoding.OpenSSH PublicFormat.OpenSSH b&#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDv4hmEYSthE3UwROoyazwkp5XafO3ADbsdcQZNCx4r76ajJhMRlqdk+P2B3FYYDWSZPTLJssWMC8QWet+IEaub9/v+FwssdX9/Axc8PGNpDWcuoWt+BStW/87yTpvXjMkJGzM8Se0PiYytlLWx3UUandQayEN4FY6JwJIjy0ZLPXRFL1VvmHYEdMTSEj17HgcS5mFGIImrARIaXGVBHzzLDmFXd2CW/DK+vDXRRX+LvquYuseq1xEr9nPKNzU9FRDDU/IxmdjB2UQBXproON3O7+kL4D6FMfKQShBE39elryll2D9v+e2filAuSl6GOOkfXzhpYxvL77qmyUW2fnAn&#x27;</span><br></pre></td></tr></table></figure><h2 id="导入密钥对"><a href="#导入密钥对" class="headerlink" title="导入密钥对"></a>导入密钥对</h2><p><strong>导入私钥</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from cryptography.hazmat.primitives.serialization import *</span><br><span class="line"></span><br><span class="line">Encoding.PEM PrivateFormat.PKCS8 -&gt; load_pem_private_key</span><br><span class="line">Encoding.PEM PrivateFormat.TraditionalOpenSSL -&gt; load_pem_private_key</span><br><span class="line">Encoding.DER PrivateFormat.PKCS8 -&gt; load_der_private_key</span><br><span class="line">Encoding.DER PrivateFormat.TraditionalOpenSSL -&gt; load_der_private_key</span><br><span class="line">Encoding.PEM PrivateFormat.OpenSSH -&gt; load_ssh_private_key</span><br></pre></td></tr></table></figure><p><strong>导入公钥</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from cryptography.hazmat.primitives.serialization import *</span><br><span class="line"></span><br><span class="line">Encoding.PEM PublicFormat.SubjectPublicKeyInfo -&gt; load_pem_public_key</span><br><span class="line">Encoding.PEM PublicFormat.PKCS1 -&gt; load_pem_public_key</span><br><span class="line">Encoding.DER PublicFormat.SubjectPublicKeyInfo -&gt; load_der_public_key</span><br><span class="line">Encoding.DER PublicFormat.PKCS1 -&gt; load_der_public_key</span><br><span class="line">Encoding.OpenSSH PublicFormat.OpenSSH -&gt; load_ssh_public_key</span><br></pre></td></tr></table></figure><h2 id="签名-amp-验签"><a href="#签名-amp-验签" class="headerlink" title="签名 &amp; 验签"></a>签名 &amp; 验签</h2><p><strong>签名过程</strong></p><ol><li>A 计算消息 m 的 hash 值，记为 h</li><li>A 使用私钥对 h 进行加密，得到密文（签名）s</li><li>A 将消息 m 及签名 s 发送给 B</li></ol><p><strong>验签过程</strong></p><ol><li>B 计算消息 m 的 hash 值，记为 h</li><li>B 使用 A 的公钥解密 s，得到 H</li><li>判断 h、H 是否相同，相同则验签通过</li></ol><p>有两种签名方案：<code>PKCS1</code>、<code>EMSA-PSS</code>，hash 算法支持：<code>SHA1</code>、<code>SHA224</code>、<code>SHA256</code>、<code>SHA384</code>、<code>SHA512</code>、<code>SHA3_224</code>、<code>SHA3_256</code>、<code>SHA3_384</code>、<code>SHA3_512</code>、<code>MD5</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric.padding <span class="keyword">import</span> PKCS1v15, PSS, MGF1</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">p = PKCS1v15()</span><br><span class="line">signature = private_key.sign(msg, p, hashes.SHA1())</span><br><span class="line">assertIsNone(public_key.verify(signature, msg, p, hashes.SHA1()))  <span class="comment"># 验签成功返回 None</span></span><br><span class="line"></span><br><span class="line">p = PSS(MGF1(hashes.SHA1()), PSS.MAX_LENGTH)</span><br><span class="line">signature = private_key.sign(msg, p, hashes.SHA1())</span><br><span class="line">assertIsNone(public_key.verify(signature, msg, p, hashes.SHA1()))  <span class="comment"># 验签成功返回 None</span></span><br></pre></td></tr></table></figure><h2 id="加密-amp-解密"><a href="#加密-amp-解密" class="headerlink" title="加密 &amp; 解密"></a>加密 &amp; 解密</h2><p><strong>加密解密过程</strong></p><ol><li>B 使用 A 的公钥加密消息 m，得到密文 s</li><li>B 将密文 s 发送给 A</li><li>A 使用自己的私钥解密密文 s，得到消息 m</li></ol><p>有两种加密解密方案：<code>PKCS1</code>、<code>EME-OAEP</code>。</p><p><strong><code>PKCS1</code> 方案</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric.padding <span class="keyword">import</span> PKCS1v15</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">p = PKCS1v15()</span><br><span class="line">ciphertext = public_key.encrypt(msg, p)</span><br><span class="line">assertEqual(msg, private_key.decrypt(ciphertext, p))</span><br></pre></td></tr></table></figure><p><strong><code>EME-OAEP</code> 方案</strong>：</p><p>只支持有限的 <code>hash</code> 算法：<code>SHA1</code>、<code>SHA224</code>、<code>SHA256</code>、<code>SHA384</code>、<code>SHA512</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric.padding <span class="keyword">import</span> OAEP, MGF1</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">p = OAEP(MGF1(hashes.SHA1()), hashes.SHA1(), <span class="string">b&#x27;hello&#x27;</span>)</span><br><span class="line">ciphertext = public_key.encrypt(msg, p)</span><br><span class="line">assertEqual(msg, private_key.decrypt(ciphertext, p))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoPath &amp; GoModule</title>
      <link href="/2021/09/13/gopath-gomodule/"/>
      <url>/2021/09/13/gopath-gomodule/</url>
      
        <content type="html"><![CDATA[<p><code>GoPath</code> 是 <code>Golang</code> 的工作空间，所有的 go 文件都必须放在 <code>GoPath</code> 目录下，才能编译运行。这样做有以下明显的缺点：</p><ol><li> 第三方依赖的包和我们自己的 <code>Golang</code> 包混在一起，会给我们的项目文件管理带来一定的麻烦。</li><li> 不同的 <code>GoPath</code> 都需要下载依赖，那么磁盘中重复的依赖就会非常多，会占用我们大量的磁盘空间。</li></ol><p><code>GoModule</code> 是 <code>go1.11</code> 初步引入，<code>go1.12</code> 正式引入的概念，它用来管理项目文件。但是在 <code>go1.11</code>、<code>go1.12</code> 中默认是关闭的，可以设置 <code>GO111MODULE=on</code> 来开启 <code>GoModule</code>。从 <code>go1.13</code> 开始，<code>Golang</code> 默认开启 <code>GoModule</code>，它会根据项目结构中是否包含 <code>go.mod</code> 文件来自动判断。</p><p>由此，引出一个疑问：<strong>有了 <code>GoModule</code> 之后，<code>GoPath</code> 是否无用了？</strong></p><p>其实不然，在有了 <code>GoModule</code> 之后，<code>GoPath</code>、<code>GoModule</code> 可以分别负责不同的职责：</p><ul><li><strong>使用 <code>GoPath</code> 管理 <code>Golang</code> 依赖</strong></li><li><strong>使用 <code>GoModule</code> 管理项目文件</strong></li></ul><blockquote><p>在使用 <code>GoModule</code> 时，需要先执行命令 <code>go mod init 模块名</code> 进行初始化，例如：<code>go mod init github.com/user/example</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task function must be specified</title>
      <link href="/2021/09/03/gulp-specified/"/>
      <url>/2021/09/03/gulp-specified/</url>
      
        <content type="html"><![CDATA[<blockquote><p>AssertionError [ERR_ASSERTION]: Task function must be specified</p></blockquote><p><code>gulpfile.js</code> 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;build&#x27;</span>], <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>执行抛出异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AssertionError [ERR_ASSERTION]: Task function must be specified</span><br><span class="line">    at Gulp.set [as _setTask] (/path/to/project/node_modules/undertaker/lib/set-task.js:10:3)</span><br><span class="line">    at Gulp.task (/path/to/project/node_modules/undertaker/lib/task.js:13:8)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/path/to/project/gulpfile.js:19:6)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1072:14)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:937:32)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:778:12)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:961:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:92:18)</span><br><span class="line">    at requireOrImport (/path/to/project/node_modules/gulp-cli/lib/shared/require-or-import.js:19:11) &#123;</span><br><span class="line">  generatedMessage: false,</span><br><span class="line">  code: &#x27;ERR_ASSERTION&#x27;,</span><br><span class="line">  actual: false,</span><br><span class="line">  expected: true,</span><br><span class="line">  operator: &#x27;==&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过查找，上述写法只能用于 <code>gulp4</code> 之前的版本，<code>gulp4</code> 之后改用以下写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, gulp.parallel(<span class="string">&#x27;build&#x27;</span>), <span class="function">() =&gt;</span> &#123;&#125;)  <span class="comment">// 并行</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, gulp.series(<span class="string">&#x27;build&#x27;</span>), <span class="function">() =&gt;</span> &#123;&#125;)    <span class="comment">// 串行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postman扩展库</title>
      <link href="/2021/08/29/postman-external/"/>
      <url>/2021/08/29/postman-external/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.postman.com/">Postman</a> 提供了您可以在请求脚本中使用的 <a href="https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/">JavaScript API</a>。pm 对象提供了测试请求和响应数据的大部分功能，<a href="https://www.postman.com/">Postman</a> 对象提供了一些额外的工作流控制。</p><p><code>require</code> 方法允许你使用沙箱<a href="https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#using-external-libraries">内置库模块</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cannot-validate-certificate</title>
      <link href="/2021/08/25/cannot-validate-certificate/"/>
      <url>/2021/08/25/cannot-validate-certificate/</url>
      
        <content type="html"><![CDATA[<blockquote><p>x509: cannot validate certificate for <code>&lt;ipaddress&gt;</code> because it doesn’t contain any IP SANs</p></blockquote><p>一般情况下，证书会包含一些信息，如<code>国家</code>、<code>机构</code>、<code>ip</code>、<code>域名</code>等等。这个问题发生的时机在客户端访问服务器，如果证书中没有包含当前访问的<code>ip</code>、<code>域名</code>等信息时，就会产生这个问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SkyWalking</title>
      <link href="/2021/08/21/skywalking/"/>
      <url>/2021/08/21/skywalking/</url>
      
        <content type="html"><![CDATA[<p><a href="https://skywalking.apache.org/">SkyWalking</a> 是一款分布式链路追踪系统。</p><p><a href="https://openresty.org/">OpenResty</a> 是一个基于 <a href="https://openresty.org/cn/nginx.html">Nginx</a> 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><span id="more"></span><h2 id="运行-SkyWalking-服务"><a href="#运行-SkyWalking-服务" class="headerlink" title="运行 SkyWalking 服务"></a>运行 SkyWalking 服务</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">skywalking-oap:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-oap-server:8.7.0-es7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SW_STORAGE=elasticsearch7</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SW_STORAGE_ES_CLUSTER_NODES=skywalking-elasticsearch:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">  <span class="attr">skywalking-ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-ui:8.7.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.skywalking.rule=Host(`skywalking.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.skywalking.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.skywalking.service=skywalking</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.skywalking.loadbalancer.server.port=8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.skywalking.middlewares=try-file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.middlewares.try-file.errors.status=404</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.middlewares.try-file.errors.service=skywalking</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.middlewares.try-file.errors.query=/index.html</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SW_OAP_ADDRESS=http://skywalking-oap:12800</span></span><br><span class="line">  <span class="attr">skywalking-elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.14.1</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">XPACK_LICENSE_SELF_GENERATED_TYPE=basic</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms512m</span> <span class="string">-Xmx2048m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/usr/share/elasticsearch/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure><h2 id="部署-OpenResty-服务"><a href="#部署-OpenResty-服务" class="headerlink" title="部署 OpenResty 服务"></a>部署 OpenResty 服务</h2><h3 id="准备-skywalking-nginx-lua-源码"><a href="#准备-skywalking-nginx-lua-源码" class="headerlink" title="准备 skywalking-nginx-lua 源码"></a>准备 <code>skywalking-nginx-lua</code> 源码</h3><p>skywalking-nginx-lua: <a href="https://github.com/apache/skywalking-nginx-lua">https://github.com/apache/skywalking-nginx-lua</a></p><h3 id="编写-nginx-conf-配置文件"><a href="#编写-nginx-conf-配置文件" class="headerlink" title="编写 nginx.conf 配置文件"></a>编写 <code>nginx.conf</code> 配置文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx.conf  --  docker-openresty</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file is installed to:</span></span><br><span class="line"><span class="comment">#   `/usr/local/openresty/nginx/conf/nginx.conf`</span></span><br><span class="line"><span class="comment"># and is the file loaded by nginx at startup,</span></span><br><span class="line"><span class="comment"># unless the user specifies otherwise.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It tracks the upstream OpenResty&#x27;s `nginx.conf`, but removes the `server`</span></span><br><span class="line"><span class="comment"># section and adds this directive:</span></span><br><span class="line"><span class="comment">#     `include /etc/nginx/conf.d/*.conf;`</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The `docker-openresty` file `nginx.vh.default.conf` is copied to</span></span><br><span class="line"><span class="comment"># `/etc/nginx/conf.d/default.conf`.  It contains the `server section</span></span><br><span class="line"><span class="comment"># of the upstream `nginx.conf`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="comment">#worker_processes 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables the use of JIT for regular expressions to speed-up their processing.</span></span><br><span class="line"><span class="attribute">pcre_jit</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enables or disables the use of underscores in client request header fields.</span></span><br><span class="line">    <span class="comment"># When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.</span></span><br><span class="line">    <span class="comment"># underscores_in_headers off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Log in JSON Format</span></span><br><span class="line">        <span class="comment"># log_format nginxlog_json escape=json &#x27;&#123; &quot;timestamp&quot;: &quot;$time_iso8601&quot;, &#x27;</span></span><br><span class="line">        <span class="comment"># &#x27;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;body_bytes_sent&quot;: $body_bytes_sent, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;request_time&quot;: $request_time, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;response_status&quot;: $status, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;request&quot;: &quot;$request&quot;, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;request_method&quot;: &quot;$request_method&quot;, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;host&quot;: &quot;$host&quot;,&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;upstream_addr&quot;: &quot;$upstream_addr&quot;,&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;http_x_forwarded_for&quot;: &quot;$http_x_forwarded_for&quot;,&#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;http_referrer&quot;: &quot;$http_referer&quot;, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;http_user_agent&quot;: &quot;$http_user_agent&quot;, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;http_version&quot;: &quot;$server_protocol&quot;, &#x27;</span></span><br><span class="line">        <span class="comment">#  &#x27;&quot;nginx_access&quot;: true &#125;&#x27;;</span></span><br><span class="line">        <span class="comment"># access_log /dev/stdout nginxlog_json;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># See Move default writable paths to a dedicated directory (#119)</span></span><br><span class="line">    <span class="comment"># https://github.com/openresty/docker-openresty/issues/119</span></span><br><span class="line">    <span class="attribute">client_body_temp_path</span> /var/run/openresty/nginx-client-body;</span><br><span class="line">    <span class="attribute">proxy_temp_path</span>       /var/run/openresty/nginx-proxy;</span><br><span class="line">    <span class="attribute">fastcgi_temp_path</span>     /var/run/openresty/nginx-fastcgi;</span><br><span class="line">    <span class="attribute">uwsgi_temp_path</span>       /var/run/openresty/nginx-uwsgi;</span><br><span class="line">    <span class="attribute">scgi_temp_path</span>        /var/run/openresty/nginx-scgi;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Don&#x27;t reveal OpenResty version to clients.</span></span><br><span class="line">    <span class="comment"># server_tokens off;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">lua_package_path</span> <span class="string">&quot;/skywalking-nginx-lua/lib/?.lua;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Buffer represents the register inform and the queue of the finished segment</span></span><br><span class="line">    <span class="attribute">lua_shared_dict</span> tracing_buffer <span class="number">100m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Init is the timer setter and keeper</span></span><br><span class="line">    <span class="comment"># Setup an infinite loop timer to do register and trace report.</span></span><br><span class="line">    <span class="section">init_worker_by_lua_block</span> &#123;</span><br><span class="line">        <span class="attribute">local</span> metadata_buffer = ngx.shared.tracing_buffer</span><br><span class="line"></span><br><span class="line">        -- Set service name</span><br><span class="line">        metadata_buffer:set(<span class="string">&#x27;serviceName&#x27;</span>, <span class="string">&#x27;192.168.56.20&#x27;</span>)</span><br><span class="line">        -- Instance means the number of Nginx deployment, does not mean the worker instances</span><br><span class="line">        metadata_buffer:set(<span class="string">&#x27;serviceInstanceName&#x27;</span>, <span class="string">&#x27;192.168.56.20&#x27;</span>)</span><br><span class="line">        -- type <span class="string">&#x27;boolean&#x27;</span>, mark the entrySpan include host/domain</span><br><span class="line">        metadata_buffer:set(<span class="string">&#x27;includeHostInEntrySpan&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        -- set random seed</span><br><span class="line">        require(<span class="string">&quot;skywalking.util&quot;</span>).set_randomseed()</span><br><span class="line">        require(<span class="string">&quot;skywalking.client&quot;</span>):startBackendTimer(<span class="string">&quot;http://skywalking-oap:12800&quot;</span>)</span><br><span class="line"></span><br><span class="line">        -- If there is a bug of this `tablepool` implementation, we can</span><br><span class="line">        -- disable it in this way</span><br><span class="line">        -- require(<span class="string">&quot;skywalking.util&quot;</span>).disable_tablepool()</span><br><span class="line"></span><br><span class="line">        skywalking_tracer = require(<span class="string">&quot;skywalking.tracer&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="section">rewrite_by_lua_block</span> &#123;</span><br><span class="line">                ------------------------------------------------------</span><br><span class="line">                -- NOTICE, <span class="attribute">this</span> should be changed manually</span><br><span class="line">                -- This variable represents the upstream logic address</span><br><span class="line">                -- Please set them as service logic name or DNS name</span><br><span class="line">                --</span><br><span class="line">                -- Currently, we can not have the upstream real network address</span><br><span class="line">                ------------------------------------------------------</span><br><span class="line">                skywalking_tracer:start(ngx.var.host)</span><br><span class="line">                -- If you want correlation custom data to the downstream service</span><br><span class="line">                -- skywalking_tracer:start(ngx.var.host, &#123;<span class="attribute">custom</span> = <span class="string">&quot;custom_value&quot;</span>&#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            proxy_pass http://10.1.50.103:8080/;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   Host              $host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Real-IP         $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-For   $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto https;</span><br><span class="line"></span><br><span class="line">            <span class="section">body_filter_by_lua_block</span> &#123;</span><br><span class="line">                <span class="attribute">if</span> ngx.arg[<span class="number">2</span>] then</span><br><span class="line">                    skywalking_tracer:finish()</span><br><span class="line">                end</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log_by_lua_block &#123;</span><br><span class="line">                skywalking_tracer:prepareForReport()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署-OpenResty-服务-1"><a href="#部署-OpenResty-服务-1" class="headerlink" title="部署 OpenResty 服务"></a>部署 OpenResty 服务</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">openresty/openresty:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">21423</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./skywalking-nginx-lua:/skywalking-nginx-lua</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> skywalking </tag>
            
            <tag> openresty </tag>
            
            <tag> opentracing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k3s容器之间互相连接</title>
      <link href="/2021/08/17/k3s-interconnect/"/>
      <url>/2021/08/17/k3s-interconnect/</url>
      
        <content type="html"><![CDATA[<h2 id="pod内容器之间相互访问"><a href="#pod内容器之间相互访问" class="headerlink" title="pod内容器之间相互访问"></a>pod内容器之间相互访问</h2><p>由于 pod 内容器共享一个网络命名空间（network namespace），故 pod 内容器之间可以直接使用 <code>localhost</code> 互相访问。</p><h2 id="pod之间容器相互访问"><a href="#pod之间容器相互访问" class="headerlink" title="pod之间容器相互访问"></a>pod之间容器相互访问</h2><table><thead><tr><th>address</th><th>description</th></tr></thead><tbody><tr><td><code>&#123;service_name&#125;.&#123;namespace&#125;.svc.cluster.local</code></td><td><code>cluster.local</code> 指的是集群域名</td></tr><tr><td><code>&#123;service_name&#125;.&#123;namespace&#125;.svc</code></td><td>集群内访问 svc</td></tr><tr><td><code>&#123;service_name&#125;.&#123;namespace&#125;</code></td><td>集群内访问 svc</td></tr><tr><td><code>&#123;service_name&#125;</code></td><td>集群内同一 namespace 内访问 svc</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k3s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在k3s上部署longhorn服务</title>
      <link href="/2021/08/13/k3s-longhorn/"/>
      <url>/2021/08/13/k3s-longhorn/</url>
      
        <content type="html"><![CDATA[<p><a href="https://longhorn.io/">Longhorn</a> 是 Kubernetes 的云原生分布式块存储。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>注意：在安装 <code>longhorn</code> 之前，需要先在节点上安装 <code>iSCSI</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y iscsi-initiator-utils targetcli</span><br><span class="line">systemctl <span class="built_in">enable</span> --now iscsid</span><br></pre></td></tr></table></figure><p>然后安装 longhorn：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm repo add longhorn https://charts.longhorn.io</span><br><span class="line">kubectl create namespace longhorn-system</span><br><span class="line">helm install longhorn longhorn/longhorn --namespace longhorn-system</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Exposing-Dashbord"><a href="#Exposing-Dashbord" class="headerlink" title="Exposing Dashbord"></a>Exposing Dashbord</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">longhorn</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">longhorn-system</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">cert-manager-issuer</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">longhorn.yourdomain.com</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">longhorn-cert</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">longhorn.yourdomain.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">longhorn-frontend</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>下面是一个带有 <code>BasicAuth</code> 验证的 <code>Ingress</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">longhorn-auth</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">longhorn-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># `htpasswd -nb user password | openssl base64`</span></span><br><span class="line">  <span class="attr">users:</span> <span class="string">dXNlcjokYXByMSRKU1dpTTN1ayRWVmhqQ3c4VnFlSDRpd1B3Q3l6UWwxCgo=</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Middleware</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">longhorn-auth</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">longhorn-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">basicAuth:</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">longhorn-auth</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">longhorn</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">longhorn-system</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">cert-manager-issuer</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">traefik</span></span><br><span class="line">    <span class="comment"># 指定中间件名称，如果有多个，则使用 `,` 分开，配置规则：&#123;namespace&#125;-&#123;middleware-name&#125;@&#123;资源类型&#125;</span></span><br><span class="line">    <span class="attr">traefik.ingress.kubernetes.io/router.middlewares:</span> <span class="string">longhorn-system-longhorn-auth@kubernetescrd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">longhorn.local.hypc.host</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">longhorn-cert</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">longhorn.local.hypc.host</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">longhorn-frontend</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">longhorn-test-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">longhorn</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">100Mi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">longhorn-test</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">longhorn-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">longhorn-test</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">longhorn-test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">longhorn-test</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:stable-alpine</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">longhorn-test-pvc</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k3s </tag>
            
            <tag> longhorn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoreDNS泛域名解析</title>
      <link href="/2021/08/07/coredns-domain/"/>
      <url>/2021/08/07/coredns-domain/</url>
      
        <content type="html"><![CDATA[<p>借助 <code>template</code> 插件可以实现泛域名解析，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">template CLASS TYPE [ZONE...] &#123;</span><br><span class="line">    match REGEX...</span><br><span class="line">    answer RR</span><br><span class="line">    additional RR</span><br><span class="line">    authority RR</span><br><span class="line">    rcode CODE</span><br><span class="line">    fallthrough [ZONE...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.:53 &#123;</span><br><span class="line">    errors</span><br><span class="line">    health</span><br><span class="line">    ready</span><br><span class="line">    template IN A domain.local &#123;</span><br><span class="line">        answer &quot;&#123;&#123; .Name &#125;&#125; 60 IN A 192.168.23.7&quot;</span><br><span class="line">        fallthrough</span><br><span class="line">    &#125;</span><br><span class="line">    forward . 8.8.8.8</span><br><span class="line">    cache 30</span><br><span class="line">    loop</span><br><span class="line">    reload</span><br><span class="line">    loadbalance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>References</strong></p><ul><li><a href="https://coredns.io/plugins/template/">CoreDNS plugin: template</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> coredns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>允许 k3s 访问外网</title>
      <link href="/2021/08/05/k3s-extranet/"/>
      <url>/2021/08/05/k3s-extranet/</url>
      
        <content type="html"><![CDATA[<p>默认情况下，Pod 采用的是 <code>dnsPolicy: ClusterFirst</code> 策略，故 k3s 中 <a href="https://coredns.io/">coredns</a> 不会解析外部服务域名，修改 <a href="https://coredns.io/">coredns</a> 的 <code>ConfigMap</code> 配置：</p><p><img src="/images/k3s-extranet.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k3s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在k3s上部署httpbin服务</title>
      <link href="/2021/07/30/k3s-httpbin/"/>
      <url>/2021/07/30/k3s-httpbin/</url>
      
        <content type="html"><![CDATA[<p><a href="https://httpbin.org/">httpbin</a> 是一个 HTTP Request &amp; Response Service，你可以向他发送请求，然后他会按照指定的规则将你的请求返回。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpbin</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">httpbin</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">httpbin</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">httpbin</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">httpbin</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kennethreitz/httpbin</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpbin</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">httpbin</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><span id="more"></span><p><code>Ingress</code> 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">httpbin</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">cert-manager-issuer</span>   <span class="comment"># 使用 cert-manager 来获取证书</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">httpbin.yourdomain.com</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">httpbin-cert</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">httpbin.yourdomain.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">httpbin</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k3s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用cert-manager管理证书</title>
      <link href="/2021/07/28/cert-manager/"/>
      <url>/2021/07/28/cert-manager/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cert-manager.io/">cert-manager</a> 是一个云原生证书管理开源项目，用于在 Kubernetes 集群中提供 HTTPS 证书并自动续期，支持 <a href="https://letsencrypt.org/">Let’s Encrypt</a> / <a href="https://www.hashicorp.com/">HashiCorp</a> / <a href="https://www.vault.com/">Vault</a> 这些免费证书的签发。</p><h2 id="安装-cert-manager"><a href="#安装-cert-manager" class="headerlink" title="安装 cert-manager"></a>安装 cert-manager</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm install cert-manager jetstack/cert-manager \</span><br><span class="line">  --namespace cert-manager \</span><br><span class="line">  --version v1.4.0 \</span><br><span class="line">  --<span class="built_in">set</span> installCRDs=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>安装时必须设置<code>installCRDs=true</code>，否则后面安装<code>Issuer</code>会抛出下面错误：</p><blockquote><p>error: no matches for kind “Issuer” in version “cert-manager.io/v1”</p></blockquote><span id="more"></span><h2 id="安装-Issuer"><a href="#安装-Issuer" class="headerlink" title="安装 Issuer"></a>安装 Issuer</h2><p>在安装<code>Issuer</code>之前，先去 <a href="https://www.cloudflare.com/">Cloudflare</a> 申请 <code>API Token</code>：</p><p><img src="/images/cert-manager.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cloudflare-api-token-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">cert-manager</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">api-token:</span> <span class="string">xxx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cert-manager-issuer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">acme:</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">name@example.com</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class="line">    <span class="attr">privateKeySecretRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cert-manager-issuer-account-key</span></span><br><span class="line">    <span class="attr">solvers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">dns01:</span></span><br><span class="line">        <span class="attr">cloudflare:</span></span><br><span class="line">          <span class="attr">email:</span> <span class="string">name@example.com</span></span><br><span class="line">          <span class="attr">apiTokenSecretRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">cloudflare-api-token-secret</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">api-token</span></span><br></pre></td></tr></table></figure><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><ul><li><a href="/2021/07/30/k3s-httpbin/" title="在k3s上部署httpbin服务">在k3s上部署httpbin服务</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> cert-manager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>png2icon</title>
      <link href="/2021/07/21/png2icon/"/>
      <url>/2021/07/21/png2icon/</url>
      
        <content type="html"><![CDATA[<p>本文的目标便是将图片转成 <code>.ico</code> 图标。</p><p><strong>支持图片格式</strong>：</p><ul><li><code>png</code></li><li><code>jpg</code></li><li><code>jpeg</code></li></ul><p><strong>依赖</strong>：</p><ul><li><code>sips</code>：macOS 系统自带的图片处理工具</li><li><code>imagemagick</code>：一套开源的、强大且稳定的图片处理工具包，需提前安装 <code>brew install imagemagick</code></li></ul><p><strong>思路</strong>：</p><ol><li>先使用 <code>sips</code> 命令得到图片的宽度</li><li>然后再使用 <code>sips</code> 命令生成 <code>iconset</code></li><li>使用 <code>iconutil</code> 命令将 <code>iconset</code> 转换成 <code>icns</code> 文件</li><li>最后使用 <code>convert</code> 命令将 <code>icns</code> 文件转换成 <code>ico</code> 文件</li></ol><span id="more"></span><p><strong>完整代码如下</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">png2icon</span></span>() &#123;</span><br><span class="line">    <span class="comment"># support: png jpg jpeg</span></span><br><span class="line">    <span class="built_in">local</span> image_file=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">if</span> [[ ! -f <span class="string">&quot;<span class="variable">$&#123;image_file&#125;</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;No such file or directory: <span class="variable">$&#123;image_file&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> fmt=$(sips --getProperty format <span class="string">&quot;<span class="variable">$&#123;image_file&#125;</span>&quot;</span> | grep format | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">local</span> size=$(sips --getProperty pixelWidth <span class="string">&quot;<span class="variable">$&#123;image_file&#125;</span>&quot;</span> | grep pixelWidth | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">local</span> filename=<span class="variable">$&#123;image_file%.*&#125;</span></span><br><span class="line">    <span class="built_in">local</span> ico_size=32</span><br><span class="line"></span><br><span class="line">    mkdir -p <span class="string">&quot;<span class="variable">$&#123;filename&#125;</span>.iconset/&quot;</span></span><br><span class="line">    <span class="built_in">local</span> resizes=(32 64 128 256 512 1024)</span><br><span class="line">    <span class="keyword">for</span> resize <span class="keyword">in</span> <span class="variable">$&#123;resizes[*]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;size&#125;</span> -ge <span class="variable">$&#123;resize&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            sips -z <span class="variable">$&#123;resize&#125;</span> <span class="variable">$&#123;resize&#125;</span> <span class="string">&quot;<span class="variable">$&#123;image_file&#125;</span>&quot;</span> --out <span class="string">&quot;<span class="variable">$&#123;filename&#125;</span>.iconset/icon_<span class="variable">$&#123;resize&#125;</span>x<span class="variable">$&#123;resize&#125;</span>.<span class="variable">$&#123;fmt&#125;</span>&quot;</span></span><br><span class="line">            ico_size=<span class="variable">$&#123;resize&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    iconutil -c icns <span class="variable">$&#123;filename&#125;</span>.iconset</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$ico_size</span> -ge 256 ]]; <span class="keyword">then</span></span><br><span class="line">        ico_size=256</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># 需要安装 imagemagick</span></span><br><span class="line">    convert -resize x<span class="variable">$&#123;ico_size&#125;</span> -gravity center -crop <span class="variable">$&#123;ico_size&#125;</span>x<span class="variable">$&#123;ico_size&#125;</span>+0+0 <span class="string">&quot;<span class="variable">$&#123;image_file&#125;</span>&quot;</span> -flatten -colors 256 -background transparent <span class="string">&quot;<span class="variable">$&#123;filename&#125;</span>.ico&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>ico</code> 文件最大像素为 <code>256</code> 像素，建议宽度在 <code>256</code> 像素以上的图片生成 <code>ico</code> 图标。</li><li>选择图片时，尽量选择宽高相同的图片，否则会出现 <code>convert: width or height exceeds limit &#39;***.ico&#39; @ error/icon.c/WriteICONImage/927.</code> 错误。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k3s集群中开启firewall</title>
      <link href="/2021/07/16/k3s-firewall/"/>
      <url>/2021/07/16/k3s-firewall/</url>
      
        <content type="html"><![CDATA[<p>关于如何搭建k3s集群，可以参考我的<a href="/2021/07/06/k3s-cluster/" title="上一篇">上一篇</a>文章，本文介绍如何在k3s集群中开启firewall。</p><p>下面是一些常用的端口：</p><table><thead><tr><th>PROTOCOL</th><th>PORT</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td>TCP</td><td>2376</td><td>Node driver Docker daemon TLS port</td></tr><tr><td>TCP</td><td>2379</td><td>Etcd client requests</td></tr><tr><td>TCP</td><td>2380</td><td>Etcd peer communication</td></tr><tr><td>TCP</td><td>6443</td><td>Kubernetes API</td></tr><tr><td>UDP</td><td>8472</td><td>Canal/Flannel VXLAN overlay networking</td></tr><tr><td>TCP</td><td>9099</td><td>Canal/Flannel livenessProbe/readinessProbe</td></tr><tr><td>TCP</td><td>10250</td><td>Kubelet API</td></tr><tr><td>TCP</td><td>10254</td><td>Ingress controller livenessProbe/readinessProbe</td></tr><tr><td>TCP / UDP</td><td>30000-32767</td><td>NodePort port range</td></tr></tbody></table><span id="more"></span><p><strong>k3s Master</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=443/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=6443/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=8472/udp</span><br><span class="line">firewall-cmd --permanent --add-port=10250/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=30000-32767/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=30000-32767/udp</span><br><span class="line">firewall-cmd --permanent --add-masquerade</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>k3s Agent</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=443/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=8472/udp</span><br><span class="line">firewall-cmd --permanent --add-port=10250/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=30000-32767/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=30000-32767/udp</span><br><span class="line">firewall-cmd --permanent --add-masquerade</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> k3s </tag>
            
            <tag> kubernets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k3s执行helm报错：Kubernetes cluster unreachable</title>
      <link href="/2021/07/07/k3s-kebuconfig/"/>
      <url>/2021/07/07/k3s-kebuconfig/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Error: Kubernetes cluster unreachable: Get “<a href="http://localhost:8080/version?timeout=32s&quot;">http://localhost:8080/version?timeout=32s&quot;</a>: dial tcp [::1]:8080: connect: connection refused</p></blockquote><p><strong>报错原因</strong>：</p><p>helm v3版本不再需要Tiller，而是直接访问ApiServer来与k8s交互，通过环境变量<code>KUBECONFIG</code>来读取存有ApiServre的地址与token的配置文件地址，默认地址为<code>~/.kube/config</code>。</p><p><strong>解决办法</strong>：</p><ul><li>通过修改环境变量<code>KUBECONFIG</code>来解决这个问题：<code>export KUBECONFIG=/etc/rancher/k3s/k3s.yaml</code>。</li><li>或者<code>ln -s /etc/rancher/k3s/k3s.yaml ~/.kube/config</code>。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> k3s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建k3s集群</title>
      <link href="/2021/07/06/k3s-cluster/"/>
      <url>/2021/07/06/k3s-cluster/</url>
      
        <content type="html"><![CDATA[<p><a href="https://rancher.com/products/k3s/">k3s</a>是经CNCF一致性认证的Kubernetes发行版，专为物联网及边缘计算设计。</p><h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><table><thead><tr><th>服务器</th><th>用途</th><th>配置</th><th>IP</th></tr></thead><tbody><tr><td>k3s-master</td><td>k3s-server（master节点）</td><td>2C2G</td><td>10.17.56.20</td></tr><tr><td>k3s-agent1</td><td>k3s-agent（agent节点1）</td><td>2C2G</td><td>10.17.56.21</td></tr><tr><td>k3s-agent2</td><td>k3s-agent（agent节点2）</td><td>2C2G</td><td>10.17.56.22</td></tr></tbody></table><p>这三台机器安装的是<code>CentOS7</code>系统。</p><span id="more"></span><h2 id="安装k3s-master节点"><a href="#安装k3s-master节点" class="headerlink" title="安装k3s master节点"></a>安装k3s master节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yum makecache \</span><br><span class="line">    &amp;&amp; yum update -y \</span><br><span class="line">    &amp;&amp; yum install -y git vim tree yum-utils \</span><br><span class="line">    &amp;&amp; curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /usr/<span class="built_in">local</span>/bin/jq \</span><br><span class="line">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;vm.max_map_count = 655300&#x27;</span> &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p</span><br><span class="line">systemctl stop firewalld.service &amp;&amp; systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/rancher/k3s/ &amp;&amp; tee /etc/rancher/k3s/registries.yaml &lt;&lt;<span class="string">&quot;EOF&quot;</span></span><br><span class="line">mirrors:</span><br><span class="line">  docker.io:</span><br><span class="line">    endpoint:</span><br><span class="line">      - <span class="string">&quot;https://xxx.mirror.aliyuncs.com&quot;</span></span><br><span class="line">  quay.io:</span><br><span class="line">    endpoint:</span><br><span class="line">      - <span class="string">&quot;https://quay.mirrors.yourproxy.com&quot;</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> K3S_NODE_NAME=k3s-master</span><br><span class="line"><span class="built_in">export</span> K3S_EXTERNAL_IP=10.17.56.20</span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_MIRROR=cn</span><br><span class="line">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | sh -</span><br></pre></td></tr></table></figure><h2 id="安装k3s-agent节点"><a href="#安装k3s-agent节点" class="headerlink" title="安装k3s agent节点"></a>安装k3s agent节点</h2><p>安装agent节点前，需要先登陆master节点，获取<code>node-token</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/rancher/k3s/server/node-token</span><br></pre></td></tr></table></figure><p>然后登陆agent节点，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">yum makecache \</span><br><span class="line">    &amp;&amp; yum update -y \</span><br><span class="line">    &amp;&amp; yum install -y git vim tree yum-utils \</span><br><span class="line">    &amp;&amp; curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /usr/<span class="built_in">local</span>/bin/jq \</span><br><span class="line">    &amp;&amp; chmod a+x /usr/<span class="built_in">local</span>/bin/jq</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;vm.max_map_count = 655300&#x27;</span> &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p</span><br><span class="line">systemctl stop firewalld.service &amp;&amp; systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/rancher/k3s/ &amp;&amp; tee /etc/rancher/k3s/registries.yaml &lt;&lt;<span class="string">&quot;EOF&quot;</span></span><br><span class="line">mirrors:</span><br><span class="line">  docker.io:</span><br><span class="line">    endpoint:</span><br><span class="line">      - <span class="string">&quot;https://xxx.mirror.aliyuncs.com&quot;</span></span><br><span class="line">  quay.io:</span><br><span class="line">    endpoint:</span><br><span class="line">      - <span class="string">&quot;https://quay.mirrors.yourproxy.com&quot;</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> K3S_URL=https://10.17.56.20:6443</span><br><span class="line"><span class="built_in">export</span> K3S_TOKEN=       <span class="comment"># 在master节点上获取的`node-token`</span></span><br><span class="line"><span class="built_in">export</span> K3S_NODE_NAME=k3s-agent1</span><br><span class="line"><span class="comment"># export K3S_NODE_NAME=k3s-agent2</span></span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_MIRROR=cn</span><br><span class="line"></span><br><span class="line">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | sh -</span><br></pre></td></tr></table></figure><h2 id="管理集群"><a href="#管理集群" class="headerlink" title="管理集群"></a>管理集群</h2><p><a href="https://k8slens.dev/">lens</a>是一个开源的管理<code>Kubernetes</code>集群的IDE，支持<code>MacOS</code>，<code>Windows</code>和<code>Linux</code>。</p><ol><li>先登陆master节点，复制<code>/etc/rancher/k3s/k3s.yaml</code>文件中的内容。</li><li>打开<a href="https://k8slens.dev/">lens</a>，点击<code>添加集群</code>，将刚刚复制的内容粘贴到里面，修改<code>server</code>地址，保存即可。</li><li>启用<code>metrics</code>，选中刚刚添加的集群，依次点击<code>settings -&gt; LENS METRICS</code>，将其中选项全部开启，保存，等待一段时间之后便能看到<code>metrics</code>数据了。</li></ol><p>关于<a href="https://rancher.com/products/k3s/">k3s</a>、<a href="https://k8slens.dev/">lens</a>更多用法请自行摸索。</p>]]></content>
      
      
      
        <tags>
            
            <tag> k3s </tag>
            
            <tag> kubernets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将docker registry设置为代理</title>
      <link href="/2021/06/30/docker-registry-proxy/"/>
      <url>/2021/06/30/docker-registry-proxy/</url>
      
        <content type="html"><![CDATA[<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">gcr.io.yml</a></li><li class="tab"><a href="#-2">docker-compose.yml</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> [<span class="string">nosniff</span>]</span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">proxy:</span></span><br><span class="line">  <span class="attr">remoteurl:</span> <span class="string">https://gcr.io</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="-2"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gcr_io:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.gcr_io.rule=Host(`gcr.mirrors.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.gcr_io.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.gcr_io.service=gcr_io</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.gcr_io.loadbalancer.server.port=5000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./gcr.io.yml:/etc/docker/registry/config.yml</span></span><br></pre></td></tr></table></figure></div></div></div><p>使用<code>docker-compose up -d</code>命令启动代理服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker搭建Plausible服务</title>
      <link href="/2021/06/20/docker-plausible/"/>
      <url>/2021/06/20/docker-plausible/</url>
      
        <content type="html"><![CDATA[<p><a href="https://plausible.io/">Plausible</a>是一种轻量级、开源的网站分析工具。</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">plausible.env</a></li><li class="tab"><a href="#-2">docker-compose.yaml</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ADMIN_USER_NAME</span>=admin</span><br><span class="line"><span class="attr">ADMIN_USER_EMAIL</span>=admin@yourdomain.com</span><br><span class="line"><span class="attr">ADMIN_USER_PWD</span>=QAGvniNx7pEwYBYoHjD9AW3y8PmrQbJT</span><br><span class="line"></span><br><span class="line"><span class="attr">BASE_URL</span>=https://plausible.yourdomain.com</span><br><span class="line"><span class="attr">SECRET_KEY_BASE</span>=BwX9gsbCdYkMfRkaNecRTN4LVA4a8RyUjiENT5J93Dkmrg8LdZyabKBDDGqD43Wr</span><br><span class="line"><span class="attr">DATABASE_URL</span>=postgres://postgres:postgres@plausible-postgres:<span class="number">5432</span>/plausible</span><br><span class="line"><span class="attr">CLICKHOUSE_DATABASE_URL</span>=http://plausible-clickhouse:<span class="number">8123</span>/plausible</span><br><span class="line"></span><br><span class="line"><span class="attr">SMTP_HOST_ADDR</span>=plausible-smtp</span><br><span class="line"><span class="attr">SMTP_HOST_PORT</span>=<span class="number">25</span></span><br></pre></td></tr></table></figure><p>更多配置参考：<a href="https://plausible.io/docs/self-hosting-configuration">https://plausible.io/docs/self-hosting-configuration</a></p></div><div class="tab-pane" id="-2"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">plausible:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plausible/analytics</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.plausible.rule=Host(`plausible.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.plausible.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.plausible.service=plausible</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.plausible.loadbalancer.server.port=8000</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">plausible.env</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GEOLITE2_COUNTRY_DB=/geoip/GeoLite2-Country.mmdb</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">geoip:/geoip:ro</span></span><br><span class="line">  <span class="attr">plausible-init:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plausible/analytics</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">plausible.env</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&#x27;/entrypoint.sh db createdb &amp;&amp; /entrypoint.sh db migrate &amp;&amp; /entrypoint.sh db init-admin&#x27;</span></span><br><span class="line">  <span class="attr">plausible-postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:12-alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=postgres</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres:/var/lib/postgresql/data</span></span><br><span class="line">  <span class="attr">plausible-clickhouse:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yandex/clickhouse-server:21.3</span>    <span class="comment"># 不能高于21.3</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">clickhouse:/var/lib/clickhouse</span></span><br><span class="line">  <span class="attr">plausible-smtp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tianon/exim4</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">  <span class="attr">plausible-geoipupdate:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">maxmindinc/geoipupdate</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GEOIPUPDATE_ACCOUNT_ID=***</span>      <span class="comment"># https://dev.maxmind.com/geoip/geolite2-free-geolocation-data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GEOIPUPDATE_LICENSE_KEY=***</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;GEOIPUPDATE_EDITION_IDS=GeoLite2-ASN GeoLite2-City GeoLite2-Country&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GEOIPUPDATE_FREQUENCY=7</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">geoip:/usr/share/GeoIP</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">  <span class="attr">clickhouse:</span></span><br><span class="line">  <span class="attr">geoip:</span></span><br></pre></td></tr></table></figure></div></div></div><ol><li><p>start smtp &amp; postgres &amp; clockhouse &amp; geoipupdate</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d plausible-smtp plausible-postgres plausible-clickhouse plausible-geoipupdate</span><br><span class="line">docker-compose <span class="built_in">exec</span> plausible-clickhouse clickhouse-client --query <span class="string">&#x27;CREATE DATABASE IF NOT EXISTS plausible;&#x27;</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> plausible-clickhouse clickhouse-client --query <span class="string">&#x27;SHOW DATABASES;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>plausible init</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up plausible-init</span><br></pre></td></tr></table></figure></li><li><p>run plausible</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d plausible</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> plausible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tag Plugins</title>
      <link href="/2021/06/17/hexo-tag-plugins/"/>
      <url>/2021/06/17/hexo-tag-plugins/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-Tag-Plugins"><a href="#Hexo-Tag-Plugins" class="headerlink" title="Hexo Tag Plugins"></a>Hexo Tag Plugins</h2><ul><li><a href="https://hexo.io/docs/tag-plugins#Block-Quote">Block Quote</a></li><li><a href="https://hexo.io/docs/tag-plugins#Code-Block">Code Block</a></li><li><a href="https://hexo.io/docs/tag-plugins#Backtick-Code-Block">Backtick Code Block</a></li><li><a href="https://hexo.io/docs/tag-plugins#Pull-Quote">Pull Quote</a></li><li><a href="https://hexo.io/docs/tag-plugins#jsFiddle">jsFiddle</a></li><li><a href="https://hexo.io/docs/tag-plugins#Gist">Gist</a></li><li><a href="https://hexo.io/docs/tag-plugins#iframe">iframe</a></li><li><a href="https://hexo.io/docs/tag-plugins#Image">Image</a></li><li><a href="https://hexo.io/docs/tag-plugins#Link">Link</a></li><li><a href="https://hexo.io/docs/tag-plugins#Include-Code">Include Code</a></li><li><a href="https://hexo.io/docs/tag-plugins#YouTube">YouTube</a></li><li><a href="https://hexo.io/docs/tag-plugins#Vimeo">Vimeo</a></li><li><a href="https://hexo.io/docs/tag-plugins#Include-Posts">Include Posts</a></li><li><a href="https://hexo.io/docs/tag-plugins#Include-Assets">Include Assets</a></li><li><a href="https://hexo.io/docs/tag-plugins#Embed-image">Embed image</a></li><li><a href="https://hexo.io/docs/tag-plugins#Raw">Raw</a></li><li><a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">Post Excerpt</a></li></ul><span id="more"></span><h2 id="NexT-Tag-Plugins"><a href="#NexT-Tag-Plugins" class="headerlink" title="NexT Tag Plugins"></a>NexT Tag Plugins</h2><ul><li><a href="https://theme-next.js.org/docs/tag-plugins/button.html">Button</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/caniuse.html">Caniuse</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/#Centered-Quote">Centered Quote</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/group-pictures.html">Group Pictures</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/label.html">Label</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/link-grid.html">Link Grid</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/mermaid.html">Mermaid</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/note.html">Note</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/pdf.html">PDF</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/tabs.html">Tabs</a></li><li><a href="https://theme-next.js.org/docs/tag-plugins/#Video">Video</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker搭建Verdaccio服务</title>
      <link href="/2021/06/17/docker-verdaccio-2/"/>
      <url>/2021/06/17/docker-verdaccio-2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://verdaccio.org/">Verdaccio</a>是一个 Node.js创建的轻量的私有<code>npm proxy registry</code>。</p><h2 id="Run-Server"><a href="#Run-Server" class="headerlink" title="Run Server"></a>Run Server</h2><h3 id="Run-server-with-local-storage"><a href="#Run-server-with-local-storage" class="headerlink" title="Run server with local storage"></a>Run server with local storage</h3><p><code>docker-compose.yaml</code>文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">verdaccio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">verdaccio/verdaccio</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.verdaccio.rule=Host(`verdaccio.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.verdaccio.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.verdaccio.service=verdaccio</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.verdaccio.loadbalancer.server.port=4873</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">storage:/verdaccio/storage</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br></pre></td></tr></table></figure><p>最后，使用下面命令启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="Run-server-with-s3-minio"><a href="#Run-server-with-s3-minio" class="headerlink" title="Run server with s3 (minio)"></a>Run server with s3 (minio)</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">Dockerfile</a></li><li class="tab"><a href="#-2">config.yaml</a></li><li class="tab"><a href="#-3">docker-compose.yaml</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> verdaccio/verdaccio</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">ENV</span> NODE_ENV=production</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm <span class="built_in">set</span> registry https://registry.npm.taobao.org/ \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install -g verdaccio-aws-s3-storage \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ln -s /usr/<span class="built_in">local</span>/lib/node_modules/verdaccio-aws-s3-storage /verdaccio/plugins/verdaccio-aws-s3-storage</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> config.yaml /verdaccio/conf/config.yaml</span></span><br><span class="line"><span class="keyword">USER</span> verdaccio</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="-2"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is the config file used for the docker images.</span></span><br><span class="line"><span class="comment"># It allows all users to do anything, so don&#x27;t use it on production systems.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Do not configure host and port under `listen` in this file</span></span><br><span class="line"><span class="comment"># as it will be ignored when using docker.</span></span><br><span class="line"><span class="comment"># see https://verdaccio.org/docs/en/docker#docker-and-custom-port-configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Look here for more config file examples:</span></span><br><span class="line"><span class="comment"># https://github.com/verdaccio/verdaccio/tree/master/conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># path to a directory with all packages</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">/verdaccio/storage/data</span></span><br><span class="line"><span class="comment"># path to a directory with plugins to include</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">/verdaccio/plugins</span></span><br><span class="line"></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="comment"># WebUI is enabled as default, if you want disable it, just uncomment this line</span></span><br><span class="line">  <span class="comment">#enable: false</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Verdaccio</span></span><br><span class="line">  <span class="comment"># comment out to disable gravatar support</span></span><br><span class="line">  <span class="attr">gravatar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># by default packages are ordercer ascendant (asc|desc)</span></span><br><span class="line">  <span class="comment"># sort_packages: asc</span></span><br><span class="line">  <span class="comment"># darkMode: true</span></span><br><span class="line">  <span class="comment"># logo: http://somedomain/somelogo.png</span></span><br><span class="line">  <span class="comment"># favicon: http://somedomain/favicon.ico | /path/favicon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># translate your registry, api i18n not available yet</span></span><br><span class="line"><span class="comment"># i18n:</span></span><br><span class="line"><span class="comment"># list of the available translations https://github.com/verdaccio/ui/tree/master/i18n/translations</span></span><br><span class="line"><span class="comment">#   web: en-US</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">htpasswd:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">/verdaccio/storage/htpasswd</span></span><br><span class="line">    <span class="comment"># Maximum amount of users allowed to register, defaults to &quot;+infinity&quot;.</span></span><br><span class="line">    <span class="comment"># You can set this to -1 to disable registration.</span></span><br><span class="line">    <span class="comment"># max_users: 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a list of other known repositories we can talk to</span></span><br><span class="line"><span class="attr">uplinks:</span></span><br><span class="line">  <span class="attr">npmjs:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="string">&#x27;@*/*&#x27;</span><span class="string">:</span></span><br><span class="line">    <span class="comment"># scoped packages</span></span><br><span class="line">    <span class="attr">access:</span> <span class="string">$all</span></span><br><span class="line">    <span class="attr">publish:</span> <span class="string">$authenticated</span></span><br><span class="line">    <span class="attr">unpublish:</span> <span class="string">$authenticated</span></span><br><span class="line">    <span class="attr">proxy:</span> <span class="string">npmjs</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;**&#x27;</span><span class="string">:</span></span><br><span class="line">    <span class="attr">proxy:</span> <span class="string">npmjs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can specify HTTP/1.1 server keep alive timeout in seconds for incoming connections.</span></span><br><span class="line"><span class="comment"># A value of 0 makes the http server behave similarly to Node.js versions prior to 8.0.0, which did not have a keep-alive timeout.</span></span><br><span class="line"><span class="comment"># WORKAROUND: Through given configuration you can workaround following issue https://github.com/verdaccio/verdaccio/issues/301. Set to 0 in case 60 is not enough.</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">keepAliveTimeout:</span> <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="attr">middlewares:</span></span><br><span class="line">  <span class="attr">audit:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log settings</span></span><br><span class="line"><span class="attr">logs:</span> &#123; <span class="attr">type:</span> <span class="string">stdout</span>, <span class="attr">format:</span> <span class="string">pretty</span>, <span class="attr">level:</span> <span class="string">http</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#experiments:</span></span><br><span class="line"><span class="comment">#  # support for npm token command</span></span><br><span class="line"><span class="comment">#  token: false</span></span><br><span class="line"><span class="comment">#  # enable tarball URL redirect for hosting tarball with a different server, the tarball_url_redirect can be a template string</span></span><br><span class="line"><span class="comment">#  tarball_url_redirect: &#x27;https://mycdn.com/verdaccio/$&#123;packageName&#125;/$&#123;filename&#125;&#x27;</span></span><br><span class="line"><span class="comment">#  # the tarball_url_redirect can be a function, takes packageName and filename and returns the url, when working with a js configuration file</span></span><br><span class="line"><span class="comment">#  tarball_url_redirect(packageName, filename) &#123;</span></span><br><span class="line"><span class="comment">#    const signedUrl = // generate a signed url</span></span><br><span class="line"><span class="comment">#    return signedUrl;</span></span><br><span class="line"><span class="comment">#  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This affect the web and api (not developed yet)</span></span><br><span class="line"><span class="comment">#i18n:</span></span><br><span class="line"><span class="comment">#web: en-US</span></span><br><span class="line"></span><br><span class="line"><span class="attr">store:</span></span><br><span class="line">  <span class="attr">aws-s3-storage:</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">verdaccio</span></span><br><span class="line">    <span class="comment"># keyPrefix: some-prefix # optional, has the effect of nesting all files in a subdirectory</span></span><br><span class="line">    <span class="comment"># region: us-west-2 # optional, will use aws s3&#x27;s default behavior if not specified</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">https://minio.yourdomain.com</span> <span class="comment"># optional, will use aws s3&#x27;s default behavior if not specified</span></span><br><span class="line">    <span class="attr">s3ForcePathStyle:</span> <span class="literal">true</span> <span class="comment"># optional, will use path style URLs for S3 objects</span></span><br><span class="line">    <span class="attr">tarballACL:</span> <span class="string">private</span> <span class="comment"># optional, use public-read to work with CDN like Amazon CloudFront</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">pEPnuTGrb7fKm7bdFEcydE85ZXNrzKr4</span> <span class="comment"># optional, aws accessKeyId for private S3 bucket</span></span><br><span class="line">    <span class="attr">secretAccessKey:</span> <span class="string">k5K8RVMpBeRDtiTxEvWk9oFWTySYYwwP</span> <span class="comment"># optional, aws secretAccessKey for private S3 bucket</span></span><br><span class="line">    <span class="comment"># sessionToken: your-session-token # optional, aws sessionToken for private S3 bucket</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="-3"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">verdaccio:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">verdaccio</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.verdaccio.rule=Host(`verdaccio.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.verdaccio.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.verdaccio.service=verdaccio</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.verdaccio.loadbalancer.server.port=4873</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">storage:/verdaccio/storage</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.minio.rule=Host(`minio.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.minio.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.minio.service=minio</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.minio.loadbalancer.server.port=9000</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_USER=pEPnuTGrb7fKm7bdFEcydE85ZXNrzKr4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_PASSWORD=k5K8RVMpBeRDtiTxEvWk9oFWTySYYwwP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio-data:/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">  <span class="attr">minio-data:</span></span><br></pre></td></tr></table></figure></div></div></div><p>最后，使用下面命令启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm设置源</span></span><br><span class="line">npm <span class="built_in">set</span> registry https://verdaccio.yourdomain.com/</span><br><span class="line"><span class="comment"># 注册账号</span></span><br><span class="line">npm adduser --registry https://verdaccio.yourdomain.com/</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">npm profile <span class="built_in">set</span> password --registry https://verdaccio.yourdomain.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆</span></span><br><span class="line">npm login --registry https://verdaccio.yourdomain.com/</span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">npm publish --registry https://verdaccio.yourdomain.com/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> npm </tag>
            
            <tag> verdaccio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k6</title>
      <link href="/2021/06/08/k6/"/>
      <url>/2021/06/08/k6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://k6.io/">k6</a>是一款高性能的负载测试工具，旨在在预生产和QA环境中以高负载运行测试，可使用JavaScript编写脚本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;k6/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sleep, check &#125; <span class="keyword">from</span> <span class="string">&#x27;k6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> resp = http.get(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>);</span><br><span class="line">  check(resp, &#123;</span><br><span class="line">      <span class="string">&#x27;status is 200&#x27;</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.status === <span class="number">200</span>,</span><br><span class="line">      <span class="string">&#x27;less than 100ms&#x27;</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.status === <span class="number">200</span> &amp;&amp; r.timings.duration &lt;= <span class="number">100</span>,</span><br><span class="line">      <span class="string">&#x27;less than 500ms&#x27;</span>: <span class="function">(<span class="params">r</span>) =&gt;</span> r.status === <span class="number">200</span> &amp;&amp; r.timings.duration &lt;= <span class="number">500</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -i loadimpact/k6 run --vus 100 --duration 300s - &lt; script.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> k6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios</title>
      <link href="/2021/06/04/axios/"/>
      <url>/2021/06/04/axios/</url>
      
        <content type="html"><![CDATA[<p><a href="https://axios-http.com/">Axios</a>是一个基于<code>promise</code>的网络请求库，可以用于浏览器和<code>node.js</code>。<a href="https://axios-http.com/">Axios</a>使用简单，包尺寸小且提供了易于扩展的接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line">axios.get(<span class="string">&#x27;/users&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>从浏览器创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF</li></ul><span id="more"></span><h2 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a>简单封装</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosInstance, AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/no-explicit-any</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> Constructor&lt;T = <span class="built_in">any</span>&gt; = <span class="keyword">new</span> (...args: <span class="built_in">any</span>[]) =&gt; T</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> AxiosOptions = &#123;</span><br><span class="line">  <span class="attr">config</span>: AxiosRequestConfig;</span><br><span class="line">  interceptors?: &#123;</span><br><span class="line">    request?: (<span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> AxiosRequestConfig)[];</span><br><span class="line">    response?: (<span class="function">(<span class="params">resp: AxiosResponse</span>) =&gt;</span> AxiosResponse)[];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Agents = (target: Constructor): <span class="function"><span class="params">Constructor</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">target</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">      <span class="keyword">const</span> instances = <span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;axios:instances&#x27;</span>, <span class="built_in">this</span>) <span class="keyword">as</span> <span class="built_in">string</span>[] || [];</span><br><span class="line">      instances.forEach(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> options = <span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;axios:options&#x27;</span>, <span class="built_in">this</span>, name) <span class="keyword">as</span> AxiosOptions;</span><br><span class="line">        <span class="keyword">const</span> instance = axios.create(options.config);</span><br><span class="line">        <span class="keyword">if</span> (options.interceptors?.request) &#123;</span><br><span class="line">          options.interceptors.request.forEach(<span class="function"><span class="params">c</span> =&gt;</span> instance.interceptors.request.use(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.interceptors?.response) &#123;</span><br><span class="line">          options.interceptors.response.forEach(<span class="function"><span class="params">c</span> =&gt;</span> instance.interceptors.response.use(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, name, &#123; <span class="attr">value</span>: instance &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Agent = (options: AxiosOptions): <span class="function"><span class="params">PropertyDecorator</span> =&gt;</span> <span class="function">(<span class="params">target, propertyKey</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> instances = <span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;axios:instances&#x27;</span>, target) <span class="keyword">as</span> <span class="built_in">string</span>[] || [];</span><br><span class="line">  instances.push(propertyKey <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line">  <span class="built_in">Reflect</span>.defineMetadata(<span class="string">&#x27;axios:instances&#x27;</span>, instances, target);</span><br><span class="line">  <span class="built_in">Reflect</span>.defineMetadata(<span class="string">&#x27;axios:options&#x27;</span>, options, target, propertyKey);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="meta">@Agents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AxiosAgents</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Agent</span>(&#123;</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.google.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">public</span> google!: AxiosInstance;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Agent</span>(&#123;</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.baidu.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">public</span> baidu!: AxiosInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> AxiosAgents();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Quasar入门</title>
      <link href="/2021/05/30/quasar/"/>
      <url>/2021/05/30/quasar/</url>
      
        <content type="html"><![CDATA[<ul><li>基于Vue.js</li><li>开箱即用的提供给网站和应用程序的最先进的UI（遵循《Material指南》）</li><li>开箱即用的对桌面和移动浏览器（包括iOS Safari！）的最佳支持</li><li>通过与我们自己的CLI紧密集成，对每种构建模式（SPA、SSR、PWA、移动应用程序、桌面应用程序和浏览器扩展）提供了一流的支持，并提供了最佳的开发人员体验</li><li>易于自定义（CSS）和可扩展（JS）</li><li>这是最注重性能的框架</li><li>自动tree shaking</li><li>在我们的论坛和Discord聊天基础上的很棒的社区</li><li>具有包括新功能在内的定期发布周期</li><li>获得快速修复并听取社区的要求</li><li>处理整个开发经验（甚至包括创建应用程序的图标和启动画面）</li></ul><p><a href="https://quasar.dev/">Quasar</a>是基于Vue的第一解决方案，无论您是仅构建桌面网站、桌面应用还是移动应用，或者所有这些。</p><span id="more"></span><p>使用<code>Quasar CLI</code>可以无缝的构建以下应用：</p><ul><li>SPAs (单页应用)</li><li>SSR (服务器端渲染的应用) (+可选的PWA客户端接管)</li><li>PWA（渐进式网页应用）</li><li>BEX (浏览器扩展)</li><li>通过Cordova或Capacitor构建移动APP（Android、iOS…）</li><li>多平台桌面应用（使用Electron）</li></ul><h2 id="Quasar-CLI"><a href="#Quasar-CLI" class="headerlink" title="Quasar CLI"></a>Quasar CLI</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @quasar/cli</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">npm install -g @quasar/cli</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quasar create &lt;project_name&gt;</span><br></pre></td></tr></table></figure><p><video controls autoplay src="/images/quasar.mp4" style="max-width: 90%;"></video></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>这是安装了所有模式的项目的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── public/                  # 纯静态资源（直接复制）</span><br><span class="line">├── src/</span><br><span class="line">│   ├── assets/              # 动态资源（由webpack处理）</span><br><span class="line">│   ├── components/          # 用于页面和布局的.vue组件</span><br><span class="line">│   ├── css/                 # CSS/Stylus/Sass/...文件</span><br><span class="line">|   |   ├── app.styl</span><br><span class="line">|   │   └── quasar.variables.styl # 供您调整的Quasar Stylus变量</span><br><span class="line">│   ├── layouts/             # 布局 .vue 文件</span><br><span class="line">│   ├── pages/               # 页面 .vue 文件</span><br><span class="line">│   ├── boot/                # 启动文件 (应用初始化代码)</span><br><span class="line">│   ├── router/              # Vue路由</span><br><span class="line">|   |   ├── index.js         # Vue路由定义</span><br><span class="line">|   │   └── routes.js        # App路由定义</span><br><span class="line">│   ├── store/               # Vuex Store</span><br><span class="line">|   |   ├── index.js         # Vuex Store 定义</span><br><span class="line">|   │   ├── &lt;folder&gt;         # Vuex Store 模块...</span><br><span class="line">|   │   └── &lt;folder&gt;         # Vuex Store 模块...</span><br><span class="line">│   ├── App.vue              # APP的根Vue组件</span><br><span class="line">│   └── index.template.html  # index.html模板</span><br><span class="line">├── src-ssr/                 # SSR特定代码(就像生产环境的Node网页服务器)</span><br><span class="line">├── src-pwa/                 # PWA特定代码（如Service Worker）</span><br><span class="line">├── src-cordova/             # Cordova生成的文件夹用于创建移动APP</span><br><span class="line">├── src-electron/            # Electron特定代码（如&quot;main&quot;线程)</span><br><span class="line">├── src-bex/                 # BEX（浏览器扩展）特定代码（如&quot;main&quot;线程)</span><br><span class="line">├── dist/                    # 生产版本代码，用于部署</span><br><span class="line">│   ├── spa/                 # 构建SPA的例子</span><br><span class="line">│   ├── ssr/                 # 构建SSR的例子</span><br><span class="line">│   ├── electron/            # 构建Electron的例子</span><br><span class="line">│   └── ....</span><br><span class="line">├── quasar.conf.js           # Quasar App配置文件</span><br><span class="line">├── babel.config.js          # Babeljs配置</span><br><span class="line">├── .editorconfig            # editor配置</span><br><span class="line">├── .eslintignore            # ESlint忽略路径</span><br><span class="line">├── .eslintrc.js             # ESlint配置</span><br><span class="line">├── .postcssrc.js            # PostCSS配置</span><br><span class="line">├── .stylintrc               # Stylus lint配置</span><br><span class="line">├── .gitignore               # GIT忽略路径</span><br><span class="line">├── package.json             # npm脚本和依赖项</span><br><span class="line">└── README.md                # 您的网站/应用程序的自述文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vuejs </tag>
            
            <tag> nodejs </tag>
            
            <tag> quasar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alfred Workflows</title>
      <link href="/2021/05/23/alfred-workflows/"/>
      <url>/2021/05/23/alfred-workflows/</url>
      
        <content type="html"><![CDATA[<h2 id="Alfred-Workflows"><a href="#Alfred-Workflows" class="headerlink" title="Alfred Workflows"></a>Alfred Workflows</h2><ul><li><a href="https://github.com/xudaolong/CodeVar">CodeVar</a></li><li><a href="https://github.com/mwaterfall/alfred-datetime-format-converter">Datetime Format Converter</a></li><li><a href="https://github.com/willfarrell/alfred-encode-decode-workflow">Encode / Decode</a></li><li><a href="https://github.com/deanishe/alfred-fakeum">Fakeum</a></li><li><a href="https://github.com/willfarrell/alfred-hash-workflow">Hash</a></li><li><a href="https://github.com/bskim45/alfred-helm-hub">Helm</a></li><li><a href="https://github.com/willfarrell/alfred-pkgman-workflow">Package Managers</a></li><li><a href="https://github.com/deanishe/alfred-pwgen">Password Generator</a></li><li><a href="https://github.com/deanishe/alfred-stackexchange">StackExchange Search</a></li><li><a href="https://github.com/jason0x43/alfred-weather">Weather</a></li></ul><h2 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h2><ul><li><a href="https://github.com/deanishe/alfred-workflow">Alfred-Workflow</a>: Write workflows in Python</li><li><a href="https://github.com/sindresorhus/alfy">Alfy</a>: Write workflows in Node.js</li><li><a href="https://github.com/deanishe/awgo">AwGo</a>: Write workflows in Go</li></ul><h2 id="Related"><a href="#Related" class="headerlink" title="Related"></a>Related</h2><ul><li><a href="https://pacmax.org/">Pacmax</a></li><li><a href="https://www.packal.org/">Packal</a></li><li><a href="https://alfredworkflow.com/">AlfredWorkflow.com</a></li><li><a href="https://github.com/zenorocha/alfred-workflows">zenorocha/alfred-workflows</a></li><li><a href="https://github.com/learn-anything/alfred-workflows">learn-anything/alfred-workflows</a></li><li><a href="https://github.com/alfred-workflows/awesome-alfred-workflows">alfred-workflows/awesome-alfred-workflows</a></li><li><a href="https://github.com/vitorgalvao/alfred-workflows">vitorgalvao/alfred-workflows</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> alfred </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Wikijs系统</title>
      <link href="/2021/05/19/docker-wikijs/"/>
      <url>/2021/05/19/docker-wikijs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://js.wiki/">Wikijs</a>是一款开源的基于nodejs的轻量级wiki系统。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wiki:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">requarks/wiki</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.wiki.rule=Host(`wiki.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.wiki.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.wiki.service=wiki</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.wiki.loadbalancer.server.port=3000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_TYPE=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PORT=5432</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_USER=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PASS=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=wiki</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">content:/wiki/data/content</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">content:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> wikijs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Matomo系统</title>
      <link href="/2021/05/19/docker-matomo/"/>
      <url>/2021/05/19/docker-matomo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://matomo.org/">Matomo</a>（之前叫Piwik），是一款开源的网站流量统计系统。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">matomo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">matomo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.matomo.rule=Host(`matomo.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.matomo.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.matomo.service=matomo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.matomo.loadbalancer.server.port=80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MATOMO_DATABASE_HOST=matomo-db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MATOMO_DATABASE_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MATOMO_DATABASE_PASSWORD=E315AECBADFF41E38C57EEFD9E03FCBC</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MATOMO_DATABASE_DBNAME=matomo</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">html:/var/www/html</span></span><br><span class="line">  <span class="attr">matomo-db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=E315AECBADFF41E38C57EEFD9E03FCBC</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">html:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> matomo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流算法</title>
      <link href="/2021/05/14/limiting-algorithm/"/>
      <url>/2021/05/14/limiting-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="限流简介"><a href="#限流简介" class="headerlink" title="限流简介"></a>限流简介</h2><p>在不同场景下限流的定义也各不相同，可以是每秒请求数、每秒事务处理数、网络流量。</p><p>通常我们所说的限流指的是限制到达系统并发请求数，使得系统能够正常的处理部分用户的请求，来保证系统的稳定性。</p><h3 id="为什么限流"><a href="#为什么限流" class="headerlink" title="为什么限流"></a>为什么限流</h3><p>接口无法控制调用方的行为。热点业务突发请求、恶意请求攻击等会带来瞬时的请求量激增，导致服务占用大量的CPU、内存等资源，使得其他正常的请求变慢或超时，甚至引起服务器宕机。</p><p>按照请求次数进行收费的接口需要根据客户支付的金额来限制客户可用的次数。</p><h3 id="限流的行为"><a href="#限流的行为" class="headerlink" title="限流的行为"></a>限流的行为</h3><p>限流的行为指的就是在接口的请求数达到限流的条件时要触发的操作，一般可进行以下行为。</p><ul><li>拒绝服务：把多出来的请求拒绝掉</li><li>服务降级：关闭或是把后端服务做降级处理，这样可以让服务有足够的资源来处理更多的请求</li><li>特权请求：资源不够了，我只能把有限的资源分给重要的用户</li><li>延时处理：一般会有一个队列来缓冲大量的请求，这个队列如果满了，那么就只能拒绝用户了，如果这个队列中的任务超时了，也要返回系统繁忙的错误了</li><li>弹性伸缩：用自动化运维的方式对相应的服务做自动化的伸缩</li></ul><span id="more"></span><h2 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h2><h3 id="固定窗口计数器"><a href="#固定窗口计数器" class="headerlink" title="固定窗口计数器"></a>固定窗口计数器</h3><p>将时间按照设定的周期划分为多个窗口在当前时间窗口内每来一次请求就将计数器加一如果计数器超过了限制数量，则拒绝服务当时间到达下一个窗口时，计数器的值重置。</p><h3 id="滑动窗口计数器"><a href="#滑动窗口计数器" class="headerlink" title="滑动窗口计数器"></a>滑动窗口计数器</h3><p>将设定的时间周期设为滑动窗口的大小，记录每次请求的时刻当有新的请求到来时将窗口滑到该请求来临的时刻判断窗口内的请求数是否超过了限制，超过限制则拒绝服务，否则请求通过丢弃滑动窗口以外的请求。</p><h3 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h3><p>将进来的请求流量视为水滴先放入桶内水从桶的底部以固定的速率匀速流出，相当于在匀速处理请求当漏桶内的水满时(超过了限流阈值)则拒绝服务。</p><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><p>按照一定的速率生产令牌并放入令牌桶中如果桶中令牌已满，则丢弃令牌请求过来时先到桶中拿令牌，拿到令牌则放行通过，否则拒绝请求。</p><p>这种算法能够把请求均匀的分配在时间区间内，又能接受服务可承受范围内的突发请求。所以令牌桶算法在业内使用也非常广泛。</p>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Portainer系统</title>
      <link href="/2021/05/11/docker-portainer/"/>
      <url>/2021/05/11/docker-portainer/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.portainer.io/">Portainer</a>是一个轻量级的docker环境管理UI，可以用来管理docker宿主机和docker swarm集群。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer-ce</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.portainer.rule=Host(`portainer.local.hypc.host`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.portainer.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.portainer.service=portainer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.portainer.loadbalancer.server.port=9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">  <span class="attr">portainer-agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/agent</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/docker/volumes:/var/lib/docker/volumes</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> portainer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Reflect Metadata</title>
      <link href="/2021/04/29/typescript-metadata/"/>
      <url>/2021/04/29/typescript-metadata/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Reflect Metadata 是 ES7 的一个提案，它主要用来在声明的时候添加和读取元数据。TypeScript 在 1.5+ 的版本已经支持它，你只需要：</p><ul><li><code>npm i reflect-metadata --save</code>。</li><li>在 <code>tsconfig.json</code> 里配置 <code>emitDecoratorMetadata</code> 选项。</li></ul><p>Reflect Metadata 的 API 可以用于类或者类的属性上，如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">metadata</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  metadataKey: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  metadataValue: <span class="built_in">any</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>): </span>&#123;</span><br><span class="line">  (target: <span class="built_in">Function</span>): <span class="built_in">void</span>;</span><br><span class="line">  (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | symbol): <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>Reflect.metadata</code> 当作 <code>Decorator</code> 使用，当修饰类时，在类上添加元数据，当修饰类属性时，在类原型的属性上添加元数据，如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reflect</span>.metadata(<span class="string">&#x27;inClass&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Reflect</span>.metadata(<span class="string">&#x27;inMethod&#x27;</span>, <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">  <span class="keyword">public</span> hello(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;inClass&#x27;</span>, Test)); <span class="comment">// &#x27;A&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;inMethod&#x27;</span>, <span class="keyword">new</span> Test(), <span class="string">&#x27;hello&#x27;</span>)); <span class="comment">// &#x27;B&#x27;</span></span><br></pre></td></tr></table></figure><p>它具有诸多使用场景。</p><h2 id="获取类型信息"><a href="#获取类型信息" class="headerlink" title="获取类型信息"></a>获取类型信息</h2><p>譬如在 <a href="https://github.com/kaorun343/vue-property-decorator"><code>vue-property-decorator</code></a> 6.1 及其以下版本中，通过使用 <code>Reflect.getMetadata</code> API，<code>Prop</code> Decorator 能获取属性类型传至 Vue，简要代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Prop</span>(<span class="params"></span>): <span class="title">PropertyDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target, key: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">type</span> = <span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;design:type&#x27;</span>, target, key);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> type: <span class="subst">$&#123;<span class="keyword">type</span>.name&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// other...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Prop</span>()</span><br><span class="line">  <span class="keyword">public</span> Aprop!: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码可在控制台看到 <code>Aprop type: string</code>。除能获取属性类型外，通过 <code>Reflect.getMetadata(&quot;design:paramtypes&quot;, target, key)</code> 和 <code>Reflect.getMetadata(&quot;design:returntype&quot;, target, key)</code> 可以分别获取函数参数类型和返回值类型。</p><h2 id="自定义-metadataKey"><a href="#自定义-metadataKey" class="headerlink" title="自定义 metadataKey"></a>自定义 <code>metadataKey</code></h2><p>除能获取类型信息外，常用于自定义 <code>metadataKey</code>，并在合适的时机获取它的值，示例如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>(<span class="params"></span>): <span class="title">ClassDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">target</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在类上定义元数据，key 为 `classMetaData`，value 为 `a`</span></span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(<span class="string">&#x27;classMetaData&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, target);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">methodDecorator</span>(<span class="params"></span>): <span class="title">MethodDecorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target, key, descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在类的原型属性 &#x27;someMethod&#x27; 上定义元数据，key 为 `methodMetaData`，value 为 `b`</span></span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(<span class="string">&#x27;methodMetaData&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, target, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@classDecorator</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">  <span class="meta">@methodDecorator</span>()</span><br><span class="line">  <span class="function"><span class="title">someMethod</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;classMetaData&#x27;</span>, SomeClass); <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;methodMetaData&#x27;</span>, <span class="keyword">new</span> SomeClass(), <span class="string">&#x27;someMethod&#x27;</span>); <span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="控制反转和依赖注入"><a href="#控制反转和依赖注入" class="headerlink" title="控制反转和依赖注入"></a>控制反转和依赖注入</h3><p>在 Angular 2+ 的版本中，<a href="https://segmentfault.com/a/1190000008626680">控制反转与依赖注入</a>便是基于此实现，现在，我们来实现一个简单版：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Constructor&lt;T = <span class="built_in">any</span>&gt; = <span class="keyword">new</span> (...args: <span class="built_in">any</span>[]) =&gt; T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Injectable = (): <span class="function"><span class="params">ClassDecorator</span> =&gt;</span> <span class="function"><span class="params">target</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherService</span> </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="keyword">readonly</span> otherService: OtherService</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">testMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.otherService.a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Factory = &lt;T&gt;(target: Constructor&lt;T&gt;): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取所有注入的服务</span></span><br><span class="line">  <span class="keyword">const</span> providers = <span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;design:paramtypes&#x27;</span>, target); <span class="comment">// [OtherService]</span></span><br><span class="line">  <span class="keyword">const</span> args = providers.map(<span class="function">(<span class="params">provider: Constructor</span>) =&gt;</span> <span class="keyword">new</span> provider());</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> target(...args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Factory(TestService).testMethod(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="Controller-与-Get-的实现"><a href="#Controller-与-Get-的实现" class="headerlink" title="Controller 与 Get 的实现"></a>Controller 与 Get 的实现</h3><p>如果你在使用 TypeScript 开发 Node 应用，相信你对 <code>Controller</code>、<code>Get</code>、<code>POST</code> 这些 Decorator，并不陌生：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;/test&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;/a&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="title">someGetMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;/b&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="title">somePostMethod</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些 Decorator 也是基于 <code>Reflect Metadata</code> 实现，这次，我们将 <code>metadataKey</code> 定义在 <code>descriptor</code> 的 <code>value</code> 上：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> METHOD_METADATA = <span class="string">&#x27;method&#x27;</span>；</span><br><span class="line"><span class="keyword">const</span> PATH_METADATA = <span class="string">&#x27;path&#x27;</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Controller = (path: <span class="built_in">string</span>): <span class="function"><span class="params">ClassDecorator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">target</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(PATH_METADATA, path, target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createMappingDecorator = <span class="function">(<span class="params">method: <span class="built_in">string</span></span>) =&gt;</span> (path: <span class="built_in">string</span>): <span class="function"><span class="params">MethodDecorator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target, key, descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(PATH_METADATA, path, descriptor.value);</span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(METHOD_METADATA, method, descriptor.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Get = createMappingDecorator(<span class="string">&#x27;GET&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Post = createMappingDecorator(<span class="string">&#x27;POST&#x27;</span>);</span><br></pre></td></tr></table></figure><p>接着，创建一个函数，映射出 <code>route</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapRoute</span>(<span class="params">instance: <span class="built_in">Object</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prototype = <span class="built_in">Object</span>.getPrototypeOf(instance);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 筛选出类的 methodName</span></span><br><span class="line">  <span class="keyword">const</span> methodsNames = <span class="built_in">Object</span>.getOwnPropertyNames(prototype)</span><br><span class="line">                              .filter(<span class="function"><span class="params">item</span> =&gt;</span> !isConstructor(item) &amp;&amp; isFunction(prototype[item]))；</span><br><span class="line">  <span class="keyword">return</span> methodsNames.map(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = prototype[methodName];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出定义的 metadata</span></span><br><span class="line">    <span class="keyword">const</span> route = <span class="built_in">Reflect</span>.getMetadata(PATH_METADATA, fn);</span><br><span class="line">    <span class="keyword">const</span> method = <span class="built_in">Reflect</span>.getMetadata(METHOD_METADATA, fn)；</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      route,</span><br><span class="line">      method,</span><br><span class="line">      fn,</span><br><span class="line">      methodName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因此，我们可以得到一些有用的信息：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.getMetadata(PATH_METADATA, SomeClass); <span class="comment">// &#x27;/test&#x27;</span></span><br><span class="line"></span><br><span class="line">mapRoute(<span class="keyword">new</span> SomeClass());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [&#123;</span></span><br><span class="line"><span class="comment"> *    route: &#x27;/a&#x27;,</span></span><br><span class="line"><span class="comment"> *    method: &#x27;GET&#x27;,</span></span><br><span class="line"><span class="comment"> *    fn: someGetMethod() &#123; ... &#125;,</span></span><br><span class="line"><span class="comment"> *    methodName: &#x27;someGetMethod&#x27;</span></span><br><span class="line"><span class="comment"> *  &#125;,&#123;</span></span><br><span class="line"><span class="comment"> *    route: &#x27;/b&#x27;,</span></span><br><span class="line"><span class="comment"> *    method: &#x27;POST&#x27;,</span></span><br><span class="line"><span class="comment"> *    fn: somePostMethod() &#123; ... &#125;,</span></span><br><span class="line"><span class="comment"> *    methodName: &#x27;somePostMethod&#x27;</span></span><br><span class="line"><span class="comment"> * &#125;]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>最后，只需把 <code>route</code> 相关信息绑在 <code>express</code> 或者 <code>koa</code> 上就 ok 了。</p><hr><ul><li>原文：<a href="https://jkchao.github.io/typescript-book-chinese/tips/metadata.html">https://jkchao.github.io/typescript-book-chinese/tips/metadata.html</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么阅读源代码</title>
      <link href="/2021/04/24/how-to-read-the-source-code/"/>
      <url>/2021/04/24/how-to-read-the-source-code/</url>
      
        <content type="html"><![CDATA[<ol><li>先fork一个你想学习的项目，在fork的项目下建立一个学习分支</li><li>了解项目背景，熟悉、理解项目的结构</li><li>找好切入点（解决bug、与其他系统集成、添加功能等）</li><li>开始阅读，并在源代码中添加自己的理解或标记<ul><li>优秀的项目基本上都能做到命名准确，所以大部分变量、函数都能很好的理解其意义以及用法</li><li>一些私有函数、复杂的逻辑可以先跳过，只记住其输入、输出即可，之后可以回过头来细读</li><li>调试代码，尤其是动态语言，你甚至不知道调用的函数是在哪里声明的</li></ul></li><li>你可能还需要一个画图工具，用来绘制流程图、时序图…</li><li>提交你的记录</li></ol><p>最后，我们阅读源码的目的主要是学习别人的设计思想、编码技巧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx的port_in_redirect配置</title>
      <link href="/2021/04/21/nginx-port-in-redirect/"/>
      <url>/2021/04/21/nginx-port-in-redirect/</url>
      
        <content type="html"><![CDATA[<p>当nginx监听的端口与实际访问端口不一致时（如多层反向代理、或nat转发等），这时候通常需要关闭<code>port_in_redirect</code>选项。</p><blockquote><p>port_in_redirect: 默认开启状态。启用或禁用在nginx发出的绝对重定向中指定端口。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /public/ &#123;</span><br><span class="line">        <span class="attribute">root</span>        html;</span><br><span class="line">        <span class="attribute">index</span>       index.html index.htm;</span><br><span class="line">        <span class="attribute">port_in_redirect</span>    <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_buffering</span>     <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】微前端</title>
      <link href="/2021/04/16/micro-frontends/"/>
      <url>/2021/04/16/micro-frontends/</url>
      
        <content type="html"><![CDATA[<p>想做好前端很难，做出可扩展的前端，从而让多个团队可以同时投身于一项复杂的大型产品项目就更难了。本文将介绍前端领域最近的一项变革：单体前端架构正在过渡到许多较小、较易管理的前端架构。我们还会展示这种新的体系结构怎样提升前端团队的效率和表现。除了讨论这种新趋势的好处与代价外，我们还将介绍一些可行的实现方案，并深入分析一个完整的微前端应用案例。</p><p>微服务近年来大受欢迎，许多组织转向了微服务以克服大型单体后端架构的局限。但虽然微服务在服务端很流行，很多企业在前端代码库上仍然在沿用问题多多的单体架构。</p><p>也许你想构建一个渐进式或响应式的 Web 应用，但却找不到一种将这些功能集成进现有代码中的简单途径；也许你想尝试 JavaScript 语言的新功能（或者是其他可以编译为 JS 的某种语言），但你却无法将关键的构建工具融入已有的构建流程；或者你只是想扩展开发流程，让多个团队可以同时开发一种产品，但现有单体架构中的耦合度与复杂性让团队间的合作变得磕磕绊绊。这些都是很现实的问题，都会影响你们向客户交付高质量体验的能力。</p><h2 id="微前端的定义"><a href="#微前端的定义" class="headerlink" title="微前端的定义"></a>微前端的定义</h2><p>最近业界越来越关注复杂的现代化 Web 开发需要怎样的整体架构和组织结构这个问题。于是我们开始看到单体前端正在分解为更小、更简单的模块，这些模块可以各自独立开发、测试和部署，而它们组合在一起仍然对客户表现为一件单一完整的产品。我们将这种技术称为微前端，其定义为：</p><blockquote><p>“微前端是一种架构风格，其中众多独立交付的前端应用组合成一个大型整体。”</p></blockquote><p>在 ThoughtWorks TechRadar 2016 年第 11 期中，我们将微前端列入了“组织应评估的技术”之列；不久后我们将其提升为“可尝试”级别，最后将其列入“应采用”之列。换句话说，我们认为它是经受住了考验的方法，企业在需要时就应该采用它。详情请点击此处<a href="https://www.thoughtworks.com/radar/techniques/micro-frontends">链接</a>。</p><span id="more"></span><p><img src="/images/micro-frontends-1.jpeg"></p><p>我们认为微前端的主要优势有：</p><ul><li>更小，更紧密且更易维护的代码库。</li><li>组织更具扩展能力，其团队更加独立自治。</li><li>能够以更加增量式的风格来升级、更新前端，甚至重写部分前端代码。</li></ul><p>这些核心优势与微服务的优势基本一致，这也不是什么巧合。</p><p>当然，软件架构领域没有免费的午餐——一切都要付出代价。一些微前端实现可能导致重复依赖，使用户不得不下载更多内容。此外，大幅提升的团队自治水平可能会让各个团队的工作愈加分裂。只不过我们认为这些风险都能控制在合理水平上，微前端终究还是利大于弊的。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>我们不会从具体的技术方法或实施细节角度来定义微前端，而是重点关注它的属性和好处。</p><h3 id="增量升级"><a href="#增量升级" class="headerlink" title="增量升级"></a>增量升级</h3><p>对于许多组织来说，追求增量升级就是他们迈向微前端的第一步。对他们来说，老式的大型单体前端要么是用老旧的技术栈打造的，要么就充斥着匆忙写成的代码，已经到了该重写整个前端的时候了。一次性重写整个系统风险很大，我们更倾向一点一点换掉老的应用，同时在不受单体架构拖累的前提下为客户不断提供新功能。</p><p>为了做到这一点，解决方案往往就是微前端架构了。一旦某个团队掌握了在几乎不影响旧世界的同时为生产环境引入新功能的诀窍，其他团队就会纷纷效仿。现有代码仍然需要继续维护下去，但在某些情况下还要继续添加新功能，现在总算有了解决方案。</p><p>到最后，我们就能更随心所欲地改动产品的各个部分，并逐渐升级我们的架构、依赖关系和用户体验。当主框架发生重大变化时每个微前端模块都可以按需升级，不需要整体下线或一次性升级所有内容。如果我们想要尝试新的技术或互动模式，也能在隔离度更好的环境下做试验。</p><h3 id="简洁、解耦的代码库"><a href="#简洁、解耦的代码库" class="headerlink" title="简洁、解耦的代码库"></a>简洁、解耦的代码库</h3><p>微前端体系下，每个小模块的代码库要比一个单体前端的代码库小很多。对开发者来说这些较小的代码库处理起来更简单方便。而且微前端还能避免无关组件之间不必要的耦合，让代码更简洁。我们可以在应用的限界上下文处划出更明显的界限，更好地避免无意间造成的这类耦合问题。</p><p>当然，只靠架构更迭本身（比如说“我们改成微前端吧”）并不能自动为以往的优质代码生成替代品。我们要做的是设法让糟糕的决策难以露头，而让正确的决策畅通无阻，从而进入迈向成功的良性循环。例如，现在很难跨越限界上下文共享域模型，所以开发者就不太可能这样做了。类似地，微前端会让开发者更审慎地把握数据和事件在应用的各个部分之间流动的方式，其实就算没有微前端我们本来也应该这样做的！</p><h3 id="独立部署"><a href="#独立部署" class="headerlink" title="独立部署"></a>独立部署</h3><p>就像微服务一样，微前端的一大优势就是可独立部署的能力。这种能力会缩减每次部署涉及的范围，从而降低了风险。不管你的前端代码是在哪里托管，怎样托管，各个微前端都应该有自己的持续交付管道；这些管道可以将微前端构建、测试并部署到生产环境中。我们在部署各个微前端时几乎不用考虑其他代码库或管道的状态；就算旧的单体架构采用了固定、手动的按季发布周期，或者隔壁的团队在他们的主分支里塞进了一个半成品或失败的功能，也不影响我们的工作。如果某个微前端已准备好投入生产，那么它就能顺利变为产品，且这一过程完全由开发和维护它的团队主导。</p><p><img src="/images/micro-frontends-2.jpeg"></p><h3 id="自治团队"><a href="#自治团队" class="headerlink" title="自治团队"></a>自治团队</h3><p>解藕代码库、分离发布周期还能带来一个高层次的好处，那就是大幅提升团队的独立性；一支独立的团队可以自主完成从产品构思到最终发布的完整流程，有足够的能力独立向客户交付价值，从而可以更快、更高效地工作。为了实现这一目标需要围绕垂直业务功能，而非技术功能来打造团队。一种简单的方法是根据最终用户将看到的内容来划分产品模块，让每个微前端都封装应用的某个页面，并分配给一个团队完整负责。相比围绕技术或“横向”问题（如样式、表单或验证）打造的团队相比，这种团队能有更高的凝聚力。</p><p><img src="/images/micro-frontends-3.jpeg"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>简而言之，微前端是将庞大复杂的整体分割为更小、更易于管理的模块，然后明确它们之间的依赖关系。我们的技术决策、代码库、团队和发布流程都应该彼此独立，无需过多协调工作就能自主运行并发展。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>假设要做一个食品外卖的网站。乍一看这种网站好像很好做，但想要做好需要在诸多细节上下足功夫：</p><ul><li>应该有一个引导页面，让顾客浏览并搜索餐馆。顾客应该能按照一系列参数（包括价格、菜品或订购历史等）来搜索并过滤餐馆。</li><li>每家餐馆都要有自己的页面，页面中要展示菜单，允许客户自主选餐，还要有折扣、套餐和特殊要求选项。</li><li>顾客应该有自己的主页，可以用来查看订单历史、跟踪外卖进度并自定义付款选项</li></ul><p><img src="/images/micro-frontends-4.jpeg"></p><p>每个页面都非常复杂，都应该分配一个专门团队来负责，并且每个团队都应该有足够的独立性。各个团队都应该能独立开发、测试、部署和维护自己的代码，而不会与其他团队发生冲突或需要其他团队配合。但在客户这里，整个网站仍然应该是一个无缝的整体。</p><p>下面我们就会围绕这个案例来展示代码与场景示例。</p><h2 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h2><p>前文对微前端的定义相当松散，所以有很多方法都可以划入这个范畴。本节将展示一些示例并讨论它们的优劣。这些方法在架构上有共通之处——通常应用中的每个页面都有一个微前端，还有一个容器应用，它有以下功能：</p><ul><li>呈现常见的页面元素，如页眉和页脚。</li><li>解决了身份认证和跳转等跨领域问题。</li><li>在页面上集成多个微前端，并告诉各个微前端该何时何地呈现自己。</li></ul><p><img src="/images/micro-frontends-5.jpeg"></p><h3 id="服务器端模板组合"><a href="#服务器端模板组合" class="headerlink" title="服务器端模板组合"></a>服务器端模板组合</h3><p>先来介绍一种非常新颖的前端开发方法——就是在服务器上使用多个模板或片段呈现 HTML。首先我们要有一个 index.html，其中包含所有常见的页面元素；然后使用服务器端包含从 HTML 片段文件中插入的特定页面内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">dir</span>=<span class="string">&quot;ltr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Feed me<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>🍽 Feed me<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--# include file=&quot;$PAGE.html&quot; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们使用 Nginx 提供此文件，通过匹配正在请求的 URL 来配置 <code>$PAGE</code> 变量：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">ssi</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Redirect / to /browse</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/$</span> http://localhost:8080/browse <span class="literal">redirect</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Decide which HTML fragment to insert based on the URL</span></span><br><span class="line">    <span class="attribute">location</span> /browse &#123;</span><br><span class="line">      <span class="attribute">set</span> $PAGE <span class="string">&#x27;browse&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /order &#123;</span><br><span class="line">      <span class="attribute">set</span> $PAGE <span class="string">&#x27;order&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /profile &#123;</span><br><span class="line">      <span class="attribute">set</span> $PAGE <span class="string">&#x27;profile&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># All locations should render through index.html</span></span><br><span class="line">    error_page <span class="number">404</span> /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是相当标准的服务器端组合方法。它之所以可以算作微前端，是因为我们可以由此来分割代码，让每部分代码代表一个自包含的域概念，并由一个独立的团队负责。这里没有展示各个 HTML 片段文件最终如何在 Web 服务器上呈现，实际上它们都有自己的部署管道，改动某个页面并不会影响其他内容。</p><p>想要更高独立性的话，可以为每个微前端单独安排一个服务器负责呈现和服务，再安排一个服务器专门向其他服务器发出请求。如果能缓存好各个响应就不会增大延迟。</p><p><img src="/images/micro-frontends-6.jpeg"></p><h3 id="构建时集成"><a href="#构建时集成" class="headerlink" title="构建时集成"></a>构建时集成</h3><p>还有一种方法是将每个微前端作为一个包来发布，并让容器应用将它们全部作为库依赖包含进去。下面展示了容器的 package.json 查找本文示例应用的方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;@feed-me/container&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;A food delivery web app&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@feed-me/browse-restaurants&quot;</span>: <span class="string">&quot;^1.2.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@feed-me/order-food&quot;</span>: <span class="string">&quot;^4.5.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@feed-me/user-profile&quot;</span>: <span class="string">&quot;^7.8.9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种办法初看上去挺不错。它通常会生成一个可部署的 Javascript 包，允许我们从各种应用中删除常见的重复依赖。但这意味着我们修改产品的任何部分时都必须重新编译和发布所有微前端。这种齐步走的发布流程在微服务里已经够让我们好受了，所以我们强烈建议不要用它来实现微前端架构。我们好不容易在开发和测试阶段实现了解耦和独立，可别再在发布阶段又绕回去了。我们得在运行时中也集成微前端。</p><h3 id="通过iframe在运行时集成"><a href="#通过iframe在运行时集成" class="headerlink" title="通过iframe在运行时集成"></a>通过iframe在运行时集成</h3><p>想要在浏览器中组合应用，一种最简单的方法就是用 iframe。iframe 可以轻松地用一系列独立的子页面构建整个页面。它们的样式和全局变量也能充分隔离，不会互相干扰。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Feed me!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Feed me!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;micro-frontend-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> microFrontendsByRoute = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;https://browse.example.com/index.html&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/order-food&#x27;</span>: <span class="string">&#x27;https://order.example.com/index.html&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/user-profile&#x27;</span>: <span class="string">&#x27;https://profile.example.com/index.html&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;micro-frontend-container&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      iframe.src = microFrontendsByRoute[<span class="built_in">window</span>.location.pathname];</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就像前文提到的服务器端包含方法一样，用 iframe 构建页面并不是一种激动人心的新技术。但只要我们能精心分割好应用并组建好团队，那么用 iframe 就能实现前面提到的一系列好处。</p><p>很多人不喜欢 iframe，它也的确有一些缺陷。上面提到的简单隔离方式确实降低了它的灵活性。用 iframe 在应用的各个部分之间构建集成可能会很困难，从而让路由、历史记录和深层链接变得更加复杂；它还会影响页面的响应速度。</p><h3 id="通过-JavaScript-在运行时集成"><a href="#通过-JavaScript-在运行时集成" class="headerlink" title="通过 JavaScript 在运行时集成"></a>通过 JavaScript 在运行时集成</h3><p>这个方法非常灵活，应用广泛。每个微前端都使用<code>&lt;script&gt;</code>标记包含在页面上，并在加载时暴露全局函数作为其入口点。接下来容器应用决定应该加载哪个微前端，并调用相关函数来告诉微前端该何时何地呈现自己。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Feed me!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Feed me!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- These scripts don&#x27;t render anything immediately --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Instead they attach entry-point functions to `window` --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://browse.example.com/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://order.example.com/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://profile.example.com/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;micro-frontend-root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// These global functions are attached to window by the above scripts</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> microFrontendsByRoute = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/&#x27;</span>: <span class="built_in">window</span>.renderBrowseRestaurants,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/order-food&#x27;</span>: <span class="built_in">window</span>.renderOrderFood,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/user-profile&#x27;</span>: <span class="built_in">window</span>.renderUserProfile,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> renderFunction = microFrontendsByRoute[<span class="built_in">window</span>.location.pathname];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Having determined the entry-point function, we now call it,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// giving it the ID of the element where it should render itself</span></span></span><br><span class="line"><span class="javascript">      renderFunction(<span class="string">&#x27;micro-frontend-root&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面是一个简单的示例，展示了基本的技巧。相比构建时集成，这里我们可以独立部署各个 <code>bundle.js</code> 文件。相比 iframe，我们在构建微前端之间的集成时有充分的灵活度。我们可以用多种方式扩展上述代码，例如按需下载各个 JavaScript 包，或者在呈现微前端时传递出入数据。</p><p>这种方法同时具备灵活性与独立可部署能力，是我们的首选方案。后文将详细探讨这个方法。</p><h3 id="通过-Web-组件在运行时集成"><a href="#通过-Web-组件在运行时集成" class="headerlink" title="通过 Web 组件在运行时集成"></a>通过 Web 组件在运行时集成</h3><p>之前方法的一个变体是为每个微前端定义用于容器实例化的 HTML 自定义元素，而非定义要调用的容器的全局函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Feed me!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Feed me!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- These scripts don&#x27;t render anything immediately --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Instead they each define a custom element type --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://browse.example.com/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://order.example.com/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://profile.example.com/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;micro-frontend-root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// These element types are defined by the above scripts</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> webComponentsByRoute = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;micro-frontend-browse-restaurants&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/order-food&#x27;</span>: <span class="string">&#x27;micro-frontend-order-food&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;/user-profile&#x27;</span>: <span class="string">&#x27;micro-frontend-user-profile&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> webComponentType = webComponentsByRoute[<span class="built_in">window</span>.location.pathname];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Having determined the right web component custom element type,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// we now create an instance of it and attach it to the document</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;micro-frontend-root&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> webComponent = <span class="built_in">document</span>.createElement(webComponentType);</span></span><br><span class="line"><span class="javascript">      root.appendChild(webComponent);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终结果与前面的示例很像，主要区别在于这里以“Web 组件方式”操作。如果你喜欢 Web 组件规范，喜欢使用浏览器提供的功能，那么这也是个不错的选择。如果你更喜欢在容器应用和微前端之间定义自己的接口，那么前面的示例可能更合适。</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>CSS 本质上是一种全局、继承和级联的语言，传统 CSS 也没有模块系统、命名空间或封装；有些功能现在也可用了，但往往缺乏浏览器支持。在微前端领域，这些问题往往变得更为严重。例如，如果一个团队的微前端有一个样式表，上面写着 <code>h2 &#123; color: black; &#125;</code>，另一个微前端的样式表却写着 <code>h2 &#123; color: blue; &#125;</code>，并且这两个选择器都附加到了同一个页面，后果就很严重了！这类问题古已有之，但在微前端体系中由于这些选择器是由不同团队在不同时间编写的，而且代码可能分散在不同的存储库中，所以就更难发现了。</p><p>多年来业界发明了很多方法来更好地管理 CSS。有些人会使用严格的命名约定（例如<code>BEM规范</code>）以确保选择器只在正确的位置起作用。还有人会使用<code>SASS</code>之类的预处理器，其嵌套的选择器可以用作一种命名空间。一种较新的方法是使用<code>CSS模块</code>或某种<code>CSS-in-JS</code>库，以编程方式应用所有样式，确保样式只会直接应用在开发者想要的位置上。此外还有<code>shadow DOM</code>，它也提供样式隔离。</p><p>具体用哪种方法并不重要，只要让开发者可以独立编写样式，然后各个样式集成到同一个应用中时不起冲突就行了。</p><h2 id="共享组件库"><a href="#共享组件库" class="headerlink" title="共享组件库"></a>共享组件库</h2><p>前文提到微前端的视觉一致性是很重要的。一种实现方法是开发一个共享的、可重用的 UI 组件库。创建这样一个库的主要好处是通过重用代码和来减少工作量，同时实现视觉一致性。此外，这个组件库可以当作样式指南来用，它可以是开发者和设计人员之间的一个很好的协作桥梁。</p><p>但最容易犯的一个错误就是过早地搞出来一大堆组件。我们都想创建一个基础框架，其中包含所有应用所需的所有常见视觉效果。但其实我们很难提前判断组件应该用什么 API，结果很多组件都是在白费功夫。所以我们更愿意让团队在需要的时候再去创建自己的组件，就算因此产生了一些重复工作也没关系。应该顺其自然，等组件的 API 都确定下来以后再把重复代码收集到共享库里，这样就不会徒劳无功了。</p><p>最常见的共享组件是“无声”的视觉基本元素，如图标、标签和按钮等。我们还可以共享可能包含大量 UI 逻辑的复杂组件，例如自动完成、下拉搜索字段等；或者是可排序、可过滤的分页表。但是，请确保共享组件仅包含 UI 逻辑，而不包含业务或域逻辑。将域逻辑放入共享库会给应用之间带来高度耦合，改动起来也更困难。例如，一般来说不该共享 ProductTable，因为它会包含关于“产品”的定义及表现的各种内容。这种域建模和业务逻辑应该属于微前端的应用代码，不应该放到共享库里。</p><p>作为一种内部共享库来说，它的所有权和管理也自然存在一些棘手的问题。一种管理模式是将其视为共享资产，让“每个人”都拥有它——实践中这通常意味着没人能真正拥有它。这个共享库很快就会变成一堆不一致的代码集合，也没有明确的约定或技术愿景。反过来说，如果共享库的开发工作完全中心化，那么组件的创建者与使用者之间就会严重脱节。最好的模式应该是允许所有人为库做贡献，但要有一个保管人（一个人或一个团队）负责确保这些贡献的质量、一致性和有效性。维护共享库需要强大的技术技能，还需要能协调众多团队的管理技能。</p><h2 id="跨应用通信"><a href="#跨应用通信" class="headerlink" title="跨应用通信"></a>跨应用通信</h2><p>关于微前端最常见的一个问题是如何让这些微前端互相通信。一般来说，我们建议尽可能减少这类通信需求，因为它通常会重新引入我们本想避免的耦合度。</p><p>换句话说，某种程度的跨应用通信是必要的。自定义事件允许微前端之间间接通信，从而尽量减少直接耦合；但它也会让各个微前端之间已有的合约更难确定和增强。另一种方法是将回调和数据向下传递的 React 模型（这里是从容器应用向下传递到微前端），它能让模块之间的合约更加明确。第三种方法是使用地址栏作为通信机制，我们将在后面详细介绍。</p><p>如果你在使用 redux，常见方案是为整个应用提供单个全局共享存储。但如果每个微前端都是自包含的应用，那么它们都应该有自己的 redux 存储。Redux 文档甚至给出了“在大型应用中将 Redux 应用隔离为组件”的说明。</p><p>无论选择哪种方法，我们都希望微前端可以彼此发送消息或事件来通信，同时避免任何共享状态。就像在微服务之间共享数据库一样，一旦我们共享了数据结构和域模型就会引入大量的耦合，改动起来也会更困难。</p><p>这里也有几种不错的方案选项。最重要的是要时刻考虑你正在引入怎样的耦合，以及如何持续维持模块之间的合约。就像微服务之间的集成一样，你需要在不同应用和团队之间协调升级流程，才能对集成做出重大改动。</p><p>你还应该考虑如何自动验证集成的工作状态。一种方法是功能测试，但它们的实施和维护成本很高。或者你可以实现某种形式的消费者驱动合约，这样一来，无需在浏览器中集成全部微前端并运行应用，就能让每个微前端确定其他微前端需要哪些内容。</p><h2 id="后端通信"><a href="#后端通信" class="headerlink" title="后端通信"></a>后端通信</h2><p>前端应用开发倒是分配给各个独立团队了，可后端呢？这里就是全栈团队的价值所在了，他们从可视代码到 API 开发及数据库和基础架构代码都能自己搞定。有一种不错的模式叫BFF模式，其中每个前端应用都有一个对应的后端，后者只用来满足前者的需求。</p><p>这里有很多变量需要考虑。BFF 可能是自包含的，具有自己的业务逻辑和数据库，或者它可能只是下游服务的聚合器。负责微前端及其 BFF 的团队是否应该负责一部分下游服务也是个问题。如果微前端只有一个与之对话的 API，并且该 API 相当稳定，那么可能就不用构建 BFF 了。这里的指导原则是，构建某个微前端的团队不应该依赖其他团队为他们构建内容。因此，如果每个添加到微前端的新功能都需要改动后端，那么让同一个团队负责 BFF 就很合适了。</p><p><img src="/images/micro-frontends-7.jpeg"></p><p>另一个常见问题是，如何通过服务器对微前端应用的用户进行身份验证和授权操作？显然，客户应该只需进行一次身份验证过程，因此身份验证往往是跨领域问题，应该由容器应用负责。容器可能有某种登录形式，我们通过它获得某种令牌。该令牌将由容器控制，并且可以在初始化时注入各个微前端。最后，微前端可以把令牌及其发送的请求发给服务器，而服务器可以按需完成验证操作。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在测试方面，单体前端和微前端之间没有太大区别。一般来说在单体前端上使用的测试策略都能用在各个微前端上；也就是说每个微前端都应该有自己的自动化全面测试套件，以确保代码的质量和正确性。</p><p>不一样的是各种微前端与容器应用的集成测试。可以使用你最喜欢的功能/端到端测试工具（例如 Selenium 或 Cypress）来做这部分测试；应该使用单元测试来覆盖你的低级业务逻辑和呈现逻辑，然后使用功能测试来验证页面是否正确组装。例如，你可以在特定 URL 上加载完全集成的应用，并用硬编码标题来在页面上声明相关的微前端。</p><p>如果有跨越不同微前端的用户操作，那么就可以使用功能测试来覆盖它们。但记住功能测试的重点是验证前端的集成，而非每个微前端的内部业务逻辑，后者应该已经被单元测试覆盖了。如上所述，消费者驱动的合同可以用来直接指定微前端之间的交互，而不会破坏集成环境和功能测试。</p><hr><ul><li>译文: <a href="https://www.infoq.cn/article/03*BeU3zQegIbIytRsX9">https://www.infoq.cn/article/03*BeU3zQegIbIytRsX9</a></li><li>英文原文: <a href="https://martinfowler.com/articles/micro-frontends.html">https://martinfowler.com/articles/micro-frontends.html</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Pulsar</title>
      <link href="/2021/04/13/docker-pulsar/"/>
      <url>/2021/04/13/docker-pulsar/</url>
      
        <content type="html"><![CDATA[<p><a href="https://pulsar.apache.org/">Pulsar</a>在很多情况下提供了比Kafka更快的吞吐量和更低的延迟，并为开发人员提供了一组兼容的API，让他们可以很轻松地从Kafka切换到Pulsar。</p><p><a href="https://pulsar.apache.org/">Pulsar</a>的最大优点在于它提供了比Apache Kafka更简单明了、更健壮的一系列操作功能，特别在解决可观察性、地域复制和多租户方面的问题。在运行大型Kafka集群方面感觉有困难的企业可以考虑转向使用Pulsar。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">pulsar:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apachepulsar/pulsar</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.pulsar.rule=Host(`pulsar.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.pulsar.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.pulsar.service=pulsar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.pulsar.loadbalancer.server.port=8080</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bin/pulsar</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">conf:/pulsar/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/pulsar/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">conf:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> pulsar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSS订阅源</title>
      <link href="/2021/04/10/rss-source/"/>
      <url>/2021/04/10/rss-source/</url>
      
        <content type="html"><![CDATA[<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><ul><li>Repo Releases: <code>https://github.com/&#123;owner&#125;/&#123;repo&#125;/releases.atom</code></li><li>Repo Commits: <code>https://github.com/&#123;owner&#125;/&#123;repo&#125;/commits.atom</code></li><li>Repo Tags: <code>https://github.com/&#123;user&#125;/&#123;repo&#125;/tags.atom</code></li><li>User Activity: <code>https://github.com/&#123;user&#125;.atom</code></li></ul><h2 id="少数派"><a href="#少数派" class="headerlink" title="少数派"></a>少数派</h2><ul><li><a href="https://sspai.com/feed">https://sspai.com/feed</a></li></ul><h2 id="V2EX"><a href="#V2EX" class="headerlink" title="V2EX"></a>V2EX</h2><ul><li>全站: <a href="https://www.v2ex.com/index.xml">https://www.v2ex.com/index.xml</a></li><li>单独节点: <code>https://www.v2ex.com/feed/&#123;节点名&#125;.xml</code></li></ul><p><em>Examples:</em></p><ul><li><a href="https://www.v2ex.com/?tab=tech">https://www.v2ex.com/?tab=tech</a> –&gt; <a href="https://www.v2ex.com/feed/tech.xml">https://www.v2ex.com/feed/tech.xml</a></li><li><a href="https://www.v2ex.com/go/python">https://www.v2ex.com/go/python</a> –&gt; <a href="https://www.v2ex.com/feed/python.xml">https://www.v2ex.com/feed/python.xml</a></li></ul><h2 id="RSSHub"><a href="#RSSHub" class="headerlink" title="RSSHub"></a>RSSHub</h2><p><a href="https://docs.rsshub.app/">RSSHub</a>是一个开源、简单易用、易于扩展的RSS生成器，可以给任何奇奇怪怪的内容生成RSS订阅源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> rss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署RSSHub以及FreshRSS</title>
      <link href="/2021/04/06/docker-rss/"/>
      <url>/2021/04/06/docker-rss/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.rsshub.app/">RSSHub</a>是一个开源、简单易用、易于扩展的RSS生成器，可以给任何奇奇怪怪的内容生成RSS订阅源。</p><p><a href="https://github.com/FreshRSS/FreshRSS">FreshRSS</a>是开源免费RSS订阅工具，功能设置上类似于<code>Google Reader</code>，支持快捷键操作，多用户，Ajax加载，数据导入与导出以及统计数据。</p><p>这里直接使用<code>docker-compose</code>一键化部署：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">freshrss:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">freshrss/freshrss</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.freshrss.rule=Host(`freshrss.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.freshrss.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.freshrss.service=freshrss</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.freshrss.loadbalancer.server.port=80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CRON_MIN=*/20</span></span><br><span class="line">  <span class="attr">rsshub:</span>   <span class="comment"># port: 1200</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">diygod/rsshub</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NODE_ENV=production</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUPPETEER_WS_ENDPOINT=ws://browserless-chrome:3000</span></span><br><span class="line">  <span class="attr">browserless-chrome:</span>   <span class="comment"># port: 3000</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">browserless/chrome</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.enable=false</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>使用浏览器打开 <a href="https://freshrss.yourdomain.com/">https://freshrss.yourdomain.com</a> ：</p><p><video controls autoplay src="/images/docker-rss.mp4" style="max-width: 80%;"></video></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> rss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Strapi服务</title>
      <link href="/2021/03/28/docker-strapi/"/>
      <url>/2021/03/28/docker-strapi/</url>
      
        <content type="html"><![CDATA[<p><code>Headless CMS</code>是一个内容管理软件，它允许作者创建和管理内容，以及提供结构化数据给开发者，让开发者能够将数据展示在网站或者应用前端的一个独立系统中。</p><p>一个传统的，完整的<code>CMS</code>是同时负责后端的内容管理以及提供内容给最终用户。但相比之下，一个<code>headless CMS</code>将前端分离出来，让开发者能够用最好的技术来建立优越的用户体验。</p><p><a href="https://strapi.io/">Strapi</a>是一款开源的、也是最受欢迎的<code>Headless CMS</code>。</p><p><code>Strapi</code>这个名字取自<code>bootstrap</code>的后缀<code>strap</code>，然后因为它是一个提供快速生成安全可靠的<code>api</code>架构，然后再加了一个<code>i</code>，合并就是<code>strapi</code>，<code>bootstrap</code>的有启动的意思，你可以用<code>strapi</code>来快速构建你的后端，可以快速让自己的项目启动。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">shaarli:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">shaarli/shaarli</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.shaarli.rule=Host(`shaarli.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.shaarli.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.shaarli.service=shaarli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.shaarli.loadbalancer.server.port=80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/var/www/shaarli/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cache:/var/www/shaarli/cache</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> cms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django：自定义Lookup</title>
      <link href="/2021/03/23/django-custom-lookup/"/>
      <url>/2021/03/23/django-custom-lookup/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.djangoproject.com/">Django</a>已经内置了许多<a href="https://docs.djangoproject.com/en/3.1/ref/models/querysets/#field-lookups">lookup</a>用来检索数据，这些lookups能满足绝大部分应用场景。但有些时候我们需要自定义lookup用来满足特定的需求。</p><p>假设需要实现如下查询需求：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_tbl <span class="keyword">reverse</span>(<span class="keyword">content</span>) <span class="keyword">like</span> <span class="string">&#x27;54321%&#x27;</span>;  <span class="comment">-- postgresql</span></span><br></pre></td></tr></table></figure><p>定义如下<code>Lookup</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Field</span><br><span class="line"><span class="keyword">from</span> django.db.models.lookups <span class="keyword">import</span> Lookup</span><br><span class="line"></span><br><span class="line"><span class="meta">@Field.register_lookup</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReversePattern</span>(<span class="params">Lookup</span>):</span></span><br><span class="line">    lookup_name = <span class="string">&#x27;reverse&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_sql</span>(<span class="params">self, compiler, connection</span>):</span></span><br><span class="line">        lhs, _ = self.process_lhs(compiler, connection)</span><br><span class="line">        rhs, rhs_params = self.process_rhs(compiler, connection)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;reverse(%s) like %s&#x27;</span> % (lhs, rhs), [<span class="string">&#x27;&#x27;</span>.join(reversed(str(rhs_params[<span class="number">0</span>]))) + <span class="string">&#x27;%&#x27;</span>]</span><br></pre></td></tr></table></figure><p>查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test.objects.filter(content__reverse=<span class="string">&#x27;12345&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django：Postgresql Expresssion索引</title>
      <link href="/2021/03/19/django-postgresql-expression-idx/"/>
      <url>/2021/03/19/django-postgresql-expression-idx/</url>
      
        <content type="html"><![CDATA[<p>在Django中无法实现Expression索引，至少正常途径是做不到的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django.db.models.indexes.Index</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_sql</span>(<span class="params">self, model, schema_editor, using=<span class="string">&#x27;&#x27;</span>, **kwargs</span>):</span></span><br><span class="line">        fields = [model._meta.get_field(field_name) <span class="keyword">for</span> field_name, _ <span class="keyword">in</span> self.fields_orders]</span><br><span class="line">        col_suffixes = [order[<span class="number">1</span>] <span class="keyword">for</span> order <span class="keyword">in</span> self.fields_orders]</span><br><span class="line">        condition = self._get_condition_sql(model, schema_editor)</span><br><span class="line">        <span class="keyword">return</span> schema_editor._create_index_sql(</span><br><span class="line">            model, fields, name=self.name, using=using, db_tablespace=self.db_tablespace,</span><br><span class="line">            col_suffixes=col_suffixes, opclasses=self.opclasses, condition=condition,</span><br><span class="line">            **kwargs,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># django.db.backends.base.schema.BaseDatabaseSchemaEditor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseDatabaseSchemaEditor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_index_sql</span>(<span class="params">self, model, fields, *, name=None, suffix=<span class="string">&#x27;&#x27;</span>, using=<span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                          db_tablespace=None, col_suffixes=(<span class="params"></span>), sql=None, opclasses=(<span class="params"></span>),</span></span></span><br><span class="line"><span class="function"><span class="params">                          condition=None</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return the SQL statement to create the index for one or several fields.</span></span><br><span class="line"><span class="string">        `sql` can be specified if the syntax differs from the standard (GIS</span></span><br><span class="line"><span class="string">        indexes, ...).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        tablespace_sql = self._get_index_tablespace_sql(model, fields, db_tablespace=db_tablespace)</span><br><span class="line">        columns = [field.column <span class="keyword">for</span> field <span class="keyword">in</span> fields]</span><br><span class="line">        sql_create_index = sql <span class="keyword">or</span> self.sql_create_index</span><br><span class="line">        table = model._meta.db_table</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">create_index_name</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">nonlocal</span> name</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                name = self._create_index_name(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> self.quote_name(name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Statement(</span><br><span class="line">            sql_create_index,</span><br><span class="line">            table=Table(table, self.quote_name),</span><br><span class="line">            name=IndexName(table, columns, suffix, create_index_name),</span><br><span class="line">            using=using,</span><br><span class="line">            columns=self._index_columns(table, columns, col_suffixes, opclasses),</span><br><span class="line">            extra=tablespace_sql,</span><br><span class="line">            condition=self._index_condition_sql(condition),</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><a id="more"></a><p>不过，<a href="https://github.com/kmierzeje/django-expression-index">django-expression-index</a>实现了一个hacking的做法，那便是在创建Statement对象之后，强制修改columns属性，以达到能够正常生成sql语句的目的，下面是完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.db.backends.utils <span class="keyword">import</span> names_digest, split_identifier</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpressionIndex</span>(<span class="params">models.Index</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *, expressions=(<span class="params"></span>), name=None, db_tablespace=None, opclasses=(<span class="params"></span>), condition=None</span>):</span></span><br><span class="line">        super().__init__(fields=[str(e) <span class="keyword">for</span> e <span class="keyword">in</span> expressions],</span><br><span class="line">                         name=name, db_tablespace=db_tablespace,</span><br><span class="line">                         opclasses=opclasses, condition=condition)</span><br><span class="line">        self.expressions=expressions</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deconstruct</span>(<span class="params">self</span>):</span></span><br><span class="line">        path, args, kwargs = super().deconstruct()</span><br><span class="line">        kwargs.pop(<span class="string">&#x27;fields&#x27;</span>)</span><br><span class="line">        kwargs[<span class="string">&#x27;expressions&#x27;</span>] = self.expressions</span><br><span class="line">        <span class="keyword">return</span> path, args, kwargs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name_with_model</span>(<span class="params">self, model</span>):</span></span><br><span class="line">        self.fields_orders=[(model._meta.pk.name,<span class="string">&#x27;&#x27;</span>)]</span><br><span class="line">        _, table_name = split_identifier(model._meta.db_table)</span><br><span class="line">        digest=names_digest(table_name, *self.fields, length=<span class="number">6</span>)</span><br><span class="line">        self.name=<span class="string">f&quot;<span class="subst">&#123;table_name[:<span class="number">19</span>]&#125;</span>_<span class="subst">&#123;digest&#125;</span>_<span class="subst">&#123;self.suffix&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_sql</span>(<span class="params">self, model, schema_editor, using=<span class="string">&#x27;&#x27;</span>, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>:</span></span><br><span class="line">            db_tablespace=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, expression</span>):</span></span><br><span class="line">                self.column=str(expression)</span><br><span class="line"></span><br><span class="line">        col_suffixes = [<span class="string">&#x27;&#x27;</span>] * len(self.expressions)</span><br><span class="line">        condition = self._get_condition_sql(model, schema_editor)</span><br><span class="line">        statement= schema_editor._create_index_sql(</span><br><span class="line">            model, [Descriptor(e) <span class="keyword">for</span> e <span class="keyword">in</span> self.expressions],</span><br><span class="line">            name=self.name, using=using, db_tablespace=self.db_tablespace,</span><br><span class="line">            col_suffixes=col_suffixes, opclasses=self.opclasses, condition=condition,</span><br><span class="line">            **kwargs,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        compiler=model._meta.default_manager.all().query.get_compiler(connection=schema_editor.connection)</span><br><span class="line">        statement.parts[<span class="string">&#x27;columns&#x27;</span>] = <span class="string">&quot;, &quot;</span>.join(</span><br><span class="line">            [self.compile_expression(e, compiler) <span class="keyword">for</span> e <span class="keyword">in</span> self.expressions])</span><br><span class="line">        <span class="keyword">return</span> statement</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compile_expression</span>(<span class="params">self, expression, compiler</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">resolve_ref</span>(<span class="params">original, name, allow_joins=True, reuse=None, summarize=False, simple_col=False</span>):</span></span><br><span class="line">            <span class="keyword">return</span> original(name, allow_joins, reuse, summarize, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        query=compiler.query</span><br><span class="line">        query.resolve_ref=partial(resolve_ref, query.resolve_ref)</span><br><span class="line">        expression=expression.resolve_expression(query, allow_joins=<span class="literal">False</span>)</span><br><span class="line">        sql, params=expression.as_sql(compiler, compiler.connection)</span><br><span class="line">        <span class="keyword">return</span> sql % params</span><br></pre></td></tr></table></figure><p>由于在Django3.1.x中移除了参数<code>simple_col</code>，<code>query.resolve_ref</code>执行失败。将代码修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.backends.utils <span class="keyword">import</span> split_identifier, names_digest</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpressionIndex</span>(<span class="params">Index</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *, fields=(<span class="params"></span>), expressions=(<span class="params"></span>), name=None, db_tablespace=None, opclasses=(<span class="params"></span>), condition=None</span>):</span></span><br><span class="line">        super().__init__(fields=fields,</span><br><span class="line">                         name=name, db_tablespace=db_tablespace,</span><br><span class="line">                         opclasses=opclasses, condition=condition)</span><br><span class="line">        self.expressions = expressions</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deconstruct</span>(<span class="params">self</span>):</span></span><br><span class="line">        path, args, kwargs = super().deconstruct()</span><br><span class="line">        kwargs[<span class="string">&#x27;expressions&#x27;</span>] = self.expressions</span><br><span class="line">        <span class="keyword">return</span> path, args, kwargs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name_with_model</span>(<span class="params">self, model</span>):</span></span><br><span class="line">        _, table_name = split_identifier(model._meta.db_table)</span><br><span class="line">        digest = names_digest(table_name, *self.fields, length=<span class="number">6</span>)</span><br><span class="line">        self.name = <span class="string">f&#x27;<span class="subst">&#123;table_name[:<span class="number">19</span>]&#125;</span>_<span class="subst">&#123;digest&#125;</span>_<span class="subst">&#123;self.suffix&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_sql</span>(<span class="params">self, model, schema_editor, using=<span class="string">&#x27;&#x27;</span>, **kwargs</span>):</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">FieldDescriptor</span>:</span></span><br><span class="line">            db_tablespace = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, expression</span>):</span></span><br><span class="line">                self.column = str(expression)</span><br><span class="line"></span><br><span class="line">        condition = self._get_condition_sql(model, schema_editor)</span><br><span class="line">        statement = schema_editor._create_index_sql(</span><br><span class="line">            model, [FieldDescriptor(e) <span class="keyword">for</span> e <span class="keyword">in</span> self.expressions],</span><br><span class="line">            name=self.name, using=using, db_tablespace=self.db_tablespace,</span><br><span class="line">            col_suffixes=[<span class="string">&#x27;&#x27;</span>] * len(self.expressions), opclasses=self.opclasses, condition=condition,</span><br><span class="line">            **kwargs,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        compiler = model._meta.default_manager.all().query.get_compiler(connection=schema_editor.connection)</span><br><span class="line">        statement.parts[<span class="string">&#x27;columns&#x27;</span>] = <span class="string">&#x27;,&#x27;</span>.join([self.compile_expression(e, compiler) <span class="keyword">for</span> e <span class="keyword">in</span> self.expressions])</span><br><span class="line">        <span class="keyword">return</span> statement</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compile_expression</span>(<span class="params">cls, expression, compiler</span>):</span></span><br><span class="line">        expression = expression.resolve_expression(compiler.query, allow_joins=<span class="literal">False</span>)</span><br><span class="line">        sql, params = expression.as_sql(compiler, compiler.connection)</span><br><span class="line">        <span class="keyword">return</span> sql % params</span><br></pre></td></tr></table></figure><p>另外一种更值得推荐做法是<a href="/2021/03/19/django-run-rawsql-in-migration/" title="Django：在Migrations中执行原生SQL">Django：在Migrations中执行原生SQL</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django：在Migrations中执行原生SQL</title>
      <link href="/2021/03/19/django-run-rawsql-in-migration/"/>
      <url>/2021/03/19/django-run-rawsql-in-migration/</url>
      
        <content type="html"><![CDATA[<p>First, generate a new empty migration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations app --empty --name add_index_runsql</span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">&#x27;app&#x27;</span>:</span><br><span class="line">  app/migrations/0002_add_index_runsql.py</span><br></pre></td></tr></table></figure><p>Next, edit the migration file and add a RunSQL operation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># migrations/0002_add_index_runsql.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span>(<span class="params">migrations.Migration</span>):</span></span><br><span class="line">    atomic = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;0001_initial&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunSQL(</span><br><span class="line">            <span class="string">&#x27;CREATE INDEX app_sale_sold_at_b9438ae4 ON app_sale (sold_at);&#x27;</span>,</span><br><span class="line">            reverse_sql=<span class="string">&#x27;DROP INDEX &quot;app_sale_sold_at_b9438ae4&quot;;&#x27;</span>,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><a id="more"></a><p>When you run the migration, you will get the following output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate</span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: app</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying app.0002_add_index_runsql... OK</span><br></pre></td></tr></table></figure><p>migrate back to the initial migration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate 0001</span><br><span class="line">Operations to perform:</span><br><span class="line">  Target specific migration: 0001_initial, from app</span><br><span class="line">Running migrations:</span><br><span class="line">  Rendering model states... DONE</span><br><span class="line">  Unapplying app.0002_add_index_fake... OK</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django：Postgresql BTree索引</title>
      <link href="/2021/03/18/django-postgresql-btree-idx/"/>
      <url>/2021/03/18/django-postgresql-btree-idx/</url>
      
        <content type="html"><![CDATA[<p>使用<code>db_index</code>参数创建<code>btree</code>索引，当字段类型是<code>varchar</code>或<code>text</code>时会额外创建<code>like index</code>，具体参见：<a href="https://github.com/django/django/blob/6efc35b4fe3009666e56a60af0675d7d532bf4ff/django/db/backends/postgresql/schema.py#L69">DatabaseSchemaEditor._create_like_index_sql</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTreeIdx</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    content = models.CharField(max_length=<span class="number">200</span>, db_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> btree_idx_btreeidx_content_511ce749</span><br><span class="line">    <span class="keyword">ON</span> public.btree_idx_btreeidx <span class="keyword">USING</span> btree</span><br><span class="line">    (<span class="keyword">content</span> <span class="keyword">COLLATE</span> pg_catalog.<span class="string">&quot;default&quot;</span> <span class="keyword">ASC</span> <span class="keyword">NULLS</span> <span class="keyword">LAST</span>)</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> btree_idx_btreeidx_content_511ce749_like</span><br><span class="line">    <span class="keyword">ON</span> public.btree_idx_btreeidx <span class="keyword">USING</span> btree</span><br><span class="line">    (<span class="keyword">content</span> <span class="keyword">COLLATE</span> pg_catalog.<span class="string">&quot;default&quot;</span> varchar_pattern_ops <span class="keyword">ASC</span> <span class="keyword">NULLS</span> <span class="keyword">LAST</span>)</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure><a id="more"></a><p>创建<code>btree</code>索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTreeIdx</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    content = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        indexes = [</span><br><span class="line">            BTreeIndex(fields=[<span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> btree_idx_b_content_93bf39_btree</span><br><span class="line">    <span class="keyword">ON</span> public.btree_idx_btreeidx <span class="keyword">USING</span> btree</span><br><span class="line">    (<span class="keyword">content</span> <span class="keyword">COLLATE</span> pg_catalog.<span class="string">&quot;default&quot;</span> <span class="keyword">ASC</span> <span class="keyword">NULLS</span> <span class="keyword">LAST</span>)</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure><p>创建<code>btree</code>索引，<code>opclass=varchar_pattern_ops</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTreeIdx</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    content = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        indexes = [</span><br><span class="line">            BTreeIndex(name=<span class="string">&#x27;btree_idx_like_idx&#x27;</span>, fields=[<span class="string">&#x27;content&#x27;</span>], opclasses=[<span class="string">&#x27;varchar_pattern_ops&#x27;</span>])</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> btree_idx_like_idx</span><br><span class="line">    <span class="keyword">ON</span> public.btree_idx_btreeidx <span class="keyword">USING</span> btree</span><br><span class="line">    (<span class="keyword">content</span> <span class="keyword">COLLATE</span> pg_catalog.<span class="string">&quot;default&quot;</span> varchar_pattern_ops <span class="keyword">ASC</span> <span class="keyword">NULLS</span> <span class="keyword">LAST</span>)</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django：Postgresql JSON索引</title>
      <link href="/2021/03/16/django-postgresql-json-idx/"/>
      <url>/2021/03/16/django-postgresql-json-idx/</url>
      
        <content type="html"><![CDATA[<p>使用<code>db_index</code>参数创建索引只会创建<code>btree</code>索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonIdx</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    content = models.JSONField(db_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> json_idx_jsonidx_content_d01e171b</span><br><span class="line">    <span class="keyword">ON</span> public.json_idx_jsonidx <span class="keyword">USING</span> btree</span><br><span class="line">    (<span class="keyword">content</span> <span class="keyword">ASC</span> <span class="keyword">NULLS</span> <span class="keyword">LAST</span>)</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure><a id="more"></a><p>创建<code>gin</code>索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonIdx</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    content = models.JSONField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        indexes = [</span><br><span class="line">            GinIndex(fields=[<span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> json_idx_js_content_61b1a2_gin</span><br><span class="line">    <span class="keyword">ON</span> public.json_idx_jsonidx <span class="keyword">USING</span> gin</span><br><span class="line">    (<span class="keyword">content</span>)</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure><p>创建<code>gin</code>索引，<code>opclass=jsonb_path_ops</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonIdx</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    content = models.JSONField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        indexes = [</span><br><span class="line">            GinIndex(name=<span class="string">&#x27;json_idx_gin_idx&#x27;</span>, fields=[<span class="string">&#x27;content&#x27;</span>], opclasses=[<span class="string">&#x27;jsonb_path_ops&#x27;</span>])</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> json_idx_gin_idx</span><br><span class="line">    <span class="keyword">ON</span> public.json_idx_jsonidx <span class="keyword">USING</span> gin</span><br><span class="line">    (<span class="keyword">content</span> jsonb_path_ops)</span><br><span class="line">    <span class="keyword">TABLESPACE</span> pg_default;</span><br></pre></td></tr></table></figure><p>结合文章<a href="/2021/03/12/postgresql-json-idx/" title="Postgresql：JSON索引">Postgresql：JSON索引</a>，建议采用最后一种方式创建索引。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql：JSON索引</title>
      <link href="/2021/03/12/postgresql-json-idx/"/>
      <url>/2021/03/12/postgresql-json-idx/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Name</th><th>Indexable Operators</th><th>Comments</th></tr></thead><tbody><tr><td>jsonb_ops</td><td><code>?</code> <code>?&amp;</code> <code>?|</code> <code>@&gt;</code> <code>@?</code> <code>@@</code></td><td>is default</td></tr><tr><td>jsonb_path_ops</td><td><code>@&gt;</code> <code>@?</code> <code>@@</code></td><td>支持少量的操作，但能提供更好的表现</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- drop table if exists test;</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">test</span> (<span class="keyword">id</span> <span class="built_in">int</span>, js jsonb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> test_js_idx <span class="keyword">on</span> <span class="keyword">test</span> <span class="keyword">using</span> gin (js jsonb_path_ops);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入1000w条数据花了近1个小时</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> (<span class="keyword">id</span>, js)</span><br><span class="line"><span class="keyword">select</span> n, row_to_json(<span class="keyword">row</span>(uuid_generate_v1(), uuid_generate_v1(), uuid_generate_v1(), uuid_generate_v1(), uuid_generate_v1()))</span><br><span class="line"><span class="keyword">from</span> generate_series(<span class="number">1</span>, <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询时间在100ms～130ms之间</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> js @&gt; jsonb <span class="string">&#x27;&#123;&quot;f2&quot;: &quot;5e36a48c-86f3-11eb-b9d7-0242ac120005&quot;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Odoo服务</title>
      <link href="/2021/03/04/docker-odoo/"/>
      <url>/2021/03/04/docker-odoo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.odoo.com/">Odoo</a>是基于Python写的一系列开源商业ERP系统，前身是OpenERP。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">odoo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">odoo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.odoo.rule=Host(`odoo.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.odoo.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.odoo.service=odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.odoo.loadbalancer.server.port=8069</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PORT=5432</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">USER=odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASSWORD=odoo</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/var/lib/odoo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">addons:/mnt/extra-addons</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">  <span class="attr">addons:</span></span><br></pre></td></tr></table></figure><p>值得注意的是，服务初始化的时候无需创建数据库，它会在后续的初始化过程中自动创建。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> erp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署XRay服务</title>
      <link href="/2021/02/27/docker-xray/"/>
      <url>/2021/02/27/docker-xray/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xtls.github.io/">XRay</a>是一款原生支持XTLS黑科技且源自<a href="https://www.v2ray.com/">V2Ray</a>却超越V2Ray的科学上网工具。</p><h2 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h2><p><code>docker-compose.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">xray:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">teddysun/xray</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.xray.rule=Host(`xray.yourdomain.com`)</span> <span class="string">&amp;&amp;</span> <span class="string">Path(`/vxknSD77hYanwwRM`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.xray.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.xray.service=xray</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.xray.loadbalancer.server.port=9000</span></span><br><span class="line">    <span class="attr">volume:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.json:/etc/xray/config.json</span></span><br></pre></td></tr></table></figure><span id="more"></span><p><code>config.json</code>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;inbound&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;clients&quot;</span>: [&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;01605FB4-129A-4673-BDD8-D7BC592B404A&quot;</span> &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;streamSettings&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;network&quot;</span>: <span class="string">&quot;ws&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;wsSettings&quot;</span>: &#123; <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/vxknSD77hYanwwRM&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;outbound&quot;</span>: &#123; <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>下载并安装客户端，按以下内容进行配置：</p><ul><li>id: 01605FB4-129A-4673-BDD8-D7BC592B404A</li><li>wss://xray.yourdomain.com/vxknSD77hYanwwRM</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署SonarQube</title>
      <link href="/2021/02/22/docker-sonarqube/"/>
      <url>/2021/02/22/docker-sonarqube/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.sonarqube.org/">SonarQube</a>是一个开源的代码质量管理平台，专用于持续集成分析和测量技术质量，从项目的组合到方法。</p><h2 id="部署SonarQube"><a href="#部署SonarQube" class="headerlink" title="部署SonarQube"></a>部署SonarQube</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">sonarqube:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.sonarqube.rule=Host(`sonarqube.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.sonarqube.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.sonarqube.service=sonarqube</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.sonarqube.loadbalancer.server.port=9000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SONAR_JDBC_URL=jdbc:postgresql://postgres/sonarqube</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SONAR_JDBC_USERNAME=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SONAR_JDBC_PASSWORD=postgres</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions:/opt/sonarqube/extensions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">extensions:</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="在Jenkins中集成SonarQube"><a href="#在Jenkins中集成SonarQube" class="headerlink" title="在Jenkins中集成SonarQube"></a>在Jenkins中集成SonarQube</h2><h3 id="安装-SonarQube-Scanner-插件"><a href="#安装-SonarQube-Scanner-插件" class="headerlink" title="安装 SonarQube Scanner 插件"></a>安装 SonarQube Scanner 插件</h3><h3 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h3><ol><li><code>系统管理 -&gt; 系统配置 -&gt; SonarQube servers</code><ul><li>Name: SonarQube</li><li>Server URL: <a href="https://sonarqube.yourdomain.com/">https://sonarqube.yourdomain.com</a></li><li>Server authentication token: 在SonarQube上申请的token</li></ul></li><li><code>系统管理 -&gt; 全局工具配置 -&gt; SonarQube Scanner</code><ul><li>Name: Scanner</li><li>自动安装: √</li><li>Install from Maven Central: 选择最新版</li></ul></li></ol><h3 id="添加任务"><a href="#添加任务" class="headerlink" title="添加任务"></a>添加任务</h3><p><code>构建 -&gt; Execute SonarQube Scanner -&gt; Analysis properties</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sonar.projectKey</span>=<span class="variable">$project_name</span></span><br><span class="line"><span class="attr">sonar.sources</span>=.</span><br><span class="line"><span class="attr">sonar.exclusions</span>=build/*,dist/*,docs/*</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
            <tag> sonarqube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Traefik中配置Let&#39;s Encrypt</title>
      <link href="/2021/02/08/traefik-ssl/"/>
      <url>/2021/02/08/traefik-ssl/</url>
      
        <content type="html"><![CDATA[<p>关于Traefik，参考我的另一篇文章：<a href="/2021/01/12/docker-traefik/" title="使用Docker部署Traefik服务">使用Docker部署Traefik服务</a>。</p><p>本文使用alidns，需要先申请<code>ALICLOUD_ACCESS_KEY</code>、<code>ALICLOUD_SECRET_KEY</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">traefik:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.traefik.entrypoints=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.traefik.service=traefik</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.traefik.loadbalancer.server.port=8080</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--providers.docker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--api.dashboard=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--entrypoints.web.address=:80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--entrypoints.web.http.redirections.entryPoint.to=websecure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--entrypoints.websecure.address=:443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--entrypoints.websecure.http.tls.certResolver=letsencrypt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--certificatesResolvers.letsencrypt.acme.storage=/certs/acme.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=alidns</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALICLOUD_ACCESS_KEY=xxx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALICLOUD_SECRET_KEY=xxx</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">certs:/certs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">certs:</span></span><br></pre></td></tr></table></figure><p>更多provider参考：<a href="https://doc.traefik.io/traefik/https/acme/#providers">https://doc.traefik.io/traefik/https/acme/#providers</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> letsencrypt </tag>
            
            <tag> ssl </tag>
            
            <tag> traefik </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mkcert创建自签名证书</title>
      <link href="/2021/01/31/mkcert/"/>
      <url>/2021/01/31/mkcert/</url>
      
        <content type="html"><![CDATA[<p>在做本地开发的时候，免不了需要模拟https环境，这时候便需要使用自签名证书，自签名证书可以使用openssl生成，但这一系列步骤过于复杂 – 我们需要使用一种简单且友好的方式生成本地https证书，那便是<a href="https://github.com/FiloSottile/mkcert">mkcert</a>方案。</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mkcert</span><br></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libnss3-tools</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">sudo yum install nss-tools</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="将CA证书加入本地可信CA"><a href="#将CA证书加入本地可信CA" class="headerlink" title="将CA证书加入本地可信CA"></a>将CA证书加入本地可信CA</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkcert -install</span><br></pre></td></tr></table></figure><h3 id="生成自签证书"><a href="#生成自签证书" class="headerlink" title="生成自签证书"></a>生成自签证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkcert your.domain.com</span><br><span class="line">Using the <span class="built_in">local</span> CA at <span class="string">&quot;/Users/hypc/Library/Application Support/mkcert&quot;</span> ✨</span><br><span class="line"></span><br><span class="line">Created a new certificate valid <span class="keyword">for</span> the following names 📜</span><br><span class="line"> - <span class="string">&quot;your.domain.com&quot;</span></span><br><span class="line"></span><br><span class="line">The certificate is at <span class="string">&quot;./your.domain.com.pem&quot;</span> and the key at <span class="string">&quot;./your.domain.com-key.pem&quot;</span> ✅</span><br></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> your.domain.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>     your.domain.com.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> your.domain.com-key.pem;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ssl </tag>
            
            <tag> mkcert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Wallabag服务</title>
      <link href="/2021/01/21/docker-wallabag/"/>
      <url>/2021/01/21/docker-wallabag/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/wallabag/wallabag">Wallabag</a>是一款稍后阅读工具。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wallabag:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wallabag/wallabag</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.wallabag.rule=Host(`wallabag.domain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.wallabag.entrypoints=web</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.wallabag.service=wallabag</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.wallabag.loadbalancer.server.port=80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYMFONY__ENV__DOMAIN_NAME=http://wallabag.domain.com</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/var/www/wallabag/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">images:/var/www/wallabag/web/assets/images</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">  <span class="attr">images:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>htpasswd</title>
      <link href="/2021/01/17/htpasswd/"/>
      <url>/2021/01/17/htpasswd/</url>
      
        <content type="html"><![CDATA[<p><a href="https://httpd.apache.org/docs/2.4/misc/password_encryptions.html">htpasswd</a>命令是Apache的Web服务器内置工具，用于创建和更新储存用户名、域和用户基本认证的密码文件。</p><p>较常用的是<code>MD5</code>算法，可以使用下面命令生成密钥串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用htpasswd命令</span></span><br><span class="line">$ htpasswd -nbm myName myPassword</span><br><span class="line">myName:<span class="variable">$apr1</span><span class="variable">$izvq8Tz5</span><span class="variable">$vBk6U1mybuKXyth86sDfc</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用openssl命令</span></span><br><span class="line">$ openssl passwd -apr1 myPassword</span><br><span class="line"><span class="variable">$apr1</span><span class="variable">$kRZXMOsR</span><span class="variable">$qRNQdigt90XJkWbyzftwa1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ssl </tag>
            
            <tag> htpasswd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Kong服务</title>
      <link href="/2021/01/14/docker-kong/"/>
      <url>/2021/01/14/docker-kong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://konghq.com/">Kong</a>是全球最受欢迎的开源API网关。专为多云和混合而建，针对微服务和分布式架构进行了优化。<a href="https://github.com/pantsel/konga">KongA</a>是一款开源的<a href="https://konghq.com/">Kong</a> UI管理工具。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kong:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kong</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_DATABASE=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_PG_HOST=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_CASSANDRA_CONTACT_POINTS=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_PROXY_ACCESS_LOG=/dev/stdout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_ADMIN_ACCESS_LOG=/dev/stdout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_PROXY_ERROR_LOG=/dev/stderr</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_ADMIN_ERROR_LOG=/dev/stderr</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_ADMIN_LISTEN=0.0.0.0:8001</span></span><br><span class="line">  <span class="attr">kong-migrate:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kong</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">kong</span> <span class="string">migrations</span> <span class="string">bootstrap</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_DATABASE=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_PG_HOST=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KONG_CASSANDRA_CONTACT_POINTS=postgres</span></span><br><span class="line">  <span class="attr">konga:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">pantsel/konga</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1337</span><span class="string">:1337</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NODE_ENV=production</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kongadata:/app/kongadata</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:12</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=kong</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=kong</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">kongadata:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Traefik服务</title>
      <link href="/2021/01/12/docker-traefik/"/>
      <url>/2021/01/12/docker-traefik/</url>
      
        <content type="html"><![CDATA[<p><a href="https://traefik.io/">Traefɪk</a>是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。它支持多种后台（Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd,Zookeeper, BoltDB, Rest API, file…）来自动化、动态的应用它的配置文件设置。</p><h2 id="快速启动Traefik服务"><a href="#快速启动Traefik服务" class="headerlink" title="快速启动Traefik服务"></a>快速启动Traefik服务</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">traefik:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.traefik.entrypoints=web</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.routers.traefik.service=api@internal</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.http.services.traefik.loadbalancer.server.port=8080</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--providers.docker</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--api.dashboard=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--entrypoints.web.address=:80</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>使用浏览器打开<code>http://traefik.yourdomain.com</code>，效果如下：</p><p><img src="/images/docker-traefik.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> traefik </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CFG Lock</title>
      <link href="/2021/01/09/cfg-lock/"/>
      <url>/2021/01/09/cfg-lock/</url>
      
        <content type="html"><![CDATA[<p>前两天重做了系统，今天开机一直卡在Logo画面，也不显示进度条。后来进BIOS，将<code>CFG Lock</code>修改为disabled便可以正常开机了。</p><p><code>MSR 0xE2</code>：MSR全称是<code>Model Specific Register</code>，特定模块寄存器，属于非标准寄存器，用来控制CPU的工作环境和读取工作状态，比如电压，温度，功耗等非程序性能指标。苹果系统的电源管理、CPU的<code>P-state</code>、<code>C-state</code>就是放在MSR寄存器里的。大多数UEFI主板厂家，锁定了MSR寄存器的第15位为只读，也就是<code>MSR 0xE2 Locking</code>（BIOS 中叫<code>CFG Lock</code>）。<code>MSR 0xE2</code>被锁定为只读后，AppleIntelCPUPowernamegement一旦去写入数据，马上就核心崩溃。有些主板上有选项<code>CFG Lock</code>，其说明内容为<code>关闭或开启MSR 0xE2</code>，可以手动开关。</p><p>当你需要使用黑苹果时，则必须解锁<code>MSR 0xE2</code>，否则无法使用原生电源管理。关于如何解锁，网上有一堆资料，这里就不赘述了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> osx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Cobra构建命令行工具</title>
      <link href="/2021/01/03/cobra/"/>
      <url>/2021/01/03/cobra/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/spf13/cobra">Cobra</a>是一个Golang包，它提供了简单的接口来创建命令行程序。<a href="https://github.com/spf13/cobra">Cobra</a>还是一个应用程序，用来生成应用框架，从而开发以<a href="https://github.com/spf13/cobra">Cobra</a>为基础的应用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用下面命令安装<code>Cobra</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/spf13/cobra</span><br></pre></td></tr></table></figure><h2 id="快速初始化"><a href="#快速初始化" class="headerlink" title="快速初始化"></a>快速初始化</h2><p>执行下面命令快速初始化命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobra init myCmd --pkg-name myCmd</span><br></pre></td></tr></table></figure><a id="more"></a><p>目录结构如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myCmd/</span><br><span class="line">├── LICENSE</span><br><span class="line">├── cmd/</span><br><span class="line">│   └── root.go</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>其中<code>root.go</code>文件内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line">homedir <span class="string">&quot;github.com/mitchellh/go-homedir&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cfgFile <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rootCmd represents the base command when called without any subcommands</span></span><br><span class="line"><span class="keyword">var</span> rootCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">&quot;myCmd&quot;</span>,</span><br><span class="line">Short: <span class="string">&quot;A brief description of your application&quot;</span>,</span><br><span class="line">Long: <span class="string">`A longer description that spans multiple lines and likely contains</span></span><br><span class="line"><span class="string">examples and usage of using your application. For example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Cobra is a CLI library for Go that empowers applications.</span></span><br><span class="line"><span class="string">This application is a tool to generate the needed files</span></span><br><span class="line"><span class="string">to quickly create a Cobra application.`</span>,</span><br><span class="line"><span class="comment">// Uncomment the following line if your bare application</span></span><br><span class="line"><span class="comment">// has an action associated with it:</span></span><br><span class="line"><span class="comment">//Run: func(cmd *cobra.Command, args []string) &#123; &#125;,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute adds all child commands to the root command and sets flags appropriately.</span></span><br><span class="line"><span class="comment">// This is called by main.main(). It only needs to happen once to the rootCmd.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Execute</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := rootCmd.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">cobra.OnInitialize(initConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here you will define your flags and configuration settings.</span></span><br><span class="line"><span class="comment">// Cobra supports persistent flags, which, if defined here,</span></span><br><span class="line"><span class="comment">// will be global for your application.</span></span><br><span class="line"></span><br><span class="line">rootCmd.PersistentFlags().StringVar(&amp;cfgFile, <span class="string">&quot;config&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;config file (default is $HOME/.myCmd.yaml)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cobra also supports local flags, which will only run</span></span><br><span class="line"><span class="comment">// when this action is called directly.</span></span><br><span class="line">rootCmd.Flags().BoolP(<span class="string">&quot;toggle&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;Help message for toggle&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initConfig reads in config file and ENV variables if set.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> cfgFile != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="comment">// Use config file from the flag.</span></span><br><span class="line">viper.SetConfigFile(cfgFile)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Find home directory.</span></span><br><span class="line">home, err := homedir.Dir()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Search config in home directory with name &quot;.myCmd&quot; (without extension).</span></span><br><span class="line">viper.AddConfigPath(home)</span><br><span class="line">viper.SetConfigName(<span class="string">&quot;.myCmd&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">viper.AutomaticEnv() <span class="comment">// read in environment variables that match</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If a config file is found, read it in.</span></span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Using config file:&quot;</span>, viper.ConfigFileUsed())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加子命令"><a href="#添加子命令" class="headerlink" title="添加子命令"></a>添加子命令</h2><p>使用下面命令添加子命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cobra add subCmd</span><br></pre></td></tr></table></figure><p>目录结构如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">myCmd/</span><br><span class="line">├── LICENSE</span><br><span class="line">├── cmd</span><br><span class="line">│   ├── root.go</span><br><span class="line">│   └── subCmd.go</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p><code>subCmd.go</code>文件内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// subCmdCmd represents the subCmd command</span></span><br><span class="line"><span class="keyword">var</span> subCmdCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">&quot;subCmd&quot;</span>,</span><br><span class="line">Short: <span class="string">&quot;A brief description of your command&quot;</span>,</span><br><span class="line">Long: <span class="string">`A longer description that spans multiple lines and likely contains examples</span></span><br><span class="line"><span class="string">and usage of using your command. For example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Cobra is a CLI library for Go that empowers applications.</span></span><br><span class="line"><span class="string">This application is a tool to generate the needed files</span></span><br><span class="line"><span class="string">to quickly create a Cobra application.`</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;subCmd called&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">rootCmd.AddCommand(subCmdCmd)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here you will define your flags and configuration settings.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Cobra supports Persistent Flags which will work for this command</span></span><br><span class="line"><span class="comment">// and all subcommands, e.g.:</span></span><br><span class="line"><span class="comment">// subCmdCmd.PersistentFlags().String(&quot;foo&quot;, &quot;&quot;, &quot;A help for foo&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Cobra supports local flags which will only run when this command</span></span><br><span class="line"><span class="comment">// is called directly, e.g.:</span></span><br><span class="line"><span class="comment">// subCmdCmd.Flags().BoolP(&quot;toggle&quot;, &quot;t&quot;, false, &quot;Help message for toggle&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> cobra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化Docker镜像</title>
      <link href="/2020/12/30/docker-optimize-image/"/>
      <url>/2020/12/30/docker-optimize-image/</url>
      
        <content type="html"><![CDATA[<ul><li><p>选用更小的基础镜像：例如<code>alpine</code>或基于<code>alpine</code>构建的镜像</p></li><li><p>合并指令，减少镜像层级：将安装依赖、编译、移除源代码等指令合并成一条语句</p></li><li><p>去除不需要的依赖、库：删除用不到的依赖、库等，尽量精简镜像</p></li><li><p>分阶段构建镜像：分离编译镜像和部署镜像，下面是一个<code>nodejs</code>项目的示例：</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine as build</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn install &amp;&amp; yarn build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build-app /app/dist /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure></li></ul><p>大家可以在<a href="https://hub.docker.com/">DockerHub</a>了解更多优秀软件的<code>Dockerfile</code>的写法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python元类</title>
      <link href="/2020/12/26/python-metaclass/"/>
      <url>/2020/12/26/python-metaclass/</url>
      
        <content type="html"><![CDATA[<p>在python官方文档有一句话：</p><blockquote><p>By default, classes are constructed using type(). The class body is executed in a new namespace and the class name is bound locally to the result of type(name, bases, namespace).</p></blockquote><p>这句话的大概意思是说：在默认情况下，类都是由<code>type</code>构建而来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = type(<span class="string">&#x27;A&#x27;</span>, (object,), &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object, metaclass=type</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>以上三种创建类<code>A</code>的方式等价。</p><a id="more"></a><p>那么我们是否可以通过继承<code>type</code>的方式实现自己的<code>mytype</code>？答案是可以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mytype</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B = mytype(<span class="string">&#x27;B&#x27;</span>, (object,), &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span>(<span class="params">object, metaclass=mytype</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>我们将<code>mytype</code>改造一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mytype</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">cls, name, bases, namespace</span>):</span></span><br><span class="line">        super().__init__(name, bases, namespace)</span><br><span class="line">        setattr(cls, <span class="string">&#x27;hello&#x27;</span>, <span class="keyword">lambda</span> self: <span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(B().hello())</span><br><span class="line">hello world!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(B.__dict__)</span><br><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;B&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;B&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;hello&#x27;</span>: &lt;function mytype.__init__.&lt;locals&gt;.&lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x108d74b80</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(BB().hello())</span><br><span class="line">hello world!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(BB.__dict__)</span><br><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;BB&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;BB&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;hello&#x27;</span>: &lt;function mytype.__init__.&lt;locals&gt;.&lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x108d74d30</span>&gt;&#125;</span><br></pre></td></tr></table></figure><p>将<code>mytype</code>再次改造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mytype</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">mcls, name, bases, namespace</span>):</span></span><br><span class="line">        cls = super().__new__(mcls, name, bases, namespace)</span><br><span class="line">        setattr(cls, <span class="string">&#x27;hello&#x27;</span>, <span class="keyword">lambda</span> self: <span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> cls</span><br></pre></td></tr></table></figure><p>再次执行以下代码，可以发现结果几乎相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(B().hello())</span><br><span class="line">hello world!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(B.__dict__)</span><br><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;B&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;B&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;hello&#x27;</span>: &lt;function mytype.__init__.&lt;locals&gt;.&lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x104c6baf0</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(BB().hello())</span><br><span class="line">hello world!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(BB.__dict__)</span><br><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;BB&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;BB&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;hello&#x27;</span>: &lt;function mytype.__init__.&lt;locals&gt;.&lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x104c6bca0</span>&gt;&#125;</span><br></pre></td></tr></table></figure><p>最后，再提一句，元类的实现上，倾向于使用<code>__new__</code>而不是<code>__init__</code>。<code>__new__</code>与<code>__init__</code>的区别，大家可以自行去了解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuejs常用组件</title>
      <link href="/2020/12/17/vue-ex/"/>
      <url>/2020/12/17/vue-ex/</url>
      
        <content type="html"><![CDATA[<ul><li><code>element-ui</code>: <a href="https://element.eleme.io/">https://element.eleme.io/</a></li><li><code>axios</code>: <a href="https://github.com/axios/axios">https://github.com/axios/axios</a></li><li><code>vue-element-admin</code>: <a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a></li><li><code>electron-vue</code>: <a href="https://github.com/SimulatedGREG/electron-vue">https://github.com/SimulatedGREG/electron-vue</a></li><li><code>vee-validate</code>: <a href="https://github.com/logaretm/vee-validate">https://github.com/logaretm/vee-validate</a></li><li><code>vue-amap</code>: <a href="https://github.com/ElemeFE/vue-amap">https://github.com/ElemeFE/vue-amap</a></li></ul><p>更过组件可参考：<a href="https://baijiahao.baidu.com/s?id=1629138670094636894">https://baijiahao.baidu.com/s?id=1629138670094636894</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firewalld常见用法</title>
      <link href="/2020/12/12/firewalld/"/>
      <url>/2020/12/12/firewalld/</url>
      
        <content type="html"><![CDATA[<p>前两天，CentOS项目宣布，CentOS8将于2021年底结束，而CentOS7将在其生命周期结束后停止维护。于是，我又将个人VPS装回CentOS7。</p><p>下面介绍firewalld的常见用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有配置</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时打开443/TCP端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=443/tcp</span><br><span class="line"><span class="comment"># 永久打开443/TCP端口</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=443/tcp</span><br><span class="line"><span class="comment"># 移除443端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=443/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时添加http服务</span></span><br><span class="line">firewall-cmd --zone=public --add-service=http</span><br><span class="line"><span class="comment"># 永久添加http服务</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line"><span class="comment"># 移除http服务</span></span><br><span class="line">firewall-cmd --zone=public --remove-service=http</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在不改变状态的条件下重新加载防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>更多用法参见：<a href="https://github.com/jaywcjlove/linux-command/blob/master/command/firewall-cmd.md">firewall-cmd</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
            <tag> firewalld </tag>
            
            <tag> firewall-cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetbrains IDE无限试用</title>
      <link href="/2020/12/09/jetbrains-eval/"/>
      <url>/2020/12/09/jetbrains-eval/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/pengzhile/ide-eval-resetter">https://gitee.com/pengzhile/ide-eval-resetter</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jetbrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker搭建Bitwarden服务</title>
      <link href="/2020/12/06/docker-bitwarden/"/>
      <url>/2020/12/06/docker-bitwarden/</url>
      
        <content type="html"><![CDATA[<p><a href="https://bitwarden.com/">Bitwarden</a>是一款开源的密码管理工具。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">bitwarden:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bitwardenrs/server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">portss:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data:/data/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure><p>注意：在使用浏览器插件的时候需要必须配置ssl证书。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> bitwarden </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：partial函数</title>
      <link href="/2020/11/28/python-partial/"/>
      <url>/2020/11/28/python-partial/</url>
      
        <content type="html"><![CDATA[<p>[partial][]: New function with partial application of the given arguments and keywords.</p><p>简单来说，便是为一个函数预设初始参数，并创建一个新的函数。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span>(<span class="params">func, /, *args, **keywords</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span>(<span class="params">*fargs, **fkeywords</span>):</span></span><br><span class="line">        newkeywords = &#123;**keywords, **fkeywords&#125;</span><br><span class="line">        <span class="keyword">return</span> func(*args, *fargs, **newkeywords)</span><br><span class="line">    newfunc.func = func</span><br><span class="line">    newfunc.args = args</span><br><span class="line">    newfunc.keywords = keywords</span><br><span class="line">    <span class="keyword">return</span> newfunc</span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo = partial(int, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo.__doc__ = <span class="string">&#x27;Convert base 2 string to an int.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo(<span class="string">&#x27;10010&#x27;</span>)</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调整vm.max_map_count</title>
      <link href="/2020/11/20/max-map-count/"/>
      <url>/2020/11/20/max-map-count/</url>
      
        <content type="html"><![CDATA[<p><code>vm.max_map_count</code>表示一个进程可以拥有的VMA（虚拟内存区块）的数量。</p><p><strong>查看当前值</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -a | grep vm.max_map_count</span><br></pre></td></tr></table></figure><p><strong>修改</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;vm.max_map_count=655350&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vuejs中使用ECharts</title>
      <link href="/2020/11/14/vue-echarts/"/>
      <url>/2020/11/14/vue-echarts/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add echarts @types/echarts</span><br></pre></td></tr></table></figure><h2 id="ECharts-vue文件"><a href="#ECharts-vue文件" class="headerlink" title="ECharts.vue文件"></a>ECharts.vue文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 300px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Component, Prop, Vue, Watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ECharts</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  @Prop(&#123; <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;) &#125;) private options!: echarts.EChartOption | echarts.EChartsResponsiveOption</span></span><br><span class="line">  private _chart?: echarts.ECharts</span><br><span class="line"></span><br><span class="line">  protected mounted () &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.draw()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  @Watch(<span class="string">&#x27;options&#x27;</span>, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span></span><br><span class="line">  private draw () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="built_in">this</span>._chart) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>._chart = echarts.init(<span class="built_in">this</span>.$el <span class="keyword">as</span> HTMLDivElement)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>._chart.setOption(<span class="built_in">this</span>.options)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vuejs </tag>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alfred：使用Python创建Workflow</title>
      <link href="/2020/11/08/alfred-workflow-python/"/>
      <url>/2020/11/08/alfred-workflow-python/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.alfredapp.com/">Alfred</a>是Mac系统上一款专注于效率提升的著名应用，它能帮你快速打开网页、快速进行自定义搜索、查看剪贴板历史、快速查询单词等等。</p><p>我们可以借助于Python的<a href="https://github.com/deanishe/alfred-workflow">Alfred-Workflow</a>库来快速开发自己的workflow。</p><p>具体内容可参考下面两个官方示例：</p><ul><li><a href="https://www.deanishe.net/alfred-workflow/tutorial_1.html">Tutorial Part 1: Creating a Basic Pinboard Workflow</a></li><li><a href="https://www.deanishe.net/alfred-workflow/tutorial_2.html">Tutorial Part 2: Creating a Distribution-Ready Pinboard Workflow</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> alfred </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Fusion中虚拟机的网络设置</title>
      <link href="/2020/11/07/vmware-fusion-networking/"/>
      <url>/2020/11/07/vmware-fusion-networking/</url>
      
        <content type="html"><![CDATA[<h2 id="VMware网络模式"><a href="#VMware网络模式" class="headerlink" title="VMware网络模式"></a>VMware网络模式</h2><p>VMware虚拟机有三种网络模式：</p><ul><li>Bridged - 桥接模式</li><li>NAT - 网络地址转换模式</li><li>Host-Only - 仅主机模式</li></ul><h3 id="Bridged-桥接模式"><a href="#Bridged-桥接模式" class="headerlink" title="Bridged - 桥接模式"></a>Bridged - 桥接模式</h3><p>通过桥接模式网络连接，虚拟机中的虚拟网络适配器可连接到主机系统中的物理网络适配器。虚拟机可通过主机网络适配器连接到主机系统所用的LAN。</p><p>桥接模式网络连接将虚拟机配置为在网络中具有唯一标识，与主机系统相分离，且与主机系统无关。虚拟机可完全参与到网络活动中。它能够访问网络中的其他计算机，也可以被网络中的其他计算机访问，就像是网络中的物理机那样。</p><h3 id="NAT-网络地址转换模式"><a href="#NAT-网络地址转换模式" class="headerlink" title="NAT - 网络地址转换模式"></a>NAT - 网络地址转换模式</h3><p>使用NAT模式网络时，虚拟机在外部网络中不必具有自己的IP地址。主机系统上会建立单独的专用网络。在默认配置中，虚拟机会在此专用网络中通过DHCP服务器获取地址。</p><a id="more"></a><p>虚拟机和主机系统共享一个网络标识，此标识在外部网络中不可见。NAT工作时会将虚拟机在专用网络中的IP地址转换为主机系统的IP地址。当虚拟机发送对网络资源的访问请求时，它会充当网络资源，就像请求来自主机系统一样。</p><p>主机系统在NAT网络上具有虚拟网络适配器。借助该适配器，主机系统可以与虚拟机相互通信。NAT设备可在一个或多个虚拟机与外部网络之间传送网络数据，识别用于每个虚拟机的传入数据包，并将它们发送到正确的目的地。</p><h3 id="Host-Only-仅主机模式"><a href="#Host-Only-仅主机模式" class="headerlink" title="Host-Only - 仅主机模式"></a>Host-Only - 仅主机模式</h3><p>虚拟机和主机系统之间的网络连接由对主机操作系统可见的虚拟网络适配器提供。虚拟DHCP服务器可在仅主机模式网络中提供IP地址。</p><p>在默认配置中，仅主机模式网络中的虚拟机无法连接到Internet。</p><h2 id="VMware-Fusion中虚拟机的网络设置"><a href="#VMware-Fusion中虚拟机的网络设置" class="headerlink" title="VMware Fusion中虚拟机的网络设置"></a>VMware Fusion中虚拟机的网络设置</h2><p>VMware Fusion网络配置文件位于<code>/Library/Preferences/VMware Fusion/</code>目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Library&#x2F;Preferences&#x2F;VMware Fusion&#x2F;networking</span><br><span class="line">&#x2F;Library&#x2F;Preferences&#x2F;VMware Fusion&#x2F;vmnet8&#x2F;dhcpd.conf</span><br><span class="line">&#x2F;Library&#x2F;Preferences&#x2F;VMware Fusion&#x2F;vmnet8&#x2F;nat.conf</span><br><span class="line">&#x2F;Library&#x2F;Preferences&#x2F;VMware Fusion&#x2F;vmnet1&#x2F;dhcpd.conf</span><br></pre></td></tr></table></figure><h3 id="先停止vmware网络服务"><a href="#先停止vmware网络服务" class="headerlink" title="先停止vmware网络服务"></a>先停止vmware网络服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --stop</span><br></pre></td></tr></table></figure><h3 id="修改networking配置文件"><a href="#修改networking配置文件" class="headerlink" title="修改networking配置文件"></a>修改<code>networking</code>配置文件</h3><p>打开<code>networking</code>文件，内容如下，可自行修改其中内容或者添加新的网络配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">VERSION&#x3D;1,0</span><br><span class="line">answer VNET_1_DHCP yes</span><br><span class="line">answer VNET_1_DHCP_CFG_HASH 18A2350F98C82E904AB23D4E76216FD47B9D99FB</span><br><span class="line">answer VNET_1_HOSTONLY_NETMASK 255.255.255.0</span><br><span class="line">answer VNET_1_HOSTONLY_SUBNET 192.168.21.0</span><br><span class="line">answer VNET_1_VIRTUAL_ADAPTER yes</span><br><span class="line">answer VNET_8_DHCP yes</span><br><span class="line">answer VNET_8_DHCP_CFG_HASH A78BA28C18BC23DE29320723366DDB102AD7DF26</span><br><span class="line">answer VNET_8_HOSTONLY_NETMASK 255.255.255.0</span><br><span class="line">answer VNET_8_HOSTONLY_SUBNET 192.168.127.0</span><br><span class="line">answer VNET_8_NAT yes</span><br><span class="line">answer VNET_8_VIRTUAL_ADAPTER yes</span><br></pre></td></tr></table></figure><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --configure</span><br></pre></td></tr></table></figure><p><code>vmnet-cli</code>会根据<code>networking</code>文件的内容自动修改<code>dhcpd.conf</code>、<code>nat.conf</code>文件内容。</p><h3 id="启动网络服务"><a href="#启动网络服务" class="headerlink" title="启动网络服务"></a>启动网络服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --start</span><br></pre></td></tr></table></figure><h3 id="为虚拟机配置静态ip"><a href="#为虚拟机配置静态ip" class="headerlink" title="为虚拟机配置静态ip"></a>为虚拟机配置静态ip</h3><p>打开<code>vmnet8/dhcpd.conf</code>文件，在最后加上一下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">host centos-docker-server &#123;</span><br><span class="line">        hardware ethernet 00:50:56:c0:00:01;</span><br><span class="line">        fixed-address 192.168.127.10;</span><br><span class="line">        option broadcast-address 192.168.127.255;</span><br><span class="line">        option domain-name-servers 192.168.127.2;</span><br><span class="line">        option domain-name local;</span><br><span class="line">        option routers 192.168.127.2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启网络服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --stop</span><br><span class="line">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件刷新</title>
      <link href="/2020/11/02/refresh-vue-component/"/>
      <url>/2020/11/02/refresh-vue-component/</url>
      
        <content type="html"><![CDATA[<p>在特定情况下，如果需要执行刷新操作，有四种可选方案：</p><ol><li>借助<code>router.go(0)</code>方法，刷新整个页面</li><li>使用<code>forceUpdate()</code>方法，刷新当前组件</li><li>使用<code>v-if</code>标记，刷新子组件</li><li>使用<code>:key</code>属性，通过改变<code>key</code>的值来达到刷新子组件的目的</li></ol><a id="more"></a><h2 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate"></a><code>forceUpdate</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;refresh&quot;</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    refresh () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$forceUpdate();  <span class="comment">// 刷新当前组件</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// this.$router.go(0);  // 刷新整个页面</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;refresh&quot;</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SubComponent</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>This is SubComponent!<span class="tag">&lt;/<span class="name">SubComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    flag: <span class="literal">true</span></span></span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line">    refresh () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.flag = <span class="literal">true</span>;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="key"><a href="#key" class="headerlink" title=":key"></a><code>:key</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;refresh&quot;</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SubComponent</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>This is SubComponent!<span class="tag">&lt;/<span class="name">SubComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    key: <span class="built_in">Math</span>.random()</span></span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line">    refresh () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.key = <span class="built_in">Math</span>.random();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django单元测试的几点建议</title>
      <link href="/2020/10/25/django-test/"/>
      <url>/2020/10/25/django-test/</url>
      
        <content type="html"><![CDATA[<p>几天前有朋友问到怎么对Django项目做单元测试，于是，我将以前随手记下的笔记整理了一下。</p><ul><li>测试用例继承<code>django.test.TestCase</code>。</li><li>如果在执行测试用例之前需要初始化全局数据，重写类函数<code>setUpTestData()</code>。</li><li>在测试用例中如果需要批量创建数据，请使用循环一个一个<code>create()</code>，不要使用<code>bulk_create()</code>，因为<code>bulk_create()</code>不会自动<code>save()</code>。</li><li>在测试过程中，灵活使用<code>mock</code>，推荐使用<code>unittest.mock.patch</code>，详细内容参见：<a href="https://docs.python.org/3/library/unittest.mock.html#the-patchers">patchers</a>。</li><li>使用断言<code>assert</code>校验执行结果，不要使用<code>if..else..</code>判断，<code>django.test.TestCase</code>中已经内置一些<code>assert</code>，大家可以自由使用。</li><li>如果被测试的代码中使用了缓存，可以使用<code>django.core.cache.backends.dummy.DummyCache</code>或<code>django.core.cache.backends.locmem.LocMemCache</code>来防止缓存被污染。</li><li>做接口测试时，使用<code>self.client</code>发起请求。</li><li>测试需要登录时，使用<code>self.client.force_login(user)</code>进行登录。</li><li>如果测试需要携带请求头时，可以修改<code>self.client.defaults</code>的值，它是一个<code>dict</code>，直接<code>update</code>就行。</li><li>如果一个<code>app</code>下的测试用例代码非常多的话，建议将<code>tests.py</code>文件改成<code>tests/</code>文件夹。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务注册与发现</title>
      <link href="/2020/10/22/service-registration-and-discovery/"/>
      <url>/2020/10/22/service-registration-and-discovery/</url>
      
        <content type="html"><![CDATA[<p>随着业务的发展，用户的增长，原有的单一系统越来越复杂，越来越庞大。此时，我们可以重新划分业务、拆解应用，使用微服务架构的方式来解决系统性能问题以及业务复杂问题。</p><p>那么什么是微服务？微服务是一种架构概念，旨在通过将功能分解到各个离散的服务中以实现对整理解决方案的解耦。</p><p>在微服务架构中，每个微服务通常有多个实例，每个实例具有不同的位置，而且实例会动态变化（动态伸缩、灾后重建等）。因此在使用微服务架构开发应用时，需要通过服务注册和发现技术解决此问题。</p><ul><li><strong>服务注册</strong>：允许服务实例将当前服务的信息注册到注册中心。</li><li><strong>服务发现</strong>：调用者可以从注册中心查询到服务实例的信息。</li></ul><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>CAP理论是分布式架构中重要理论：</p><ul><li>一致性(Consistency)：所有节点在同一时间具有相同的数据</li><li>可用性(Availability)：保证每个请求不管成功或者失败都有响应</li><li>分隔容忍(Partition tolerance)：系统中任意信息的丢失或失败不会影响系统的继续运作</li></ul><p><code>CAP</code>理论认为在分布式系统只能兼顾其中的两个特性，即只有<code>CA</code>、<code>CP</code>、<code>AP</code>三种情况。</p><a id="more"></a><h2 id="服务注册中心解决方案"><a href="#服务注册中心解决方案" class="headerlink" title="服务注册中心解决方案"></a>服务注册中心解决方案</h2><h3 id="Apache-Zookeeper"><a href="#Apache-Zookeeper" class="headerlink" title="Apache Zookeeper"></a>Apache Zookeeper</h3><p><a href="https://zookeeper.apache.org/">Apache Zookeeper</a>在设计时遵循CP原则，即任何时候对Zookeeper的访问请求能得到一致的数据结果，同时系统对网络分割具备容错性，但是Zookeeper不能保证每次服务请求都是可达的。</p><h3 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h3><p><a href="https://www.consul.io/">Consul</a>是<code>HashiCorp</code>公司推出的开源工具，使用Go语言编写，用于实现分布式系统的服务发现与配置。</p><p>Consul遵循CAP原理中的CP原则，保证了强一致性和分区容错性，且使用的是Raft算法，比Zookeeper使用的Paxos算法更加简单。</p><h3 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h3><p><a href="https://nacos.io/">Nacos</a>是阿里开源的，Nacos支持基于DNS和基于RPC的服务发现。Nacos除了服务的注册发现之外，还支持动态配置服务。动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试中Bug级别划分</title>
      <link href="/2020/10/15/bug-level/"/>
      <url>/2020/10/15/bug-level/</url>
      
        <content type="html"><![CDATA[<h2 id="Bug级别"><a href="#Bug级别" class="headerlink" title="Bug级别"></a>Bug级别</h2><ul><li><strong>Blocker</strong>: <strong>崩溃</strong>：阻碍开发或测试工作的问题；造成系统崩溃、死机、死循环，导致数据库数据丢失，  与数据库连接错误，主要功能丧失，基本模块缺失等问题。如：代码错误、死循环、数据库发生死锁、  重要的一级菜单功能不能使用等（<strong>该问题在测试中较少出现，一旦出现应立即中止当前版本测试</strong>）。</li><li><strong>Critical</strong>: <strong>严重</strong>：系统主要功能部分丧失、数据库保存调用错误、用户数据丢失，  一级功能菜单不能使用但是不影响其他功能的测试。功能设计与需求严重不符，  模块无法启动或调用，程序重启、自动退出，关联程序间调用冲突，安全问题、稳定性等。  如：软件中数据保存后数据库中显示错误，用户所要求的功能缺失，程序接口错误，  数值计算统计错误等（<strong>该等级问题出现在不影响其他功能测试的情况下可以继续该版本测试</strong>）。</li><li><strong>Major</strong>: <strong>一般</strong>：功能没有完全实现但是不影响使用，功能菜单存在缺陷但不会影响系统稳定性。  如：操作时间长、查询时间长、格式错误、边界条件错误，删除没有确认框、数据库表中字段过多等  （<strong>该问题实际测试中存在最多，合理安排解决BUG，解决率关系版本的优化程度</strong>）。</li><li><strong>Minor</strong>: <strong>次要</strong>：界面、性能缺陷，建议类问题，不影响操作功能的执行，可以优化性能的方案等。  如：错别字、界面格式不规范，页面显示重叠、不该显示的要隐藏，描述不清楚，提示语丢失，  文字排列不整齐，光标位置不正确，用户体验感受不好，可以优化性能的方案等  （<strong>此类问题在测试初期较多，优先程度较低；在测试后期出现较少，应及时处理</strong>）。</li></ul><a id="more"></a><h2 id="响应状态错误"><a href="#响应状态错误" class="headerlink" title="响应状态错误"></a>响应状态错误</h2><h3 id="响应状态吗"><a href="#响应状态吗" class="headerlink" title="响应状态吗"></a>响应状态吗</h3><ul><li>2xx: 200, 201, 202, 204</li><li>3xx: 301, 302, 303, 304</li><li>4xx: 400, 401, 403, 404, 405, 410, 422</li><li>5xx: 500, 502, 504</li></ul><h3 id="错误列表"><a href="#错误列表" class="headerlink" title="错误列表"></a>错误列表</h3><table><thead><tr><th>&nbsp;</th><th>BugLevel</th><th>Expect</th><th>Result</th><th>Comments</th></tr></thead><tbody><tr><td>2xx</td><td>Major</td><td>200</td><td>201</td><td>可能由于代码中状态码返回设置错误或文档错误，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>200</td><td>202</td><td>可能由于代码错误导致异步请求，影响功能，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Major</td><td>200</td><td>204</td><td>可能由于代码中状态码返回设置错误或文档错误，应返json但无返回，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Major</td><td>201</td><td>200</td><td>可能由于代码中状态码返回设置错误或文档错误，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>201</td><td>202</td><td>可能由于代码错误导致异步请求，影响功能，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>201</td><td>204</td><td>可能由于代码中状态码返回设置错误或文档错误，应返json但无返回，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Major</td><td>204</td><td>200</td><td>可能由于代码中状态码返回设置错误或文档错误，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Major</td><td>204</td><td>201</td><td>可能由于代码中状态码返回设置错误或文档错误，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>204</td><td>202</td><td>可能由于代码错误导致异步请求，影响功能，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>2xx</td><td>400</td><td></td></tr><tr><td>&nbsp;</td><td>Critical</td><td>2xx</td><td>401, 403</td><td>可能由于代码中身份验证相关错误导致登录失败，影响功能，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>2xx</td><td>404, 410</td><td>可能由于代码与文档中url不符导致，影响功能，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>2xx</td><td>422</td><td>可能由于代码与文档中参数不一致或格式错误导致，影响功能，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Blocker</td><td>2xx</td><td>500</td><td>代码错误，严重影响功能（建议尽快修复）</td></tr><tr><td>3xx</td><td>Major</td><td>3xx</td><td>other3xx</td><td></td></tr><tr><td>4xx</td><td>Major</td><td>400</td><td>2xx</td><td></td></tr><tr><td>&nbsp;</td><td>Major</td><td>400</td><td>3xx</td><td></td></tr><tr><td>&nbsp;</td><td>Minor</td><td>400</td><td>other4xx</td><td></td></tr><tr><td>&nbsp;</td><td>Blocker</td><td>400</td><td>500</td><td></td></tr><tr><td>&nbsp;</td><td>Critical</td><td>401, 403</td><td>2xx</td><td>可能由于代码中身份验证相关错误导致无身份验证，影响功能及安全性，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Minor</td><td>401, 403</td><td>other4xx</td><td>可能由于代码中状态码返回设置错误或文档错误，也可能由于代码与文档中url不符或请求方式错误导致，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Blocker</td><td>401, 403</td><td>500</td><td>代码错误，严重影响功能（建议尽快修复）</td></tr><tr><td>&nbsp;</td><td>Major</td><td>404, 410</td><td>2xx</td><td>可能由于该关闭的资源未关闭导致，影响功能及安全性，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Major</td><td>404, 410</td><td>other4xx</td><td>常见于代码中身份验证相关错误导致的返回403，影响功能，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Blocker</td><td>404, 410</td><td>500</td><td>代码错误，严重影响功能（建议尽快修复）</td></tr><tr><td>&nbsp;</td><td>Major</td><td>405</td><td>2xx</td><td>可能由于该接口存在本不该存在的请求方式（post，get等），影响安全性</td></tr><tr><td>&nbsp;</td><td>Major</td><td>405</td><td>3xx</td><td>可能由于该接口存在本不该存在的请求方式（post，get等），影响安全性</td></tr><tr><td>&nbsp;</td><td>Minor</td><td>405</td><td>other4xx</td><td>可能由于该接口存在本不该存在的请求方式（post，get等），影响安全性</td></tr><tr><td>&nbsp;</td><td>Blocker</td><td>405</td><td>500</td><td>代码错误，严重影响功能（建议尽快修复）</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>422 field</td><td>2xx</td><td>代码参数条件与文档不符，影响功能及安全性，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Major</td><td>422 field</td><td>other4xx</td><td>常见于代码中身份验证相关错误导致的返回403，影响功能，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Blocker</td><td>422 field</td><td>500</td><td>代码错误，严重影响功能（建议尽快修复）</td></tr><tr><td>&nbsp;</td><td>Critical</td><td>422 resource</td><td>2xx</td><td>代码业务逻辑与文档不符，影响功能及安全性，影响json验证及状态码验证</td></tr><tr><td>&nbsp;</td><td>Major</td><td>422 resource</td><td>other4xx</td><td>常见于代码中身份验证相关错误导致的返回403，影响功能，影响状态码验证</td></tr><tr><td>&nbsp;</td><td>Blocker</td><td>422 resource</td><td>500</td><td>代码错误，严重影响功能（建议尽快修复）</td></tr><tr><td>&nbsp;</td><td>Blocker</td><td>422</td><td>500</td><td>代码错误，严重影响功能（建议尽快修复</td></tr><tr><td>5xx</td><td>Minor</td><td>xxx</td><td>502</td><td>服务器问题</td></tr><tr><td>&nbsp;</td><td>Minor</td><td>xxx</td><td>504</td><td>服务器问题</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Prometheus+Grafana服务</title>
      <link href="/2020/10/10/docker-prometheus/"/>
      <url>/2020/10/10/docker-prometheus/</url>
      
        <content type="html"><![CDATA[<h2 id="Prometheus简介"><a href="#Prometheus简介" class="headerlink" title="Prometheus简介"></a>Prometheus简介</h2><p><a href="https://prometheus.io/">Prometheus</a>是一套开源的系统监控报警框架。它启发于Google的borgmon监控系统，由工作在SoundCloud的google前员工在2012年创建，作为社区开源项目进行开发，并于2015年正式发布。2016年，Prometheus正式加入Cloud Native Computing Foundation，成为受欢迎度仅次于Kubernetes的项目。</p><img src="/images/docker-prometheus.png" style="max-width: 80%;"><a id="more"></a><h2 id="Grafana简介"><a href="#Grafana简介" class="headerlink" title="Grafana简介"></a>Grafana简介</h2><p><a href="https://grafana.com/">Grafana</a>是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。</p><p><video controls autoplay src="/images/docker-grafana.mp4" style="max-width: 80%;"></video></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>创建Prometheus配置文件<code>prometheus.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">api_version:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> []</span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">prometheus</span></span><br><span class="line">  <span class="attr">honor_timestamps:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/metrics</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">localhost:9090</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">node</span></span><br><span class="line">  <span class="attr">honor_timestamps:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">scrape_timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">metrics_path:</span> <span class="string">/metrics</span></span><br><span class="line">  <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_exporter:9100</span></span><br></pre></td></tr></table></figure><p>创建<code>docker-compose.yaml</code>文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9090</span><span class="string">:9090</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--config.file=/etc/prometheus/prometheus.yaml</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus.yaml:/etc/prometheus/prometheus.yaml</span></span><br><span class="line">  <span class="attr">node_exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--path.rootfs=/host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/host:ro,rslave</span></span><br></pre></td></tr></table></figure><p>使用<code>docker-compose up -d</code>命令启动服务。</p><h2 id="配置Grafana"><a href="#配置Grafana" class="headerlink" title="配置Grafana"></a>配置Grafana</h2><p>浏览器打开 <a href="http://localhost:3000/">http://localhost:3000/</a> ，使用默认账号<code>admin/admin</code>登录。然后添加Prometheus数据源，并导入默认的Dashboards。</p><p><video controls autoplay src="/images/docker-grafana-prometheus.mp4" style="max-width: 80%;"></video></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> prometheus </tag>
            
            <tag> grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建ELK平台</title>
      <link href="/2020/10/10/docker-elk/"/>
      <url>/2020/10/10/docker-elk/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.elastic.co/cn/elasticsearch/">Elasticsearch</a>: 一个分布式、RESTful风格的搜索和数据分析引擎</li><li><a href="https://www.elastic.co/cn/kibana/">Kibana</a>: 一个免费且开放的用户界面，能够对数据进行可视化</li><li><a href="https://www.elastic.co/cn/logstash/">Logstash</a>: 服务器端数据处理管道，能够从多个来源采集数据，转换数据，然后将数据发送到指定的存储库中</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.9.2</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">http://elasticsearch:9200</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_USERNAME:</span> <span class="string">elastic</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_PASSWORD:</span> <span class="string">EA238970DA384AA3A308FB692714AA1B</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.9.2</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTIC_PASSWORD:</span> <span class="string">EA238970DA384AA3A308FB692714AA1B</span></span><br><span class="line">      <span class="attr">XPACK_LICENSE_SELF_GENERATED_TYPE:</span> <span class="string">basic</span></span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:7.9.2</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9600</span><span class="string">:9600</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">XPACK_MONITORING_ELASTICSEARCH_HOSTS:</span> <span class="string">http://elasticsearch:9200</span></span><br><span class="line">      <span class="attr">XPACK_MONITORING_ELASTICSEARCH_USERNAME:</span> <span class="string">elastic</span></span><br><span class="line">      <span class="attr">XPACK_MONITORING_ELASTICSEARCH_PASSWORD:</span> <span class="string">EA238970DA384AA3A308FB692714AA1B</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> elk </tag>
            
            <tag> elasticsearch </tag>
            
            <tag> kibana </tag>
            
            <tag> logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Django数据库连接</title>
      <link href="/2020/10/05/django-db-connections/"/>
      <url>/2020/10/05/django-db-connections/</url>
      
        <content type="html"><![CDATA[<p>Django程序在接收到请求之后，会在第一次访问数据库时创建连接，到请求结束时关闭连接。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/core/handlers/wsgi.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span>(<span class="params">base.BaseHandler</span>):</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, environ, start_response</span>):</span></span><br><span class="line">        set_script_prefix(get_script_name(environ))</span><br><span class="line">        <span class="comment"># 请求开始，触发request_started信号</span></span><br><span class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">        request = self.request_class(environ)</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        response._handler_class = self.__class__</span><br><span class="line"></span><br><span class="line">        status = <span class="string">&#x27;%d %s&#x27;</span> % (response.status_code, response.reason_phrase)</span><br><span class="line">        response_headers = [</span><br><span class="line">            *response.items(),</span><br><span class="line">            *((<span class="string">&#x27;Set-Cookie&#x27;</span>, c.output(header=<span class="string">&#x27;&#x27;</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> response.cookies.values()),</span><br><span class="line">        ]</span><br><span class="line">        start_response(status, response_headers)</span><br><span class="line">        <span class="keyword">if</span> getattr(response, <span class="string">&#x27;file_to_stream&#x27;</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> environ.get(<span class="string">&#x27;wsgi.file_wrapper&#x27;</span>):</span><br><span class="line">            <span class="comment"># If `wsgi.file_wrapper` is used the WSGI server does not call</span></span><br><span class="line">            <span class="comment"># .close on the response, but on the file wrapper. Patch it to use</span></span><br><span class="line">            <span class="comment"># response.close instead which takes care of closing all files.</span></span><br><span class="line">            response.file_to_stream.close = response.close</span><br><span class="line">            response = environ[<span class="string">&#x27;wsgi.file_wrapper&#x27;</span>](response.file_to_stream, response.block_size)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/http/response.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpResponseBase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> closer <span class="keyword">in</span> self._resource_closers:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                closer()</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># Free resources that were still referenced.</span></span><br><span class="line">        self._resource_closers.clear()</span><br><span class="line">        self.closed = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 请求结束，触发request_finished信号</span></span><br><span class="line">        signals.request_finished.send(sender=self._handler_class)</span><br></pre></td></tr></table></figure><p>通过上面两段代码可以看出，Django会在请求开始触发<code>request_started</code>信号，在请求结束触发<code>request_finished</code>信号。这两个信号的作用是什么呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django/db/__init__.py</span></span><br><span class="line"><span class="comment"># Register an event to reset saved queries when a Django request is started.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_queries</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> conn <span class="keyword">in</span> connections.all():</span><br><span class="line">        conn.queries_log.clear()</span><br><span class="line"></span><br><span class="line">signals.request_started.connect(reset_queries)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register an event to reset transaction state and close connections past</span></span><br><span class="line"><span class="comment"># their lifetime.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_old_connections</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> conn <span class="keyword">in</span> connections.all():</span><br><span class="line">        conn.close_if_unusable_or_obsolete()</span><br><span class="line"></span><br><span class="line">signals.request_started.connect(close_old_connections)</span><br><span class="line">signals.request_finished.connect(close_old_connections)</span><br></pre></td></tr></table></figure><p>不难看出，<code>request_started</code>、<code>request_finished</code>这两个信号都是遍历并关闭<code>connections</code>对象中的连接。<code>connections</code>是一个<code>ConnectionHandler</code>对象，它用于管理数据库连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectionHandler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, databases=None</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        databases is an optional dictionary of database definitions (structured</span></span><br><span class="line"><span class="string">        like settings.DATABASES).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._databases = databases</span><br><span class="line">        <span class="comment"># Connections needs to still be an actual thread local, as it&#x27;s truly</span></span><br><span class="line">        <span class="comment"># thread-critical. Database backends should use @async_unsafe to protect</span></span><br><span class="line">        <span class="comment"># their code from async contexts, but this will give those contexts</span></span><br><span class="line">        <span class="comment"># separate connections in case it&#x27;s needed as well. There&#x27;s no cleanup</span></span><br><span class="line">        <span class="comment"># after async contexts, though, so we don&#x27;t allow that if we can help it.</span></span><br><span class="line">        self._connections = Local(thread_critical=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, alias</span>):</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self._connections, alias):</span><br><span class="line">            <span class="keyword">return</span> getattr(self._connections, alias)</span><br><span class="line"></span><br><span class="line">        self.ensure_defaults(alias)</span><br><span class="line">        self.prepare_test_settings(alias)</span><br><span class="line">        db = self.databases[alias]</span><br><span class="line">        <span class="comment"># 这里非常关键，它会先load_backend，然后创建连接，之后再将连接放入thread local中进行管理</span></span><br><span class="line">        backend = load_backend(db[<span class="string">&#x27;ENGINE&#x27;</span>])</span><br><span class="line">        conn = backend.DatabaseWrapper(db, alias)</span><br><span class="line">        setattr(self._connections, alias, conn)</span><br><span class="line">        <span class="keyword">return</span> conn</span><br></pre></td></tr></table></figure><p>将上面代码串联起来，便可以得出结论：接收到请求之后，在第一次访问数据库时创建连接，在请求结束时关闭连接。</p><h2 id="与Celery结合"><a href="#与Celery结合" class="headerlink" title="与Celery结合"></a>与Celery结合</h2><p>Celery处于多进程模式下，会出现一个致命问题，子进程fork出来后，它会与父进程共用相同的数据库连接，这样极有可能导致连接不能被正常关闭。</p><p>可以通过手动关闭连接来解决这个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.signals <span class="keyword">import</span> task_prerun, task_postrun, worker_process_init</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> close_old_connections</span><br><span class="line"></span><br><span class="line">worker_process_init.connect(close_old_connections)</span><br><span class="line">task_prerun.connect(close_old_connections)</span><br><span class="line">task_postrun.connect(close_old_connections)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串书写规范</title>
      <link href="/2020/10/04/string-case/"/>
      <url>/2020/10/04/string-case/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Case</th><th>Description</th><th>Example</th><th>Resule</th></tr></thead><tbody><tr><td>camel case</td><td>Transform into a string with the separator denoted by the next word capitalized</td><td><code>test string</code></td><td><code>testString</code></td></tr><tr><td>capital case</td><td>Transform into a space separated string with each word capitalized</td><td><code>test string</code></td><td><code>Test String</code></td></tr><tr><td>constant case</td><td>Transform into upper case string with an underscore between words</td><td><code>test string</code></td><td><code>TEST_STRING</code></td></tr><tr><td>dot case</td><td>Transform into a lower case string with a period between words</td><td><code>test string</code></td><td><code>test.string</code></td></tr><tr><td>header case</td><td>Transform into a dash separated string of capitalized words</td><td><code>test string</code></td><td><code>Test-String</code></td></tr><tr><td>no case</td><td>Transform into a lower cased string with spaces between words</td><td><code>test string</code></td><td><code>test string</code></td></tr><tr><td>param case</td><td>Transform into a lower cased string with dashes between words</td><td><code>test string</code></td><td><code>test-string</code></td></tr><tr><td>kebab case</td><td>Transform into a lower cased string with dashes between words</td><td><code>test string</code></td><td><code>test-string</code></td></tr><tr><td>pascal case</td><td>Transform into a string of capitalized words without separators</td><td><code>test string</code></td><td><code>TestString</code></td></tr><tr><td>path case</td><td>Transform into a lower case string with slashes between words</td><td><code>test string</code></td><td><code>test/string</code></td></tr><tr><td>sentence case</td><td>Transform into a lower case with spaces between words, then capitalize the string</td><td><code>testString</code></td><td><code>Test string</code></td></tr><tr><td>snake case</td><td>Transform into a lower case string with underscores between words</td><td><code>test string</code></td><td><code>test_string</code></td></tr><tr><td>title case</td><td>Transform a string into title case following English rules</td><td><code>test string</code></td><td><code>Test String</code></td></tr><tr><td>swap case</td><td>Transform a string by swapping every character from upper to lower case, or lower to upper case</td><td><code>test string</code></td><td><code>tEST sTRING</code></td></tr><tr><td>lower case</td><td>Transforms the string to lower case</td><td><code>TEST STRING</code></td><td><code>test string</code></td></tr><tr><td>lower case first</td><td>Transforms the string with the first character in lower cased</td><td><code>TEST STRING</code></td><td><code>tEST STRING</code></td></tr><tr><td>upper case</td><td>Transforms the string to upper case</td><td><code>test string</code></td><td><code>TEST STRING</code></td></tr><tr><td>upper case first</td><td>Transforms the string with the first character in upper cased</td><td><code>test string</code></td><td><code>Test string</code></td></tr></tbody></table><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/blakeembrey/change-case">https://github.com/blakeembrey/change-case</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署VtigerCRM</title>
      <link href="/2020/10/02/docker-vtigercrm/"/>
      <url>/2020/10/02/docker-vtigercrm/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.vtiger.com/">VtigerCRM</a>是一套基于Web以销售能力自动化(SFA)为主的客户关系管理系统(CRM)。它基于是<a href="https://www.sugarcrm.com/">SugarCRM</a>专业版(SPL1.1.2)开发的一个衍生版本。</p><p><a href="https://www.vtiger.com/">VtigerCRM</a>系统是一个适合中小企业的客户管理工具，帮助管理公司业务，从市场、销售、采购、库存、客服等全程跟踪客户，最大可能获得订单，提高客户满意度。比较适合销售团队，贸易公司，服务型企业使用。部分作用如下：</p><ul><li>统一记录与管理客户资料，不再担心资料丢失</li><li>随时随地搜索查找客户资料，及时联系客户</li><li>自动化的统计分析您的客户信息、销售情况等</li><li>全面掌握公司业务信息，避免人员离职等导致客户流失</li><li>通过CRM系统的工作流使公司业务流程自动化</li></ul><a id="more"></a><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.4</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y libpng-dev libjpeg-dev libkrb5-dev libssl-dev libc-client2007e-dev \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-configure gd \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-install gd mysqli \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-configure imap --with-imap-ssl --with-kerberos \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-install imap opcache \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting the reccomended for opcache</span></span><br><span class="line"><span class="comment"># https://secure.php.net/manual/en/opcache.installation.php</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> &#123; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;opcache.memory_consumption=128&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;opcache.interned_strings_buffer=8&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;opcache.max_accelerated_files=4000&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;opcache.revalidate_freq=60&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;opcache.fast_shutdown=1&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;opcache.enable_cli=1&#x27;</span>; \</span></span><br><span class="line"><span class="bash">    &#125; &gt; /usr/<span class="built_in">local</span>/etc/php/conf.d/opcache-recommended.ini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting the recommended for vtiger</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> &#123; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;display_errors=On&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;max_execution_time=0&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;error_reporting=E_WARNING &amp; ~E_NOTICE &amp; ~E_DEPRECATED&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;log_errors=Off&#x27;</span>; \</span></span><br><span class="line"><span class="bash">        <span class="built_in">echo</span> <span class="string">&#x27;short_open_tag=On&#x27;</span>; \</span></span><br><span class="line"><span class="bash">    &#125; &gt; /usr/<span class="built_in">local</span>/etc/php/conf.d/vtiger-recommended.ini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /var/www/ &amp;&amp; curl -o vtigercrm.tar.gz -SL https://sourceforge.net/projects/vtigercrm/files/latest/download \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar xvf vtigercrm.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chown -R www-data:www-data vtigercrm \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod -R 775 vtigercrm \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/\$defaultParameters\[&#x27;db_hostname&#x27;\]/getenv(&#x27;DB_HOSTNAME&#x27;)/&quot;</span> vtigercrm/modules/Install/views/Index.php \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/\$defaultParameters\[&#x27;db_username&#x27;\]/getenv(&#x27;DB_USERNAME&#x27;)/&quot;</span> vtigercrm/modules/Install/views/Index.php \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/\$defaultParameters\[&#x27;db_password&#x27;\]/getenv(&#x27;DB_PASSWORD&#x27;)/&quot;</span> vtigercrm/modules/Install/views/Index.php \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s/\$defaultParameters\[&#x27;db_name&#x27;\]/getenv(&#x27;DB_NAME&#x27;)/&quot;</span> vtigercrm/modules/Install/views/Index.php \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf html/ &amp;&amp; mv vtigercrm html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /var/www/html/storage</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;apache2-foreground&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="编写docker-compose-yaml文件"><a href="#编写docker-compose-yaml文件" class="headerlink" title="编写docker-compose.yaml文件"></a>编写docker-compose.yaml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">vtigercrm:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">vtigercrm</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vtigercrm-db</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">23867</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">DB_HOSTNAME:</span> <span class="string">vtigercrm-db</span></span><br><span class="line">      <span class="attr">DB_USERNAME:</span> <span class="string">vtigercrm</span></span><br><span class="line">      <span class="attr">DB_PASSWORD:</span> <span class="string">vtigercrm</span></span><br><span class="line">      <span class="attr">DB_NAME:</span> <span class="string">vtigercrm</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./storage:/var/www/html/storage</span></span><br><span class="line">  <span class="attr">vtigercrm-db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">vtigercrm-db</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="string">--sql_mode=&quot;&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">160544A82BF449C6899A59A1E8FD6D2C</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">vtigercrm</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">vtigercrm</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">vtigercrm</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br></pre></td></tr></table></figure><h3 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><h2 id="VtigerCRM初始化"><a href="#VtigerCRM初始化" class="headerlink" title="VtigerCRM初始化"></a>VtigerCRM初始化</h2><p>打开网页 <a href="http://localhost/">http://localhost/</a> ，按照提示进行初始化操作：</p><p><video controls autoplay src="/images/docker-vtigercrm.mp4"></video></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> vtigercrm </tag>
            
            <tag> crm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：重载运算符</title>
      <link href="/2020/09/26/python-operator-overloading/"/>
      <url>/2020/09/26/python-operator-overloading/</url>
      
        <content type="html"><![CDATA[<p>关于Python运算符重载，大家可以参考<a href="https://docs.python.org/3/reference/datamodel.html">Data model</a>。</p><h2 id="重载一元运算符"><a href="#重载一元运算符" class="headerlink" title="重载一元运算符"></a>重载一元运算符</h2><table><thead><tr><th>运算符</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>+</code></td><td><code>__pos__</code></td><td>一元取正算术运算符</td></tr><tr><td><code>-</code></td><td><code>__neg__</code></td><td>一元取负算术运算符</td></tr><tr><td><code>~</code></td><td><code>__invert__</code></td><td>对整数按位取反</td></tr></tbody></table><a id="more"></a><h2 id="重载二元运算符"><a href="#重载二元运算符" class="headerlink" title="重载二元运算符"></a>重载二元运算符</h2><table><thead><tr><th>运算符</th><th>正向函数</th><th>反向函数</th><th>增量函数</th><th>说明</th></tr></thead><tbody><tr><td><code>+</code></td><td><code>__add__</code></td><td><code>__radd__</code></td><td><code>__iadd__</code></td><td>加法或拼接</td></tr><tr><td><code>-</code></td><td><code>__sub__</code></td><td><code>__rsub__</code></td><td><code>__isub__</code></td><td>减法</td></tr><tr><td><code>*</code></td><td><code>__mul__</code></td><td><code>__rmul__</code></td><td><code>__imul__</code></td><td>乘法或重复复制</td></tr><tr><td><code>/</code></td><td><code>__truediv__</code></td><td><code>__rtruediv__</code></td><td><code>__itruediv__</code></td><td>除法</td></tr><tr><td><code>//</code></td><td><code>__floordiv__</code></td><td><code>__rfloordiv__</code></td><td><code>__ifloordiv__</code></td><td>整除</td></tr><tr><td><code>%</code></td><td><code>__mod__</code></td><td><code>__rmod__</code></td><td><code>__imod__</code></td><td>取模</td></tr><tr><td><code>**</code>, <code>pow()</code></td><td><code>__pow__</code></td><td><code>__rpow__</code></td><td><code>__ipow__</code></td><td>取幂</td></tr><tr><td><code>@</code></td><td><code>__matmul__</code></td><td><code>__rmatmul__</code></td><td><code>__imatmul__</code></td><td>矩阵乘法</td></tr><tr><td><code>&amp;</code></td><td><code>__and__</code></td><td><code>__rand__</code></td><td><code>__iand__</code></td><td>位与</td></tr><tr><td><code>|</code></td><td><code>__or__</code></td><td><code>__ror__</code></td><td><code>__ior__</code></td><td>位或</td></tr><tr><td><code>^</code></td><td><code>__xor__</code></td><td><code>__rxor__</code></td><td><code>__ixor__</code></td><td>位异或</td></tr><tr><td><code>&lt;&lt;</code></td><td><code>__lshift__</code></td><td><code>__rlshift__</code></td><td><code>__ilshift__</code></td><td>按位左移</td></tr><tr><td><code>&gt;&gt;</code></td><td><code>__rshift__</code></td><td><code>__rrshift__</code></td><td><code>__irshift__</code></td><td>按位右移</td></tr></tbody></table><p>在这里说明一下Python解释器的执行机制。对于表达式<code>a + b</code>来说：</p><ul><li>如果<code>a</code>有<code>__add__</code>函数且返回值不是<code>NotImplemented</code>(一个特殊的单例值，不是异常)，调用<code>a.__add__(b)</code>，然后返回结果；</li><li>如果<code>a</code>没有<code>__add__</code>函数，<code>b</code>有<code>__radd__</code>函数且返回值不是<code>NotImplemented</code>，调用<code>b.__radd__(a)</code>，然后返回结果；</li><li>如果<code>b</code>没有<code>__radd__</code>函数或者返回值是<code>NotImplemented</code>，抛出<code>TypeError</code>异常，并在错误消息中指明操作数类型不支持。</li></ul><p>关于增量函数，对于表达式<code>a += b</code>来说：</p><ul><li>如果<code>a</code>没有实现<code>__iadd__</code>函数，那么<code>a += b</code>等价于<code>a = a + b</code>。</li><li>如果<code>a</code>实现了<code>__iadd__</code>函数，调用<code>a.__iadd__(b)</code>函数，它会直接修改左操作数<code>a</code>，而不是创建新对象作为返回值。</li></ul><h2 id="重载比较运算符"><a href="#重载比较运算符" class="headerlink" title="重载比较运算符"></a>重载比较运算符</h2><table><thead><tr><th>运算符</th><th>正向函数</th><th>反向函数</th><th>后备机制</th></tr></thead><tbody><tr><td><code>==</code></td><td><code>__eq__</code></td><td><code>__eq__</code></td><td>返回<code>id(a) == id(b)</code></td></tr><tr><td><code>!=</code></td><td><code>__ne__</code></td><td><code>__ne__</code></td><td>返回<code>not (a == b)</code></td></tr><tr><td><code>&gt;</code></td><td><code>__gt__</code></td><td><code>__lt__</code></td><td>抛出<code>TypeError</code></td></tr><tr><td><code>&lt;</code></td><td><code>__lt__</code></td><td><code>__gt__</code></td><td>抛出<code>TypeError</code></td></tr><tr><td><code>&gt;=</code></td><td><code>__ge__</code></td><td><code>__le__</code></td><td>抛出<code>TypeError</code></td></tr><tr><td><code>&lt;=</code></td><td><code>__le__</code></td><td><code>__ge__</code></td><td>抛出<code>TypeError</code></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Referrer-Policy</title>
      <link href="/2020/09/22/referrer-policy/"/>
      <url>/2020/09/22/referrer-policy/</url>
      
        <content type="html"><![CDATA[<p>这两天发现网页浏览量显示不对，深入调查后发现是<code>Chrome 85</code>对<code>Referrer-Policy</code>进行了调整，将原来默认的<code>no-referrer-when-downgrade</code>调整为<code>strict-origin-when-cross-origin</code>。</p><h2 id="什么是Referer"><a href="#什么是Referer" class="headerlink" title="什么是Referer"></a>什么是Referer</h2><p><code>Referer</code>请求头包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用<code>Referer</code>请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。</p><p>需要注意的是<code>referer</code>实际上是<code>referrer</code>误拼写。参见<a href="https://zh.wikipedia.org/wiki/HTTP_referer">HTTP referer on Wikipedia</a>来获取更详细的信息。</p><h2 id="什么是Referrer-Policy"><a href="#什么是Referrer-Policy" class="headerlink" title="什么是Referrer-Policy"></a>什么是Referrer-Policy</h2><p><code>Referrer-Policy</code>首部用来监管哪些访问来源信息——会在<code>Referer</code>中发送——应该被包含在生成的请求当中。</p><ul><li><code>no-referrer</code>: 整个<code>Referer</code>首部会被移除。访问来源信息不随着请求一起发送。</li><li><code>no-referrer-when-downgrade</code>: 在没有指定任何策略的情况下用户代理的默认行为。在同等安全级别的情况下，引用页面的地址会被发送(HTTPS-&gt;HTTPS)，但是在降级的情况下不会被发送(HTTPS-&gt;HTTP)。</li><li><code>origin</code>: 在任何情况下，仅发送文件的源作为引用地址。例如 <a href="https://example.com/page.html">https://example.com/page.html</a> 会将 <a href="https://example.com/">https://example.com/</a> 作为引用地址。</li><li><code>origin-when-cross-origin</code>: 对于同源的请求，会发送完整的URL作为引用地址，但是对于非同源请求仅发送文件的源。<a id="more"></a></li><li><code>same-origin</code>: 对于同源的请求会发送引用地址，但是对于非同源请求则不发送引用地址信息。</li><li><code>strict-origin</code>: 在同等安全级别的情况下，发送文件的源作为引用地址(HTTPS-&gt;HTTPS)，但是在降级的情况下不会发送(HTTPS-&gt;HTTP)。</li><li><code>strict-origin-when-cross-origin</code>: 对于同源的请求，会发送完整的URL作为引用地址；在同等安全级别的情况下，发送文件的源作为引用地址(HTTPS-&gt;HTTPS)；在降级的情况下不发送此首部(HTTPS-&gt;HTTP)。</li><li><code>unsafe-url</code>: 无论是同源请求还是非同源请求，都发送完整的URL（移除参数信息之后）作为引用地址。</li></ul><h2 id="应对Chrome-85的调整"><a href="#应对Chrome-85的调整" class="headerlink" title="应对Chrome 85的调整"></a>应对Chrome 85的调整</h2><p>两种方法：</p><ul><li>为web服务器添加<code>Referrer-Policy</code>响应头，将值设为<code>no-referrer-when-downgrade</code>。</li><li>在html页面中添加<code>meta</code>元素：<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer-when-downgrade&quot;&gt;</code>。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vee-validate快速入门</title>
      <link href="/2020/09/19/vee-validate/"/>
      <url>/2020/09/19/vee-validate/</url>
      
        <content type="html"><![CDATA[<p><a href="https://logaretm.github.io/vee-validate/">vee-validate</a>是<a href="https://cn.vuejs.org/">vuejs</a>的表单验证库，它内置了许多规则，并且支持自定义规则。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add vee-validate</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">npm install vee-validate --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>加载components并导入<a href="https://logaretm.github.io/vee-validate/guide/rules.html#rules">rules</a>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ValidationObserver, ValidationProvider, extend &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rules <span class="keyword">from</span> <span class="string">&#x27;vee-validate/dist/rules&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; messages &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate/dist/locale/zh_CN.json&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;ValidationObserver&#x27;</span>, ValidationObserver)</span><br><span class="line">Vue.component(<span class="string">&#x27;ValidationProvider&#x27;</span>, ValidationProvider)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [rule, validation] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(rules)) &#123;</span><br><span class="line">    extend(rule, &#123;</span><br><span class="line">        ...validation,</span><br><span class="line">        message: (messages <span class="keyword">as</span> &#123; [key: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;)[rule]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>具体用法参见<a href="https://logaretm.github.io/vee-validate/guide/forms.html">Handling Forms</a>，下面是两个常用例子：</p><h3 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ValidationObserver</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; invalid &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ValidationProvider</span> <span class="attr">name</span>=<span class="string">&quot;E-mail&quot;</span> <span class="attr">rules</span>=<span class="string">&quot;required|email&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; errors &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ValidationProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ValidationProvider</span> <span class="attr">name</span>=<span class="string">&quot;First Name&quot;</span> <span class="attr">rules</span>=<span class="string">&quot;required|alpha&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; errors &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ValidationProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ValidationProvider</span> <span class="attr">name</span>=<span class="string">&quot;Last Name&quot;</span> <span class="attr">rules</span>=<span class="string">&quot;required|alpha&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; errors &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ValidationProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;invalid&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ValidationObserver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    email: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    firstName: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    lastName: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onSubmit () &#123;</span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;Form has been submitted!&#x27;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">span &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Validate-Before-Submit"><a href="#Validate-Before-Submit" class="headerlink" title="Validate Before Submit"></a>Validate Before Submit</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ValidationObserver</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; handleSubmit &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;handleSubmit(onSubmit)&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ValidationProvider</span> <span class="attr">name</span>=<span class="string">&quot;E-mail&quot;</span> <span class="attr">rules</span>=<span class="string">&quot;required|email&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; errors &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ValidationProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ValidationProvider</span> <span class="attr">name</span>=<span class="string">&quot;First Name&quot;</span> <span class="attr">rules</span>=<span class="string">&quot;required|alpha&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; errors &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ValidationProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ValidationProvider</span> <span class="attr">name</span>=<span class="string">&quot;Last Name&quot;</span> <span class="attr">rules</span>=<span class="string">&quot;required|alpha&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; errors &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ValidationProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ValidationObserver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  data: <span class="function">() =&gt;</span> (&#123;</span></span><br><span class="line"><span class="javascript">    firstName: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    lastName: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    email: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onSubmit () &#123;</span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;Form has been submitted!&#x27;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;stylus&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">span &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在typescript中引入json文件</title>
      <link href="/2020/09/15/typescript-json/"/>
      <url>/2020/09/15/typescript-json/</url>
      
        <content type="html"><![CDATA[<p>直接在typescript中导入json会抛出如下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TS2732: Cannot find module ‘***.json&apos;. Consider using &apos;--resolveJsonModule&apos; to import module with &apos;.json&apos; extension</span><br></pre></td></tr></table></figure><p>要避免产生这个异常，你需要在<code>tsconfig.json</code>中配置如下两个属性：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"resolveJsonModule": true,</span><br><span class="line">"esModuleInterop": true,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vue-cli快速创建项目</title>
      <link href="/2020/09/12/vue-create/"/>
      <url>/2020/09/12/vue-create/</url>
      
        <content type="html"><![CDATA[<p>首先安装<code>vue-cli</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>然后使用<code>vue create &lt;app-name&gt;</code>创建项目：</p><p><video controls autoplay src="/images/vue-create.mp4" style="max-width: 80%;"></video></p><p><strong>注意：</strong>使用<code>vue create .</code>表示在当前目录下创建项目。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Webpack DevServer时捕获「Invalid Host header」异常</title>
      <link href="/2020/09/10/webpack-invalid-host-header/"/>
      <url>/2020/09/10/webpack-invalid-host-header/</url>
      
        <content type="html"><![CDATA[<p>当我使用<code>nginx</code>反向代理到<code>vue service</code>时，产生了一个<code>Invalid Host header</code>异常。</p><p>经过查找，发现对<code>Host Header</code>检查是<a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener">Webpack DevServer</a>的一种特性。</p><p>可以通过设置<a href="https://webpack.js.org/configuration/dev-server/#devserverdisablehostcheck" target="_blank" rel="noopener">devServer.disableHostCheck</a>或<a href="https://webpack.js.org/configuration/dev-server/#devserverallowedhosts" target="_blank" rel="noopener">devServer.allowedHosts</a>这两种方式中的一种来消除异常。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">        allowedHosts: [<span class="string">'.host.com'</span>, <span class="string">'host2.com'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他有关使用<a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener">Webpack DevServer</a>的服务都可以使用相同的办法处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>身份证号说明</title>
      <link href="/2020/09/05/identity/"/>
      <url>/2020/09/05/identity/</url>
      
        <content type="html"><![CDATA[<p>身份证号是由17位数字加1位校验码组成。</p><ul><li>其中前6位代表所在地区（省、市、区县）的<a href="http://www.mca.gov.cn/article/sj/xzqh/" target="_blank" rel="noopener">行政区划代码</a></li><li>接下来的8位是生日（年、月、日）</li><li>再接下来的3位代表顺序码，用于防止同一个地区同一天出生的人产生重号，其中偶数代表男，奇数代表女</li><li>最后1位是校验码</li></ul><p><strong>校验码的计算</strong></p><p>将前17位每一位分别乘以对应的加权因子，求和之后对11取余，然后通过余数查找对应校验码。</p><p>加权因子：</p><table><thead><tr><th>位置序号</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th><th>16</th><th>17</th></tr></thead><tbody><tr><td>加权因子</td><td>7</td><td>9</td><td>10</td><td>5</td><td>8</td><td>4</td><td>2</td><td>1</td><td>6</td><td>3</td><td>7</td><td>9</td><td>10</td><td>5</td><td>8</td><td>4</td><td>2</td></tr></tbody></table><p>校验码：</p><table><thead><tr><th>余数</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>校验码</td><td>1</td><td>0</td><td>X</td><td>9</td><td>8</td><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td></tr></tbody></table><p><strong>关于15位身份证号</strong></p><p>我国早期的身份证号是由15位数字组成，可按下面规则升18位身份证号：</p><ul><li>在第6位后面添加两位（生日年份的前两位，基本上等于添加19）</li><li>最后添加一位校验码，以前面17位计算生成。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose引用环境变量</title>
      <link href="/2020/08/29/docker-compose-environment/"/>
      <url>/2020/08/29/docker-compose-environment/</url>
      
        <content type="html"><![CDATA[<h2 id="Compose-CLI环境变量"><a href="#Compose-CLI环境变量" class="headerlink" title="Compose CLI环境变量"></a>Compose CLI环境变量</h2><p>可以使用环境变量来配置Docker Compose CLI。例如<code>COMPOSE_PROJECT_NAME</code>、<code>COMPOSE_FILE</code>等。更多设置请参考<a href="https://docs.docker.com/compose/reference/envvars/" target="_blank" rel="noopener"></a>。</p><h2 id="在compose-files中引用环境变量"><a href="#在compose-files中引用环境变量" class="headerlink" title="在compose files中引用环境变量"></a>在compose files中引用环境变量</h2><p>我们可以在compose file中直接引用环境变量：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">"webapp:$&#123;TAG&#125;"</span></span><br></pre></td></tr></table></figure><p>可以通过以下两种方式设置环境变量：</p><ol><li><p>创建环境变量文件，然后使用<code>env-file</code>选项设置：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat .env.prod</span><br><span class="line">TAG=1.1.0</span><br><span class="line">$ docker-compose --env-file .env.prod up -d</span><br></pre></td></tr></table></figure></li><li><p>直接在Shell环境中设置环境变量：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TAG=1.1.0</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p>需要注意的是，如果没有设置环境变量，那么值将会是一个空字符串，在这种情况下，可以为该环境变量设置一个默认值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">"webapp:$&#123;TAG:-1.1.0&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="将环境变量传递给容器"><a href="#将环境变量传递给容器" class="headerlink" title="将环境变量传递给容器"></a>将环境变量传递给容器</h2><h3 id="使用environment为容器设置环境变量"><a href="#使用environment为容器设置环境变量" class="headerlink" title="使用environment为容器设置环境变量"></a>使用<code>environment</code>为容器设置环境变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DEBUG=1</span></span><br></pre></td></tr></table></figure><h3 id="使用env-file为容器设置环境变量"><a href="#使用env-file为容器设置环境变量" class="headerlink" title="使用env_file为容器设置环境变量"></a>使用<code>env_file</code>为容器设置环境变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">env_file:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.env.prod</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL &#39;NOT IN&#39; 子查询</title>
      <link href="/2020/08/21/postgresql-not-in-subquery/"/>
      <url>/2020/08/21/postgresql-not-in-subquery/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一个奇怪的问题，就是在使用<code>NOT IN</code>操作时后面跟一个子查询，发现始终查询不到结果，但是使用<code>IN</code>操作能够查询到结果。SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> parking_records</span><br><span class="line"><span class="keyword">WHERE</span> parking_id = <span class="string">'1'</span></span><br><span class="line"><span class="keyword">AND</span> car_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> car_id <span class="keyword">FROM</span> <span class="keyword">users</span>);</span><br></pre></td></tr></table></figure><p>查询相关资料后发现，在使用<code>NOT IN</code>操作时，你需要确认<code>values</code>中不能有<code>NULL</code>值，修改后的SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> parking_records</span><br><span class="line"><span class="keyword">WHERE</span> parking_id = <span class="string">'1'</span></span><br><span class="line"><span class="keyword">AND</span> car_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> car_id <span class="keyword">FROM</span> <span class="keyword">users</span></span><br><span class="line">    <span class="keyword">WHERE</span> car_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>    <span class="comment">-- 增加非NULL判断</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django启动时自动代码检查</title>
      <link href="/2020/08/16/django-auto-flake8/"/>
      <url>/2020/08/16/django-auto-flake8/</url>
      
        <content type="html"><![CDATA[<p><strong>目标：</strong>执行<code>python manage.py runserver</code>时自动进行代码检查。</p><p>要达成该目标，可借助Django内置signal：<code>autoreload_started</code>。</p><ol><li><p>安装以下packages：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flake8</span><br><span class="line">flake8-django</span><br><span class="line">flake8-assertive</span><br><span class="line">flake8-return</span><br><span class="line">flake8-tabs</span><br><span class="line">flake8-print</span><br><span class="line">flake8-colors</span><br><span class="line">flake8-html</span><br><span class="line">flake8-noqa</span><br><span class="line">flake8-literal</span><br><span class="line">flake8-todos</span><br><span class="line">flake8-raise</span><br></pre></td></tr></table></figure></li><li><p>然后修改<code>manage.py</code>文件，添加<code>check_style</code>函数，内容如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@receiver(autoreload_started)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_style</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> flake8.main.cli <span class="keyword">import</span> main <span class="keyword">as</span> flake8</span><br><span class="line">        flake8([</span><br><span class="line">            <span class="string">"--extend-ignore"</span>, <span class="string">"LIT101,DJ08"</span>,</span><br><span class="line">            <span class="string">"--max-line-length"</span>, <span class="string">"120"</span>,</span><br><span class="line">            <span class="string">"--max-doc-length"</span>, <span class="string">"150"</span>,</span><br><span class="line">            <span class="string">"--tee"</span>,</span><br><span class="line">            <span class="string">"--show-source"</span>,</span><br><span class="line">            <span class="string">"--max-complexity"</span>, <span class="string">"10"</span>,</span><br><span class="line">            <span class="string">"--select"</span>, <span class="string">"E,F,W,C90"</span>,</span><br><span class="line">            <span class="string">"--extend-exclude"</span>, <span class="string">"manage.py,*/admin.py,*/migrations/*,*/tests*"</span>,</span><br><span class="line">            <span class="string">"--format"</span>, <span class="string">":"</span>.join([</span><br><span class="line">                <span class="string">"$&#123;cyan&#125;%(path)s$&#123;reset&#125;:$&#123;yellow_bold&#125;%(row)d$&#123;reset&#125;:$&#123;green_bold&#125;%(col)d$&#123;reset&#125;"</span>,</span><br><span class="line">                <span class="string">"$&#123;red_bold&#125;%(code)s$&#123;reset&#125; %(text)s"</span></span><br><span class="line">            ]),</span><br><span class="line">        ])</span><br><span class="line">    <span class="keyword">except</span> (ImportError, SystemExit):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> flake8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git commit规范</title>
      <link href="/2020/08/12/git-commit/"/>
      <url>/2020/08/12/git-commit/</url>
      
        <content type="html"><![CDATA[<h2 id="Commit-Message-格式"><a href="#Commit-Message-格式" class="headerlink" title="Commit Message 格式"></a>Commit Message 格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;空行&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;空行&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>上面是一次Commit后Message格式规范，分成标题，内容详情，结尾三个部分，各有各的用处，没有多余项。头部即首行，是可以直接在页面中预览的部分，一共有三个部分<code>&lt;type&gt;</code>，<code>&lt;scope&gt;</code>，<code>&lt;subject&gt;</code>。</p><p>含义分别如下：</p><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style：格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul><a id="more"></a><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>用来说明本次Commit影响的范围，即简要说明修改会涉及的部分。这个本来是选填项，但从AngularJS实际项目中可以看出基本上也成了必填项了。</p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>用来简要描述本次改动，概述就好了，因为后面还会在Body里给出具体信息。并且最好遵循下面三条:</p><ul><li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li><li>首字母不要大写</li><li>结尾不用句号(.)</li></ul><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>body里的内容是对上面subject里内容的展开，在此做更加详尽的描述，内容里应该包含修改动机和修改前后的对比。</p><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><p>footer里的主要放置不兼容变更和Issue关闭的信息。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/yangyuqiu/p/6371461.html" target="_blank" rel="noopener">Git: 教你如何在Commit时有话可说</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署PgAdmin4</title>
      <link href="/2020/08/09/docker-pgadmin4/"/>
      <url>/2020/08/09/docker-pgadmin4/</url>
      
        <content type="html"><![CDATA[<p>在这里，我们使用<a href="https://hub.docker.com/r/dpage/pgadmin4/" target="_blank" rel="noopener">dpage/pgadmin4</a>镜像。</p><p>首先，配置<code>docker-compose.yaml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">pgadmin4:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dpage/pgadmin4</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5050</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./pgadmin:/var/lib/pgadmin</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGADMIN_DEFAULT_EMAIL=admin@example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGADMIN_DEFAULT_PASSWORD=123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=10</span></span><br></pre></td></tr></table></figure><p>在首次启动服务之前，先创建<code>pgadmin</code>目录，以便挂载到容器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir pgadmin/</span><br><span class="line">chmod 777 pgadmin</span><br></pre></td></tr></table></figure><p>然后执行命令<code>docker-compose up -d</code>启动服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> postgres </tag>
            
            <tag> pgadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看Celery任务状态</title>
      <link href="/2020/08/04/celery-status/"/>
      <url>/2020/08/04/celery-status/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.celeryproject.org/" target="_blank" rel="noopener">Celery</a>是python中常用的一个异步任务队列，使用它可以简化搭建任务队列的工作。</p><h2 id="使用命令查看"><a href="#使用命令查看" class="headerlink" title="使用命令查看"></a>使用命令查看</h2><h3 id="查看worker状态"><a href="#查看worker状态" class="headerlink" title="查看worker状态"></a>查看worker状态</h3><p><strong>查看worker的状态：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ celery -A proj status</span><br><span class="line">celery@e12d18b11bf8: OK</span><br><span class="line">celery@4e8eb97af6a8: OK</span><br><span class="line">celery@0d9dcbcd7862: OK</span><br><span class="line">celery@e858cc9a321f: OK</span><br><span class="line">celery@7254993a84be: OK</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>查看worker的详细信息：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ celery -A proj inspect stats</span><br><span class="line">-&gt; celery@0d9dcbcd7862: OK</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"broker"</span>: &#123;...&#125;,</span><br><span class="line">        <span class="string">"clock"</span>: <span class="string">"649"</span>,</span><br><span class="line">        <span class="string">"pid"</span>: 1,</span><br><span class="line">        <span class="string">"pool"</span>: &#123;...&#125;,</span><br><span class="line">        <span class="string">"prefetch_count"</span>: 16,</span><br><span class="line">        <span class="string">"rusage"</span>: &#123;...&#125;,</span><br><span class="line">        <span class="string">"total"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">-&gt; celery@4e8eb97af6a8: OK</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"broker"</span>: &#123;...&#125;,</span><br><span class="line">        <span class="string">"clock"</span>: <span class="string">"649"</span>,</span><br><span class="line">        <span class="string">"pid"</span>: 1,</span><br><span class="line">        <span class="string">"pool"</span>: &#123;...&#125;,</span><br><span class="line">        <span class="string">"prefetch_count"</span>: 16,</span><br><span class="line">        <span class="string">"rusage"</span>: &#123;...&#125;,</span><br><span class="line">        <span class="string">"total"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="查看当前正在执行的task"><a href="#查看当前正在执行的task" class="headerlink" title="查看当前正在执行的task"></a>查看当前正在执行的task</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ celery -A proj inspect active</span><br><span class="line">-&gt; celery@ec8e264c5c0e: OK</span><br><span class="line">    - empty -</span><br><span class="line">-&gt; celery@16c1f1a6d8ca: OK</span><br><span class="line">    * &#123;<span class="string">'id'</span>: <span class="string">'b2626431-4420-4dde-a596-be7b63942ac4'</span>, <span class="string">'name'</span>: <span class="string">'examples.tasks.low_task'</span>, <span class="string">'args'</span>: [], <span class="string">'kwargs'</span>: &#123;&#125;, <span class="string">'type'</span>: <span class="string">'examples.tasks.low_task'</span>, <span class="string">'hostname'</span>: <span class="string">'celery@16c1f1a6d8ca'</span>, <span class="string">'time_start'</span>: 1596941119.8071737, <span class="string">'acknowledged'</span>: True, <span class="string">'delivery_info'</span>: &#123;<span class="string">'exchange'</span>: <span class="string">''</span>, <span class="string">'routing_key'</span>: <span class="string">'low'</span>, <span class="string">'priority'</span>: None, <span class="string">'redelivered'</span>: False&#125;, <span class="string">'worker_pid'</span>: 7&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="查看当前队列信息"><a href="#查看当前队列信息" class="headerlink" title="查看当前队列信息"></a>查看当前队列信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ celery -A proj inspect active_queues</span><br><span class="line">-&gt; celery@d6dd3883d8a8: OK</span><br><span class="line">    * &#123;<span class="string">'name'</span>: <span class="string">'default'</span>, <span class="string">'exchange'</span>: &#123;<span class="string">'name'</span>: <span class="string">'default'</span>, <span class="string">'type'</span>: <span class="string">'direct'</span>, <span class="string">'arguments'</span>: None, <span class="string">'durable'</span>: True, <span class="string">'passive'</span>: False, <span class="string">'auto_delete'</span>: False, <span class="string">'delivery_mode'</span>: None, <span class="string">'no_declare'</span>: False&#125;, <span class="string">'routing_key'</span>: <span class="string">'default'</span>, <span class="string">'queue_arguments'</span>: None, <span class="string">'binding_arguments'</span>: None, <span class="string">'consumer_arguments'</span>: None, <span class="string">'durable'</span>: True, <span class="string">'exclusive'</span>: False, <span class="string">'auto_delete'</span>: False, <span class="string">'no_ack'</span>: False, <span class="string">'alias'</span>: None, <span class="string">'bindings'</span>: [], <span class="string">'no_declare'</span>: None, <span class="string">'expires'</span>: None, <span class="string">'message_ttl'</span>: None, <span class="string">'max_length'</span>: None, <span class="string">'max_length_bytes'</span>: None, <span class="string">'max_priority'</span>: None&#125;</span><br><span class="line">-&gt; celery@e12d18b11bf8: OK</span><br><span class="line">    * &#123;<span class="string">'name'</span>: <span class="string">'default'</span>, <span class="string">'exchange'</span>: &#123;<span class="string">'name'</span>: <span class="string">'default'</span>, <span class="string">'type'</span>: <span class="string">'direct'</span>, <span class="string">'arguments'</span>: None, <span class="string">'durable'</span>: True, <span class="string">'passive'</span>: False, <span class="string">'auto_delete'</span>: False, <span class="string">'delivery_mode'</span>: None, <span class="string">'no_declare'</span>: False&#125;, <span class="string">'routing_key'</span>: <span class="string">'default'</span>, <span class="string">'queue_arguments'</span>: None, <span class="string">'binding_arguments'</span>: None, <span class="string">'consumer_arguments'</span>: None, <span class="string">'durable'</span>: True, <span class="string">'exclusive'</span>: False, <span class="string">'auto_delete'</span>: False, <span class="string">'no_ack'</span>: False, <span class="string">'alias'</span>: None, <span class="string">'bindings'</span>: [], <span class="string">'no_declare'</span>: None, <span class="string">'expires'</span>: None, <span class="string">'message_ttl'</span>: None, <span class="string">'max_length'</span>: None, <span class="string">'max_length_bytes'</span>: None, <span class="string">'max_priority'</span>: None&#125;</span><br><span class="line">-&gt; celery@e05921129af4: OK</span><br><span class="line">    * &#123;<span class="string">'name'</span>: <span class="string">'high'</span>, <span class="string">'exchange'</span>: &#123;<span class="string">'name'</span>: <span class="string">'high'</span>, <span class="string">'type'</span>: <span class="string">'direct'</span>, <span class="string">'arguments'</span>: None, <span class="string">'durable'</span>: True, <span class="string">'passive'</span>: False, <span class="string">'auto_delete'</span>: False, <span class="string">'delivery_mode'</span>: None, <span class="string">'no_declare'</span>: False&#125;, <span class="string">'routing_key'</span>: <span class="string">'high'</span>, <span class="string">'queue_arguments'</span>: None, <span class="string">'binding_arguments'</span>: None, <span class="string">'consumer_arguments'</span>: None, <span class="string">'durable'</span>: True, <span class="string">'exclusive'</span>: False, <span class="string">'auto_delete'</span>: False, <span class="string">'no_ack'</span>: False, <span class="string">'alias'</span>: None, <span class="string">'bindings'</span>: [], <span class="string">'no_declare'</span>: None, <span class="string">'expires'</span>: None, <span class="string">'message_ttl'</span>: None, <span class="string">'max_length'</span>: None, <span class="string">'max_length_bytes'</span>: None, <span class="string">'max_priority'</span>: None&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>celery命令还提供一些其他功能，就不一一列举了，大家可以通过<code>--help</code>查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ celery -A proj inspect --<span class="built_in">help</span></span><br><span class="line">...</span><br><span class="line">[Commands]</span><br><span class="line">|    active</span><br><span class="line">|        List of tasks currently being executed.</span><br><span class="line">|    active_queues</span><br><span class="line">|        List the task queues a worker is currently consuming from.</span><br><span class="line">|    clock</span><br><span class="line">|        Get current logical clock value.</span><br><span class="line">|    conf [include_defaults=False]</span><br><span class="line">|        List configuration.</span><br><span class="line">|    memdump [n_samples=10]</span><br><span class="line">|        Dump statistics of previous memsample requests.</span><br><span class="line">|    memsample</span><br><span class="line">|        Sample current RSS memory usage.</span><br><span class="line">|    objgraph [object_type=Request] [num=200 [max_depth=10]]</span><br><span class="line">|        Create graph of uncollected objects (memory-leak debugging).</span><br><span class="line">|    ping</span><br><span class="line">|        Ping worker(s).</span><br><span class="line">|    query_task [id1 [id2 [... [idN]]]]</span><br><span class="line">|        Query <span class="keyword">for</span> task information by id.</span><br><span class="line">|    registered [attr1 [attr2 [... [attrN]]]]</span><br><span class="line">|        List of registered tasks.</span><br><span class="line">|    report</span><br><span class="line">|        Information about Celery installation <span class="keyword">for</span> bug reports.</span><br><span class="line">|    reserved</span><br><span class="line">|        List of currently reserved tasks, not including scheduled/active.</span><br><span class="line">|    revoked</span><br><span class="line">|        List of revoked task-ids.</span><br><span class="line">|    scheduled</span><br><span class="line">|        List of currently scheduled ETA/countdown tasks.</span><br><span class="line">|    stats</span><br><span class="line">|        Request worker statistics/information.</span><br></pre></td></tr></table></figure><h2 id="使用Flower"><a href="#使用Flower" class="headerlink" title="使用Flower"></a>使用Flower</h2><p><a href="https://flower.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flower</a>是一个用来监视和管理<a href="https://docs.celeryproject.org/" target="_blank" rel="noopener">Celery</a>集群的web工具。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install flower</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ flower -A proj --port=5555</span><br><span class="line">$ celery flower -A proj --address=127.0.0.1 --port=5555</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/celery-status-1.png" alt></p><p><img src="/images/celery-status-2.png" alt></p><h2 id="在代码中查看"><a href="#在代码中查看" class="headerlink" title="在代码中查看"></a>在代码中查看</h2><p>有些时候，需要将celery的监控嵌入到自己的系统中，或者想要了解celery更多的细节，那你就需要通过代码来查询celery的状态信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> proj.celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="comment"># @see: celery.app.control.Inspect</span></span><br><span class="line">inspect = app.control.inspect()</span><br><span class="line"><span class="comment"># 查看worker状态</span></span><br><span class="line">inspect.stats()</span><br><span class="line"><span class="comment"># 查看当前运行的任务</span></span><br><span class="line">inspect.active()</span><br><span class="line"><span class="comment"># 查看当前接收但未执行的任务</span></span><br><span class="line">inspect.reserved()</span><br><span class="line"><span class="comment"># 查看queues</span></span><br><span class="line">inspect.active_queues()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>代码中的<code>app</code>需要使用<code>Celery()</code>实例化之后的对象，而不能使用celery提供的<code>celery.current_app</code>对象。否则，代码将会处于堵塞状态，导致拿不到想要的数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署MinIO</title>
      <link href="/2020/08/02/docker-minio/"/>
      <url>/2020/08/02/docker-minio/</url>
      
        <content type="html"><![CDATA[<p><a href="https://min.io/" target="_blank" rel="noopener">MinIO</a>是一个高性能对象存储服务。它与<code>Amazon S3</code>云存储服务兼容。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署MongoDB</title>
      <link href="/2020/08/01/docker-mongo/"/>
      <url>/2020/08/01/docker-mongo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB</a>是一个免费的开源跨平台的面向文档的NoSQL数据库。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.7'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data/db</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">1C570DED651F41ABB99286C14DA4AD4A</span></span><br><span class="line">  <span class="attr">mongo-express:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo-express</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ME_CONFIG_MONGODB_ADMINUSERNAME:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">ME_CONFIG_MONGODB_ADMINPASSWORD:</span> <span class="string">1C570DED651F41ABB99286C14DA4AD4A</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Alpine中连接Postgis服务</title>
      <link href="/2020/07/28/alpine-postgis/"/>
      <url>/2020/07/28/alpine-postgis/</url>
      
        <content type="html"><![CDATA[<p>安装以下依赖：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add —-no-cache postgresql-dev gdal-dev geos-dev</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> alpine </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Faker</title>
      <link href="/2020/07/22/python-faker/"/>
      <url>/2020/07/22/python-faker/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/joke2k/faker" target="_blank" rel="noopener">Faker</a>是一个Python包，主要用来创建伪数据，使用<a href="https://github.com/joke2k/faker" target="_blank" rel="noopener">Faker</a>包，无需再手动生成或者手写随机数来生成数据，只需要调用<a href="https://github.com/joke2k/faker" target="_blank" rel="noopener">Faker</a>提供的方法，即可完成数据的生成。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install faker</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="在命令行中使用"><a href="#在命令行中使用" class="headerlink" title="在命令行中使用"></a>在命令行中使用</h3><p>安装完之后，可以直接在控制台使用faker命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: faker [-h] [--version] [-v] [-o output] [-l LOCALE] [-r REPEAT] [-s SEP] [--seed SEED] [-i [INCLUDE [INCLUDE ...]]] [fake] [fake argument [fake argument ...]]</span><br></pre></td></tr></table></figure><p>详细用法可使用<code>faker --help</code>查看帮助文档。</p><a id="more"></a><h3 id="在Python代码中使用"><a href="#在Python代码中使用" class="headerlink" title="在Python代码中使用"></a>在Python代码中使用</h3><p>在Python代码中使用也非常简单，使用初始化参数<code>locale</code>生成器之后，便可开始伪造数据了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"></span><br><span class="line">fake = Faker(locale=<span class="string">'zh_CN'</span>)</span><br><span class="line"></span><br><span class="line">fake.name()</span><br><span class="line">fake.address()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：Faker将数据的生成委托给了<code>Provider</code>，并且Faker已经内置了以下<code>Provider</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">address, automotive, bank, barcode, color, company, credit_card,</span><br><span class="line">currency, date_time, file, geo, internet, isbn, job, lorem, misc,</span><br><span class="line">person, phone_number, profile, python, ssn, user_agent</span><br></pre></td></tr></table></figure><h2 id="自定义Provider"><a href="#自定义Provider" class="headerlink" title="自定义Provider"></a>自定义Provider</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line">fake = Faker()</span><br><span class="line"></span><br><span class="line"><span class="comment"># first, import a similar Provider or use the default one</span></span><br><span class="line"><span class="keyword">from</span> faker.providers <span class="keyword">import</span> BaseProvider</span><br><span class="line"></span><br><span class="line"><span class="comment"># create new provider class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span><span class="params">(BaseProvider)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># then add new provider to faker instance</span></span><br><span class="line">fake.add_provider(MyProvider)</span><br><span class="line"></span><br><span class="line"><span class="comment"># now you can use:</span></span><br><span class="line">fake.foo()</span><br><span class="line"><span class="comment"># 'bar'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Requirements File Format</title>
      <link href="/2020/07/14/requirements-file-format/"/>
      <url>/2020/07/14/requirements-file-format/</url>
      
        <content type="html"><![CDATA[<p><code>Requirements</code>文件是包含需要使用<code>pip install</code>安装的项目列表文件。</p><p><code>Requirements</code>文件的每一行都是一条要安装的内容，就像<code>pip install</code>的参数一样，支持以下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[--option]...]</span><br><span class="line">&lt;requirement specifier&gt; [; markers] [[--option]...]</span><br><span class="line">&lt;archive url/path&gt;</span><br><span class="line">[-e] &lt;local project path&gt;</span><br><span class="line">[-e] &lt;vcs project url&gt;</span><br></pre></td></tr></table></figure><p>可以使用<code>#</code>来表示注释，行尾以<code>\</code>表示折行。</p><a id="more"></a><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><ul><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-index-url" target="_blank" rel="noopener">-i, –index-url</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-extra-index-url" target="_blank" rel="noopener">–extra-index-url</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-no-index" target="_blank" rel="noopener">–no-index</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-constraint" target="_blank" rel="noopener">-c, –constraint</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-requirement" target="_blank" rel="noopener">-r, –requirement</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-editable" target="_blank" rel="noopener">-e, –editable</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-find-links" target="_blank" rel="noopener">-f, –find-links</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-no-binary" target="_blank" rel="noopener">–no-binary</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-only-binary" target="_blank" rel="noopener">–only-binary</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-require-hashes" target="_blank" rel="noopener">–require-hashes</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip_install/#install-pre" target="_blank" rel="noopener">–pre</a></li><li><a href="https://pip.pypa.io/en/stable/reference/pip/#trusted-host" target="_blank" rel="noopener">–trusted-host</a></li></ul><h2 id="Requirement-Specifiers"><a href="#Requirement-Specifiers" class="headerlink" title="Requirement Specifiers"></a>Requirement Specifiers</h2><p><code>requirement specifier</code>由项目名称和可选的<a href="https://www.python.org/dev/peps/pep-0440/#version-specifiers" target="_blank" rel="noopener">版本说明</a>组成。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SomeProject</span><br><span class="line">SomeProject == 1.3</span><br><span class="line">SomeProject &gt;=1.2,&lt;2.0</span><br><span class="line">SomeProject[foo, bar]</span><br><span class="line">SomeProject~=1.4.2</span><br></pre></td></tr></table></figure><p>从6.0开始，pip支持<a href="https://www.python.org/dev/peps/pep-0508/#environment-markers" target="_blank" rel="noopener">environment markers</a>。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SomeProject ==5.4 ; python_version &lt; &apos;2.7&apos;</span><br><span class="line">SomeProject; sys_platform == &apos;win32&apos;</span><br></pre></td></tr></table></figure><p>从19.1开始，pip支持<a href="https://www.python.org/dev/peps/pep-0440/#direct-references" target="_blank" rel="noopener">direct references</a>，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip @ file:///localbuilds/pip-1.3.1.zip</span><br><span class="line">pip @ https://github.com/pypa/pip/archive/1.3.1.zip#sha1=da9234ee9982d4bbb3c72346a6de940a148ea686</span><br><span class="line">pip @ git+https://github.com/pypa/pip.git@7921be1537eac1e97bc40179a57f0349c2aee67d</span><br><span class="line">pip @ git+https://github.com/pypa/pip.git@1.3.1#7921be1537eac1e97bc40179a57f0349c2aee67d</span><br></pre></td></tr></table></figure><p>从7.0版开始，pip支持通过<code>requirements file</code>控制为<code>setup.py</code>提供的命令行选项。</p><p><code>--global-option</code>和<code>--install-option</code>选项用于将选项传递给<code>setup.py</code>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FooProject &gt;= 1.2 --global-option=&quot;--no-user-cfg&quot; \</span><br><span class="line">                  --install-option=&quot;--prefix=&apos;/usr/local&apos;&quot; \</span><br><span class="line">                  --install-option=&quot;--no-compile&quot;</span><br></pre></td></tr></table></figure><p>相当于运行了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py --no-user-cfg install --prefix=<span class="string">'/usr/local'</span> --no-compile</span><br></pre></td></tr></table></figure><h2 id="Archives"><a href="#Archives" class="headerlink" title="Archives"></a>Archives</h2><p>archive url/path.</p><h2 id="Local-Project-Path"><a href="#Local-Project-Path" class="headerlink" title="Local Project Path"></a>Local Project Path</h2><p>local project path.</p><h2 id="Vcs-Project-Url"><a href="#Vcs-Project-Url" class="headerlink" title="Vcs Project Url"></a>Vcs Project Url</h2><p>pip支持从<code>Git</code>，<code>Mercurial</code>，<code>Subversion</code>和<code>Bazaar</code>安装，并使用URL前缀<code>git+</code>，<code>hg+</code>，<code>svn+</code>和<code>bzr+</code>检测VCS的类型。</p><p><strong>Git</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[-e] git+http://git.example.com/MyProject#egg=MyProject</span><br><span class="line">[-e] git+https://git.example.com/MyProject#egg=MyProject</span><br><span class="line">[-e] git+ssh://git.example.com/MyProject#egg=MyProject</span><br><span class="line">[-e] git+file:///home/user/projects/MyProject#egg=MyProject</span><br></pre></td></tr></table></figure><p><strong>Mercurial</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[-e] hg+http://hg.myproject.org/MyProject#egg=MyProject</span><br><span class="line">[-e] hg+https://hg.myproject.org/MyProject#egg=MyProject</span><br><span class="line">[-e] hg+ssh://hg.myproject.org/MyProject#egg=MyProject</span><br><span class="line">[-e] hg+file:///home/user/projects/MyProject#egg=MyProject</span><br></pre></td></tr></table></figure><p><strong>Subversion</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[-e] svn+https://svn.example.com/MyProject#egg=MyProject</span><br><span class="line">[-e] svn+ssh://svn.example.com/MyProject#egg=MyProject</span><br><span class="line">[-e] svn+ssh://user@svn.example.com/MyProject#egg=MyProject</span><br></pre></td></tr></table></figure><p><strong>Bazaar</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[-e] bzr+http://bzr.example.com/MyProject/trunk#egg=MyProject</span><br><span class="line">[-e] bzr+sftp://user@example.com/MyProject/trunk#egg=MyProject</span><br><span class="line">[-e] bzr+ssh://user@example.com/MyProject/trunk#egg=MyProject</span><br><span class="line">[-e] bzr+ftp://user@example.com/MyProject/trunk#egg=MyProject</span><br><span class="line">[-e] bzr+lp:MyProject#egg=MyProject</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript扩展Date对象</title>
      <link href="/2020/07/07/typescript-date/"/>
      <url>/2020/07/07/typescript-date/</url>
      
        <content type="html"><![CDATA[<p>今天做代码检查的时候发现，关于时间处理这一块可以做进一步提取。</p><p>最初的想法是，自定义一个类，继承<code>Date</code>，运行的时候抛出了一个很奇怪的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: this is not a Date object.</span><br></pre></td></tr></table></figure><p>经过查找，发现有人也遇到了相同的问题：<a href="http://www.dailichun.com/2018/01/15/howtoextenddate.html" target="_blank" rel="noopener">如何继承Date对象？</a>。</p><p>最终采用原型扩展的方式实现，代码如下：<a id="more"></a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> Date &#123;</span><br><span class="line">    fmt: <span class="function">(<span class="params">format: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">    addDays: <span class="function">(<span class="params">days: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">Date</span>;</span><br><span class="line">    isToday: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">    clone: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Date</span>;</span><br><span class="line">    isAnotherMonth: <span class="function">(<span class="params">date: <span class="built_in">Date</span></span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">    isWeekend: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">    isSameDate: <span class="function">(<span class="params">date: <span class="built_in">Date</span></span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">    isLeapYear: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint no-extend-native: ["error", &#123; "exceptions": ["Date"] &#125;] */</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.fmt = <span class="function"><span class="keyword">function</span> (<span class="params">format = 'YYYY-MM-DD hh:mm:ss'</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> o: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">    <span class="string">'Y+'</span>: <span class="keyword">this</span>.getFullYear(), <span class="comment">// year</span></span><br><span class="line">    <span class="string">'M+'</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">// month</span></span><br><span class="line">    <span class="string">'D+'</span>: <span class="keyword">this</span>.getDate(), <span class="comment">// day</span></span><br><span class="line">    <span class="string">'h+'</span>: <span class="keyword">this</span>.getHours(), <span class="comment">// hour</span></span><br><span class="line">    <span class="string">'m+'</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">// minute</span></span><br><span class="line">    <span class="string">'s+'</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">// second</span></span><br><span class="line">    q: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">// quarter</span></span><br><span class="line">    S: <span class="keyword">this</span>.getMilliseconds() <span class="comment">// millisecond</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(Y+)/</span>.test(format)) &#123;</span><br><span class="line">    format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, <span class="string">`<span class="subst">$&#123;o[<span class="string">'Y+'</span>]&#125;</span>`</span>.substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;k&#125;</span>)`</span>).test(format)) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">RegExp</span>.$<span class="number">1.</span>length &gt; <span class="number">1</span> &amp;&amp; o[k] &lt; <span class="number">10</span> ? <span class="string">`0<span class="subst">$&#123;o[k]&#125;</span>`</span> : o[k]</span><br><span class="line">      format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, value <span class="keyword">as</span> <span class="built_in">string</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> format</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.addDays = <span class="function"><span class="keyword">function</span> (<span class="params">days: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (days) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setDate(<span class="keyword">this</span>.getDate() + days)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.isToday = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.isSameDate(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(+<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.isAnotherMonth = <span class="function"><span class="keyword">function</span> (<span class="params">date: <span class="built_in">Date</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> date &amp;&amp; <span class="keyword">this</span>.getMonth() !== date.getMonth()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.isWeekend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.getDay() === <span class="number">0</span> || <span class="keyword">this</span>.getDay() === <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.isSameDate = <span class="function"><span class="keyword">function</span> (<span class="params">date: <span class="built_in">Date</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> date &amp;&amp; <span class="keyword">this</span>.getFullYear() === date.getFullYear() &amp;&amp; <span class="keyword">this</span>.getMonth() === date.getMonth() &amp;&amp; <span class="keyword">this</span>.getDate() === date.getDate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.isLeapYear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> year = <span class="keyword">this</span>.getFullYear()</span><br><span class="line">  <span class="keyword">return</span> (year % <span class="number">4</span> === <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> !== <span class="number">0</span>) || year % <span class="number">400</span> === <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用django-celery-beat处理大量任务时异常</title>
      <link href="/2020/07/04/celery-beat/"/>
      <url>/2020/07/04/celery-beat/</url>
      
        <content type="html"><![CDATA[<p>今天有同事问我一个问题，在使用<a href="https://django-celery-beat.readthedocs.io/" target="_blank" rel="noopener">django-celery-beat</a>库时，发现有大量定时任务没有执行。我一听到这就有点疑惑：有大量定时任务？</p><p>在了解了详细情况后发现，这个业务本身是应该采用其他方式处理的，如：</p><ol><li>创建一个每N分钟执行的定时任务，然后在这个任务中对业务进行批量处理；</li><li>为每一条业务数据生成一个异步任务，而非定时任务。</li></ol><p>虽说业务可以绕过去，但问题本身并没有解决：<code>有大量定时任务没有执行</code>。</p><h2 id="问题原因分析"><a href="#问题原因分析" class="headerlink" title="问题原因分析"></a>问题原因分析</h2><h3 id="创建大量定时任务"><a href="#创建大量定时任务" class="headerlink" title="创建大量定时任务"></a>创建大量定时任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总定时任务数：24 * 60 * 100 == 144000</span></span><br><span class="line"><span class="keyword">for</span> hour, minute <span class="keyword">in</span> product(range(<span class="number">24</span>), range(<span class="number">60</span>)):</span><br><span class="line">    tasks = []</span><br><span class="line">    crontab, _ = CrontabSchedule.objects.get_or_create(minute=minute, hour=hour)</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        tasks.append(PeriodicTask(</span><br><span class="line">            crontab=crontab,</span><br><span class="line">            name=<span class="string">f'beat_<span class="subst">&#123;hour&#125;</span>_<span class="subst">&#123;minute&#125;</span>_<span class="subst">&#123;index&#125;</span>'</span>,</span><br><span class="line">            task=<span class="string">'examples.tasks.task_schedule'</span></span><br><span class="line">        ))</span><br><span class="line">    PeriodicTask.objects.bulk_create(tasks)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="启动worker及beat"><a href="#启动worker及beat" class="headerlink" title="启动worker及beat"></a>启动worker及beat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动worker</span></span><br><span class="line">celery -A celery_demo worker -l info -O fair</span><br><span class="line"><span class="comment"># 启动beat</span></span><br><span class="line">celery -A celery_demo beat -l info</span><br></pre></td></tr></table></figure><p>通过观察发现，beat启动加载定时任务大概需要3.5分钟，发送定时任务大概需要1.5秒。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>由上面观察得出，当存在大量定时任务时，beat加载任务及发送任务都变得非常缓慢。如果动态创建定时任务，将会触发<code>PeriodicTasks.changed</code>事件，这会导致beat重新加载定时任务。</p><p>本文开头的那个问题，便是由于动态实时的创建定时任务，beat一直处于加载定时任务的过程中，从而导致定时任务没有执行。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="定时任务加载慢的问题"><a href="#定时任务加载慢的问题" class="headerlink" title="定时任务加载慢的问题"></a>定时任务加载慢的问题</h3><p>通过查看源码，发现下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseScheduler</span><span class="params">(Scheduler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all_as_schedule</span><span class="params">(self)</span>:</span></span><br><span class="line">        debug(<span class="string">'DatabaseScheduler: Fetching database schedule'</span>)</span><br><span class="line">        s = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> model <span class="keyword">in</span> self.Model.objects.enabled():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                s[model.name] = self.Entry(model, app=self.app)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>注意看第5行代码，这里只是将<code>PeriodicTask</code>对象查找出来了，并没有将关联对象<code>interval</code>、<code>crontab</code>、<code>solar</code>、<code>clocked</code>同步查找出来，而在后续使用的过程中，它将会再次触发数据库查询。最终产生了大量的数据库查询，导致加载定时任务变慢。</p><h4 id="优化方案一：采用连表查询的方式"><a href="#优化方案一：采用连表查询的方式" class="headerlink" title="优化方案一：采用连表查询的方式"></a>优化方案一：采用连表查询的方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_as_schedule</span><span class="params">(self)</span>:</span></span><br><span class="line">    s = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> model <span class="keyword">in</span> self.Model.objects.select_related(</span><br><span class="line">            <span class="string">'interval'</span>, <span class="string">'crontab'</span>, <span class="string">'solar'</span>, <span class="string">'clocked'</span>).filter(enabled=<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            s[model.name] = self.Entry(model, app=self.app)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>使用连表查询的方式，关联对象的数量与主对象的数量一样多，而实际上关联对象并没有多少（存在大量复用的情况）。这样浪费大量时间在传输数据上，而且也会创建大量重复对象。</p><p>故，不建议采用这种方式，建议采用方案二。</p><h4 id="优惠方案二：分别查询然后组合数据"><a href="#优惠方案二：分别查询然后组合数据" class="headerlink" title="优惠方案二：分别查询然后组合数据"></a>优惠方案二：分别查询然后组合数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_as_schedule</span><span class="params">(self)</span>:</span></span><br><span class="line">    s = &#123;&#125;</span><br><span class="line">    intervals_dict = &#123;_.id: _ <span class="keyword">for</span> _ <span class="keyword">in</span> IntervalSchedule.objects.all()&#125;</span><br><span class="line">    crontabs_dict = &#123;_.id: _ <span class="keyword">for</span> _ <span class="keyword">in</span> CrontabSchedule.objects.all()&#125;</span><br><span class="line">    solars_dict = &#123;_.id: _ <span class="keyword">for</span> _ <span class="keyword">in</span> SolarSchedule.objects.all()&#125;</span><br><span class="line">    clockeds_dict = &#123;_.id: _ <span class="keyword">for</span> _ <span class="keyword">in</span> ClockedSchedule.objects.all()&#125;</span><br><span class="line">    <span class="keyword">for</span> model <span class="keyword">in</span> self.Model.objects.enabled():</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            model.interval = intervals_dict.get(model.interval_id, <span class="literal">None</span>)</span><br><span class="line">            model.crontab = crontabs_dict.get(model.crontab_id, <span class="literal">None</span>)</span><br><span class="line">            model.solar = solars_dict.get(model.solar_id, <span class="literal">None</span>)</span><br><span class="line">            model.clocked = clockeds_dict.get(model.clocked_id, <span class="literal">None</span>)</span><br><span class="line">            s[model.name] = self.Entry(model, app=self.app)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h3 id="发送定时任务慢的问题"><a href="#发送定时任务慢的问题" class="headerlink" title="发送定时任务慢的问题"></a>发送定时任务慢的问题</h3><p>查看源码，发现下面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseScheduler</span><span class="params">(Scheduler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">schedules_equal</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._heap_invalidated:</span><br><span class="line">            self._heap_invalidated = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> super(DatabaseScheduler, self).schedules_equal(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">schedules_equal</span><span class="params">(self, old_schedules, new_schedules)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> old_schedules <span class="keyword">is</span> new_schedules <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> old_schedules <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> new_schedules <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> set(old_schedules.keys()) != set(new_schedules.keys()):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> name, old_entry <span class="keyword">in</span> old_schedules.items():</span><br><span class="line">            new_entry = new_schedules.get(name)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> new_entry:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> new_entry != old_entry:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>通过断点调试，发现时间主要浪费在<code>for name, old_entry in old_schedules.items():</code>这个循环体内。</p><p>另外还发现，<code>old_schedules</code>、<code>new_schedules</code>都是<code>dict</code>，且<code>old_schedules is not new_schedules</code>，<code>old_schedules == new_schedules</code>。</p><p>故这里可以直接优化成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schedules_equal</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._heap_invalidated:</span><br><span class="line">        self._heap_invalidated = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> old_schedules == new_schedules</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Robot Framework做API测试</title>
      <link href="/2020/06/28/using-robot-for-api-testing/"/>
      <url>/2020/06/28/using-robot-for-api-testing/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是API"><a href="#什么是API" class="headerlink" title="什么是API"></a>什么是API</h2><p>API（Application Programming Interface，应用程序接口）是一些预先定义的函数，或指软件系统不同组成部分衔接的约定。</p><p><img src="/images/using-robot-for-api-testing.png" alt></p><h2 id="什么是API测试"><a href="#什么是API测试" class="headerlink" title="什么是API测试"></a>什么是API测试</h2><p>API测试与UI测试不同，UI测试主要关注表现层，而API测试主要关注业务逻辑层。着重强调的是逻辑调用关系，而不是UI操作或用户感官。</p><a id="more"></a><h2 id="Get-Starting"><a href="#Get-Starting" class="headerlink" title="Get Starting"></a>Get Starting</h2><h3 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h3><p>有几个常用的库需要了解：</p><ul><li><a href="http://robotframework.org/robotframework/" target="_blank" rel="noopener">Robot标准库</a>: Robot已经内置的许多库，下面是一些常用的库：<ul><li>BuiltIn</li><li>Collections</li><li>DateTime</li><li>String</li></ul></li><li><a href="http://marketsquare.github.io/robotframework-requests/" target="_blank" rel="noopener">RequestsLibrary</a>: 是一个用来发起HTTP请求的扩展库。</li><li><a href="https://guykisel.github.io/robotframework-faker/" target="_blank" rel="noopener">FakerLibrary</a>: 一个用来伪造数据的扩展库。</li><li><a href="https://github.com/hypc/robot-jsonschemalibrary" target="_blank" rel="noopener">JSONSchemaLibrary</a>: 一个使用jsonschema来测试json数据的扩展库。</li></ul><h3 id="测试项目的组织结构"><a href="#测试项目的组织结构" class="headerlink" title="测试项目的组织结构"></a>测试项目的组织结构</h3><p>如果只是进行针对少量API接口的测试，怎么写都没有什么关系。但如果涉及大量（数十甚至数百）接口，那么项目的组织结构就需要好好构思一下了。否则的话，测试用例的可维护性、可读性将会非常的差。</p><p><img src="/images/using-robot-for-api-testing-1.png" alt></p><h3 id="编写测试用例代码"><a href="#编写测试用例代码" class="headerlink" title="编写测试用例代码"></a>编写测试用例代码</h3><h4 id="README-rst文件"><a href="#README-rst文件" class="headerlink" title="README.rst文件"></a><code>README.rst</code>文件</h4><p>当前项目的说明性文档。</p><h4 id="requirements-txt文件"><a href="#requirements-txt文件" class="headerlink" title="requirements.txt文件"></a><code>requirements.txt</code>文件</h4><p>存放运行本项目的测试用例用到的库。内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">robotframework</span><br><span class="line">robotframework-requests</span><br><span class="line">robotframework-faker</span><br><span class="line">robot-jsonschemalibrary</span><br></pre></td></tr></table></figure><h4 id="tests-resources-robot文件"><a href="#tests-resources-robot文件" class="headerlink" title="tests/resources.robot文件"></a><code>tests/resources.robot</code>文件</h4><p>这个文件存放一些全局的变量、参数，以及一些通用的keywords。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*** Settings ***</span><br><span class="line">Documentation           This is a resource file.</span><br><span class="line">Library                 RequestsLibrary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** Variables ***</span><br><span class="line">$&#123;GITHUB_API_DOMAIN&#125;    https://api.github.com</span><br></pre></td></tr></table></figure><h4 id="tests-目录"><a href="#tests-目录" class="headerlink" title="tests/*目录"></a><code>tests/*</code>目录</h4><p>这些目录下存放的都是测试用例文件，目录的创建规则如下：</p><ul><li>以API接口的URL进行创建目录，动态部分以<code>$</code>开头</li><li>以请求方法创建测试用例文件</li></ul><p>例如：</p><ul><li><code>GET /gists</code> –&gt; <code>/gists/get.robot</code></li><li><code>GET /gists/{gist_id}</code> –&gt; <code>/gists/$gist_id/get.robot</code></li><li><code>GET /repos/{owner}/{repo}/issues</code> –&gt; <code>/repos/$owner/$repo/issues/get.robot</code></li></ul><p>下面是<code>/repos/$owner/$repo/issues/get.robot</code>的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">*** Settings ***</span><br><span class="line">Resource                $&#123;EXECDIR&#125;/tests/resources.robot</span><br><span class="line">Library                 String</span><br><span class="line">Suite Setup             Create Session    github    $&#123;GITHUB_API_DOMAIN&#125;</span><br><span class="line">Suite Teardown          Delete All Sessions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** Variables ***</span><br><span class="line">$&#123;API_URI&#125;              /repos/&#123;owner&#125;/&#123;repo&#125;/issues</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** Test Cases ***</span><br><span class="line">GET Repo Issues Success</span><br><span class="line">    $&#123;url&#125;=             Format String    $&#123;API_URI&#125;    owner=google    repo=jax</span><br><span class="line">    $&#123;resp&#125;=            Get Request    github    $&#123;url&#125;</span><br><span class="line">    Request Should Be Successful    $&#123;resp&#125;</span><br><span class="line">    Status Should Be    200    $&#123;resp&#125;</span><br><span class="line"></span><br><span class="line">GET Repo Issues Failure</span><br><span class="line">    $&#123;url&#125;=             Format String    $&#123;API_URI&#125;    owner=not_exists_user    repo=none</span><br><span class="line">    $&#123;resp&#125;=            Get Request    github    $&#123;url&#125;</span><br><span class="line">    Status Should Be    404    $&#123;resp&#125;</span><br></pre></td></tr></table></figure><h3 id="执行测试用例"><a href="#执行测试用例" class="headerlink" title="执行测试用例"></a>执行测试用例</h3><p>使用下面命令执行测试用例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">robot -d reports tests/</span><br></pre></td></tr></table></figure><p>测试报告如下：</p><p><img src="/images/using-robot-for-api-testing-2.png" alt></p><p><img src="/images/using-robot-for-api-testing-3.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> robotframework </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Robot Framework</title>
      <link href="/2020/06/26/robot-framework/"/>
      <url>/2020/06/26/robot-framework/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://robotframework.org/" target="_blank" rel="noopener">Robot Framework</a>是基于Python的可扩展的关键字驱动的自动化框架，用于验收测试，验收测试驱动开发（ATDD），行为驱动开发（BDD）和机器人流程自动化（RPA）。它可用于分布式，异构环境，在这些环境中，自动化需要使用不同的技术和界面。</p><p>该框架周围有一个丰富的生态系统，由作为单独项目开发的各种通用库和工具组成。</p><h3 id="为什么使用Robot-Framework"><a href="#为什么使用Robot-Framework" class="headerlink" title="为什么使用Robot Framework"></a>为什么使用Robot Framework</h3><ul><li>启用易于使用的表格语法，以统一的方式创建测试用例。</li><li>提供从现有关键字创建可重用的高级关键字的功能。</li><li>提供易于阅读的结果报告和HTML格式的日志。</li><li>是平台和应用程序独立的。</li><li>提供一个简单的库API，用于创建自定义的测试库，该库可以用Python或Java本地实现。</li><li>提供命令行界面和基于XML的输出文件，以集成到现有的构建基础结构（连续集成系统）中。<a id="more"></a></li><li>提供对Selenium的支持，以进行Web测试，Java GUI测试，正在运行的进程，Telnet，SSH等。</li><li>支持创建数据驱动的测试用例。</li><li>具有对变量的内置支持，特别适用于在不同环境中进行测试。</li><li>提供标记以分类和选择要执行的测试用例。</li><li>支持与源代码控制的轻松集成：测试套件只是可以用生产代码进行版本控制的文件和目录。</li><li>提供测试用例和测试套件级别的设置和拆卸。</li><li>模块化架构甚至支持为具有多个不同接口的应用程序创建测试。</li></ul><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><a href="https://robotframework.org/" target="_blank" rel="noopener">Robot Framework</a>是一个通用的，独立于应用程序和技术的框架。 它具有高度模块化的架构，如下图所示：</p><p><img src="/images/robot-framework-1.png" alt></p><p>Test Data采用简单、易于编辑的表格格式。当启动<a href="https://robotframework.org/" target="_blank" rel="noopener">Robot Framework</a>时，它将处理数据，执行测试用例并生成日志和报告。核心框架对被测目标一无所知，与目标的交互将由库处理。库可以直接使用应用程序界面，也可以使用较低级别的测试工具作为驱动程序。</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p>以下屏幕截图显示了测试数据以及创建的报告和日志的示例：</p><p><img src="/images/robot-framework-2.png" alt title="测试用例"><img src="/images/robot-framework-3.png" alt title="报告和日志"></p><h2 id="安装及执行"><a href="#安装及执行" class="headerlink" title="安装及执行"></a>安装及执行</h2><h3 id="安装或升级"><a href="#安装或升级" class="headerlink" title="安装或升级"></a>安装或升级</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install robotframework              <span class="comment"># 安装</span></span><br><span class="line">pip install --upgrade robotframework    <span class="comment"># 升级</span></span><br></pre></td></tr></table></figure><h3 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h3><p>使用<code>robot</code>命令执行robot脚本，使用rebot对结果进行后续处理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">robot tests.robot</span><br><span class="line">rebot output.xml</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li><a href="https://github.com/robotframework/QuickStartGuide/blob/master/QuickStart.rst" target="_blank" rel="noopener">Quick Start Guide</a>: 介绍了Robot Framework的主要功能，并充当可执行演示。</li><li><a href="https://github.com/robotframework/RobotDemo" target="_blank" rel="noopener">Robot Framework demo</a>: 简单的示例测试用例。演示还创建自定义测试库。</li><li><a href="https://github.com/robotframework/WebDemo" target="_blank" rel="noopener">Web testing demo</a>: 演示如何创建测试和更高级别的关键字。被测系统是一个使用<a href="https://github.com/robotframework/SeleniumLibrary" target="_blank" rel="noopener">SeleniumLibrary</a>测试的简单网页。</li><li><a href="https://github.com/robotframework/SwingLibrary/wiki/SwingLibrary-Demo" target="_blank" rel="noopener">SwingLibrary demo</a>: 演示使用<a href="https://github.com/robotframework/SwingLibrary" target="_blank" rel="noopener">SwingLibrary</a>测试Java GUI应用程序。</li><li><a href="https://code.google.com/p/atdd-with-robot-framework" target="_blank" rel="noopener">ATDD with Robot Framework</a>: 演示在遵循验收测试驱动开发（ATDD）流程时如何使用Robot Framework。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> robotframework </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看Python已安装的模块</title>
      <link href="/2020/06/13/python-view-installed/"/>
      <url>/2020/06/13/python-view-installed/</url>
      
        <content type="html"><![CDATA[<h2 id="使用pip命令查看"><a href="#使用pip命令查看" class="headerlink" title="使用pip命令查看"></a>使用pip命令查看</h2><p>在命令行模式下，直接使用<code>pip freeze</code>或<code>pip list</code>命令查看。</p><h2 id="在代码中查看"><a href="#在代码中查看" class="headerlink" title="在代码中查看"></a>在代码中查看</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pip._internal.utils.misc <span class="keyword">import</span> get_installed_distributions</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>installed_packages = [<span class="string">f'<span class="subst">&#123;_.key&#125;</span>==<span class="subst">&#123;_.version&#125;</span>'</span> <span class="keyword">for</span> _ <span class="keyword">in</span> get_installed_distributions()]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\n'</span>.join(installed_packages))</span><br><span class="line">urllib3==<span class="number">1.25</span><span class="number">.8</span></span><br><span class="line">setuptools==<span class="number">41.2</span><span class="number">.0</span></span><br><span class="line">requests==<span class="number">2.22</span><span class="number">.0</span></span><br><span class="line">pip==<span class="number">20.0</span><span class="number">.2</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在TypeScript中使用jQuery和BootStrap</title>
      <link href="/2020/06/02/ts-jquery-bootstrap/"/>
      <url>/2020/06/02/ts-jquery-bootstrap/</url>
      
        <content type="html"><![CDATA[<h2 id="在项目使用jQuery和BootStrap"><a href="#在项目使用jQuery和BootStrap" class="headerlink" title="在项目使用jQuery和BootStrap"></a>在项目使用jQuery和BootStrap</h2><ol><li><p>首先安装<a href="https://jquery.com/" target="_blank" rel="noopener">jQuery</a>和<a href="https://www.bootcss.com/" target="_blank" rel="noopener">BootStrap</a>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery bootstrap</span><br></pre></td></tr></table></figure></li><li><p>然后在入口页面（一般是首页）中引入<a href="https://www.bootcss.com/" target="_blank" rel="noopener">BootStrap</a>：</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap/dist/css/bootstrap.min.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap/dist/js/bootstrap.min.js'</span></span><br></pre></td></tr></table></figure></li><li><p>在需要使用<a href="https://jquery.com/" target="_blank" rel="noopener">jQuery</a>的页面引入<a href="https://jquery.com/" target="_blank" rel="noopener">jQuery</a>：</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="使用-types"><a href="#使用-types" class="headerlink" title="使用@types"></a>使用<code>@types</code></h2><p><a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="noopener">DefinitelyTyped</a>是一个高质量的<a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>类型定义的仓库。</p><p>该社区已经记录了<code>90%</code>的顶级JavaScript库，这意味着，你可以非常高效地使用这些库，而无须在单独的窗口打开相应文档以确保输入的正确性。</p><ol><li><p>安装声明文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @types/jquery @types/bootstrap</span><br></pre></td></tr></table></figure></li><li><p>然后配置<code>tsconfig.json</code>的<code>compilerOptions.types</code>选项：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"types"</span> : [</span><br><span class="line">            <span class="string">"jquery"</span>,</span><br><span class="line">            <span class="string">"bootstrap"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建CI/CD平台</title>
      <link href="/2020/05/25/ci-cd/"/>
      <url>/2020/05/25/ci-cd/</url>
      
        <content type="html"><![CDATA[<p><code>CI/CD</code>是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。<code>CI/CD</code>的核心概念是持续集成、持续交付和持续部署。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li><a href="https://gogs.io/">Gogs</a>: 是一个Git服务。</li><li><a href="https://www.jenkins.io/">Jenkins</a>: 是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</li><li><a href="https://www.redmine.org/">Redmine</a>: 是一个开源的、基于Web的项目管理和缺陷跟踪工具。</li><li><a href="https://kubernetes.io/">Kubernetes</a>: 是一个开源平台，用于跨主机群集自动部署，扩展和操作应用程序容器，提供以容器为中心的基础架构。</li><li><a href="https://slack.com/">Slack</a>: Slack 是聊天群组 + 大规模工具集成 + 文件整合 + 统一搜索。Slack 已经整合了电子邮件、短信、Google Drives、Twitter、Trello、Asana、GitHub 等 65 种工具和服务，把可以把各种碎片化的企业沟通和协作集中到一起。</li></ul><a id="more"></a><h3 id="流程图如下"><a href="#流程图如下" class="headerlink" title="流程图如下"></a>流程图如下</h3><p><img src="/images/ci-cd-1.png"></p><h3 id="Gogs-amp-Jenkins-集成"><a href="#Gogs-amp-Jenkins-集成" class="headerlink" title="Gogs &amp; Jenkins 集成"></a>Gogs &amp; Jenkins 集成</h3><p>在Jenkins中安装<a href="https://wiki.jenkins.io/display/JENKINS/Generic+Webhook+Trigger+Plugin">Generic Webhook Trigger</a>插件，然后在Gogs中配置Webhook。</p><h3 id="Jenkins-amp-Redmine-集成"><a href="#Jenkins-amp-Redmine-集成" class="headerlink" title="Jenkins &amp; Redmine 集成"></a>Jenkins &amp; Redmine 集成</h3><p>Jenkins构建完成后，直接调用<code>Redmine API</code>接口，将对应的构建结果写入Redmine服务。</p><h3 id="Jenkins-amp-Kubernetes-集成"><a href="#Jenkins-amp-Kubernetes-集成" class="headerlink" title="Jenkins &amp; Kubernetes 集成"></a>Jenkins &amp; Kubernetes 集成</h3><p>Jenkins节点上调用<code>Kebuctl</code>命令部署服务。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>使用<code>Drone</code>替换<code>Jenkins</code>，自动化流程基本类似，这里不再赘述。</p><ul><li><a href="https://drone.io/">Drone</a>: 是一种基于容器技术的持续交付系统。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd">CI/CD是什么？如何理解持续集成、持续交付和持续部署</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> ci/cd </tag>
            
            <tag> drone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL导出表结构</title>
      <link href="/2020/05/10/postgresql-export-table-structure/"/>
      <url>/2020/05/10/postgresql-export-table-structure/</url>
      
        <content type="html"><![CDATA[<p>这几天公司忙着做CMMI3认证，其中有一项是关于数据库设计的，需要以word文档的形式列举现有的表结构。如果一个一个字段复制粘贴，那也太费时费力了，而且也非常容易遗漏。故需要有一种更简捷方便的方式导出表结构。</p><p>经查，<code>pg_dump</code>可以一次性将库中所有表结构导出来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump -h host -p port -U username -s -t tablename dbname &gt; struct.sql</span><br></pre></td></tr></table></figure><ul><li><code>-s</code>：只导表结构，不会导出数据</li><li><code>-t</code>：指定要导出的数据库表</li></ul><p>这样导出的是sql语句格式的表结构，虽然比一个一个字段复制粘贴的方式好一些（文本编辑器的多光标操作），但也费时费力。</p><p>再查，发现PostgreSQL中有一个内置的表<code>information_schema.columns</code>，使用pgadmin执行下面sql语句：</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name, column_name,</span><br><span class="line">    <span class="keyword">case</span> data_type</span><br><span class="line">        <span class="keyword">when</span> <span class="string">'character varying'</span> <span class="keyword">then</span> data_type || <span class="string">'('</span> || character_maximum_length || <span class="string">')'</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">'numeric'</span> <span class="keyword">then</span> data_type || <span class="string">'('</span> || numeric_precision || <span class="string">','</span> || numeric_scale || <span class="string">')'</span></span><br><span class="line">        <span class="keyword">else</span> data_type</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> data_type,</span><br><span class="line">    <span class="keyword">case</span> is_nullable</span><br><span class="line">        <span class="keyword">when</span> <span class="string">'NO'</span> <span class="keyword">then</span> <span class="string">'NOT NULL'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> is_nullable</span><br><span class="line"><span class="keyword">from</span> information_schema.columns</span><br><span class="line"><span class="keyword">where</span> table_schema=<span class="string">'public'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> table_name, ordinal_position;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/postgresql-export-table-structure.png" alt></p><p>下载执行结果，是一个csv文件，然后直接用excel打开，稍做处理后可直接复制到word文件中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery队列</title>
      <link href="/2020/04/22/python-celery/"/>
      <url>/2020/04/22/python-celery/</url>
      
        <content type="html"><![CDATA[<p>这两天做代码审查时，发现一处celery错误的用法。他现在的做法是将一类任务通过计算hash值的方式，手动分配到多个队列中，然后每个队列起一个worker处理任务：</p><p><img src="/images/python-celery-1.png" alt></p><ul><li>手动分配队列，首先代码的复杂度提升，其次编写代码的时候需要保持对队列使用的高度关注，再次，后期代码维护时极有可能遗忘这里关于队列的特殊用法</li><li>手动分配会导致任务分配不均，极有可能出现一个worker始终处于繁忙状态，且任务一直在堆积中，而其他worker却处于空闲状态</li><li>后期提升workers的处理能力将会变得困难，需要修改代码</li></ul><a id="more"></a><p>正确的做法是，一类任务使用一个队列，而根据这类任务量的大小，一个队列启动多个worker：</p><p><img src="/images/python-celery-2.png" alt></p><ul><li>首先，代码会变得非常简单，只需要配置一个任务的队列即可</li><li>其次，多个worker处理一个队列，不会出现任务堆积的情况（假设workers总执行能力够的情况下）</li><li>最后，提升workers的处理能力变得简单，只需要针对这个队列再启动多个worker即可</li></ul><p>其实，不仅仅celery队列可以这样，其他有关生产者-消费者模式的问题，都可以采用这一种方式处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>expect命令</title>
      <link href="/2020/04/15/shell-expect/"/>
      <url>/2020/04/15/shell-expect/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一个需求，SSH远程登录之后自动切换到root用户，这里需要用到<a href="https://man.linuxde.net/expect-%e7%99%be%e7%a7%91%e7%af%87" target="_blank" rel="noopener">expect</a>命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env expect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置超时时间</span></span><br><span class="line"><span class="built_in">set</span> timeout 1</span><br><span class="line"><span class="comment">## 执行ssh命令，并等待 成功提示</span></span><br><span class="line">spawn ssh -i ~/.ssh/id_rsa <span class="variable">$username</span>@1.2.3.4</span><br><span class="line">expect <span class="string">"Login Success*"</span></span><br><span class="line"><span class="comment">## 执行切换用户命令，并等待 输入密码提示</span></span><br><span class="line">send <span class="string">"sudo su -\r"</span></span><br><span class="line">expect <span class="string">"Password:"</span></span><br><span class="line"><span class="comment">## 发送密码</span></span><br><span class="line">send <span class="string">"<span class="variable">$password</span>\r"</span></span><br><span class="line"><span class="comment">## 保持交互状态，把控制权交给控制台，此时可继续手工操作</span></span><br><span class="line">interact</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><p>这个需求的核心点在于，ssh登录之后，也就是切换shell环境之后执行一些其他命令。那么一些其他相似的需求也可以进行类似的处理：</p><ul><li>liunux安装软件包的时候，经常会有一些提示，需要人工确认才能继续进行，这时候可以采用except进行封装，让安装过程自动化（在批量安装的时候尤其有用）。当然，现在许多软件都有可选参数可跳过这些手动操作。</li><li>一些软件（如数据库、redis、rabbitmq等等）都提供一些命令行工具，而这些工具都有自己的环境，我们也可使用expect进行封装（当然很少有人这么干）。</li><li>一些工具或命令需要根据提示输入相应的内容才能继续运行，这时我们可以用expect使其自动化。</li><li>使用expect编写一些简单的监控、或自动化测试脚本。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在PyCharm中调试Celery</title>
      <link href="/2020/04/02/pycharm-celery/"/>
      <url>/2020/04/02/pycharm-celery/</url>
      
        <content type="html"><![CDATA[<p>直接打开<code>Run/Debug Configurations</code>编辑器，添加一个Python配置，然后按下图填写即可：</p><p><img src="/images/pycharm-celery-1.png" alt></p><a id="more"></a><p>当然，也可按照下面方式配置，此时需要填写celery的绝对地址：</p><p><img src="/images/pycharm-celery-2.png" alt></p><p><strong>举一反三</strong>：当我们调试一些其他命令、脚本的时候可采用同样的方式进行配置，甚至是我们自己编写的脚本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> celery </tag>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：根据经纬度计算距离及面积</title>
      <link href="/2020/03/16/python-geo-area/"/>
      <url>/2020/03/16/python-geo-area/</url>
      
        <content type="html"><![CDATA[<p>用到了两个库：<code>shapely</code>、<code>pyproj</code>，直接pip安装即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyproj <span class="keyword">import</span> Geod</span><br><span class="line"><span class="keyword">from</span> shapely.geometry <span class="keyword">import</span> Point, LineString, Polygon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算距离</span></span><br><span class="line">line_string = LineString([Point(<span class="number">123.429056</span>, <span class="number">41.833526</span>), Point(<span class="number">123.435235</span>, <span class="number">41.773191</span>)])</span><br><span class="line">geod = Geod(ellps=<span class="string">"WGS84"</span>)</span><br><span class="line">geod.geometry_length(line_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算封闭区域面积、周长</span></span><br><span class="line">geod = Geod(ellps=<span class="string">"WGS84"</span>)</span><br><span class="line">geod.geometry_area_perimeter(Polygon([</span><br><span class="line">    (<span class="number">123.432746</span>, <span class="number">41.792136</span>), (<span class="number">123.435922</span>, <span class="number">41.784584</span>),</span><br><span class="line">    (<span class="number">123.450857</span>, <span class="number">41.784392</span>), (<span class="number">123.447681</span>, <span class="number">41.79252</span>),</span><br><span class="line">]))</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果仅仅只是想要计算几何图形的距离及面积的话，可按下面方式计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> shapely.geometry <span class="keyword">import</span> Point, polygon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算距离</span></span><br><span class="line">Point(<span class="number">0</span>,<span class="number">0</span>).distance(Point(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算封闭区域面积</span></span><br><span class="line">polygon = Polygon([(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>)])</span><br><span class="line">polygon.area</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断点是否在封闭区域内</span></span><br><span class="line">polygon = Polygon([(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">2</span>)])</span><br><span class="line">polygon.contains(Point(<span class="number">1</span>, <span class="number">1</span>))       <span class="comment"># True</span></span><br><span class="line">polygon.contains(Point(<span class="number">3</span>, <span class="number">2</span>))       <span class="comment"># False</span></span><br><span class="line">polygon.contains(Point(<span class="number">0</span>, <span class="number">2</span>))       <span class="comment"># False，在边界上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断两个多边形是否重合</span></span><br><span class="line">polygon = Polygon([(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">2</span>)])</span><br><span class="line">polygon.contains(Polygon([(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>)]))     <span class="comment"># True</span></span><br><span class="line">polygon.contains(Polygon([(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">-1</span>)]))    <span class="comment"># False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serverless</title>
      <link href="/2020/02/22/talking-about-serverless/"/>
      <url>/2020/02/22/talking-about-serverless/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Serverless"><a href="#什么是Serverless" class="headerlink" title="什么是Serverless"></a>什么是Serverless</h2><p>Serverless架构，或者称为无服务器架构，是最近几年新冒出来的一种架构风格。这究竟是一种什么样的架构？无服务器，就是真的没有服务器了么？其实，对于Serverless来说，只是用户不用更多的去考虑服务器的相关内容了，无需再去考虑服务器的规格大小、存储类型、网络带宽、自动扩缩容问题了；同时，也无需再对服务器进行运维了，无需不断的打系统补丁、应用补丁、无需进行数据备份、软件配置等工作了。</p><p>但是没有服务器，如何来将程序、应用运行起来呢？这里要介绍的是Serverless下包含的两个概念：<strong>函数即服务</strong>（FaaS，Function as a Service）、<strong>后端即服务</strong>（BaaS，Backend as a Service）。</p><a id="more"></a><h3 id="函数即服务-FaaS"><a href="#函数即服务-FaaS" class="headerlink" title="函数即服务 FaaS"></a>函数即服务 FaaS</h3><p><strong>FaaS</strong>，作为一种新的计算能力提供方式，让用户抛弃了对服务器的配置和管理，仅需编写和上传核心业务代码，交由平台完成部署、调度、流量分发、弹性伸缩等能力。FaaS的出现，会从底层开始变革计算资源的形态，提供了一种新的方式来提供计算资源，同时也会给软件架构与应用服务部署带来新的设计思路，进一步降低云计算的使用门槛，推动全行业在服务架构上的创新步伐。</p><h3 id="后端即服务-BaaS"><a href="#后端即服务-BaaS" class="headerlink" title="后端即服务 BaaS"></a>后端即服务 BaaS</h3><p><strong>BaaS</strong>，其实大家已经使用很久了，这里的后端，指的就是各种云产品和云服务，例如对象存储COS，消息队列CMQ，云数据库CDB、TDSQL，云缓存CRedis、CMemcached，甚至到各种以API形式提供的服务。这些产品或服务，用户直接开通即可使用，无需考虑部署、扩容、备份、优化、安全等各种运维工作，做到了开箱即用，无需自己去进行服务器或应用的维护和管理，因此同样也是Serverless的一部分。</p><h2 id="Serverless的价值"><a href="#Serverless的价值" class="headerlink" title="Serverless的价值"></a>Serverless的价值</h2><p>首先，从开发者使用的来说，不用更多的去考虑服务器的相关内容，无需再去考虑服务器的规格大小、存储类型、网络带宽、自动扩缩容问题；同时，也无需再对服务器进行运维了，无需不断的打系统补丁、应用补丁、无需进行数据备份、软件配置等工作了。</p><p>其次，Serverless产品是完全自动化的弹性扩缩容的；在业务高峰时，产品的计算能力、容量自动扩容，承载更多的用户请求，而在业务下降时，所使用的资源也会同时收缩，避免资源浪费。</p><p>从业务角度来说，Serverless架构带来的是进一步的业务解耦，应用功能被解构成若干个细颗粒度的无状态函数，开发可以聚焦在单功能的快速开发和上线上；同时拆解后的云函数，也都可以进行独立的迭代升级，更快速的实现业务迭代，缩减功能的上市时间。</p><p>另外，利用Serverless架构的简单运维、低成本及快速上线能力，可以来快速尝试业务的新形态、新功能。</p><h2 id="Serverless的技术特点"><a href="#Serverless的技术特点" class="headerlink" title="Serverless的技术特点"></a>Serverless的技术特点</h2><ol><li><p>事件驱动</p><ul><li>云函数的运行，是由事件驱动起来的，在有事件到来时，云函数会启动运行；</li><li>Serverless应用不会类似于原有的监听 – 处理类型的应用一直在线，而是按需启动；</li><li>事件的定义可以很丰富，一次http请求，一个文件上传，一次数据库条目修改，一条消息发送，都可以定义为事件；</li></ul></li><li><p>单事件处理</p><ul><li>云函数由事件触发，而触发启动的一个云函数实例，一次仅处理一个事件；</li><li>无需在代码内考虑高并发高可靠性，代码可以专注于业务，开发更简单；</li><li>通过云函数实例的高并发能力，实现业务高并发；</li></ul></li><li><p>自动弹性伸缩</p><ul><li>由于云函数事件驱动及单事件处理的特性，云函数通过自动的伸缩来支持业务的高并发；</li><li>针对业务的实际事件或请求数，云函数自动弹性合适的处理实例来承载实际业务量；</li><li>在没有事件或请求时，无实例运行，不占用资源；</li></ul></li><li><p>无状态开发</p><ul><li>云函数运行时根据业务弹性，可能伸缩到0，无法在运行环境中保存状态数据；</li><li>分布式应用开发中，均需要保持应用的无状态，以便于水平伸缩；</li><li>可以利用外部服务、产品，例如数据库或缓存，实现状态数据的保存；</li></ul></li><li><p>微服务</p><ul><li>Serverless带来的业务解藕、事件驱动以及无状态，非常适合微服务化。</li></ul></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1005537" target="_blank" rel="noopener">Serverless初探</a></li><li><a href="https://www.infoq.cn/article/tVw6jSvrLErsWrLVf4kg" target="_blank" rel="noopener">掌握Serverless：基本概念入门</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> desigh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈架构师</title>
      <link href="/2020/02/17/talking-about-architect/"/>
      <url>/2020/02/17/talking-about-architect/</url>
      
        <content type="html"><![CDATA[<p>架构师是一个承前启后的岗位，正如一个路由器，对各种业务需求加以分析处理后交由到下游产品和研发团队。所以，架构师对于业务的理解能力是必不可少的。</p><h2 id="架构师业务思维"><a href="#架构师业务思维" class="headerlink" title="架构师业务思维"></a>架构师业务思维</h2><ul><li><strong>主动性</strong>：做业务不是等着别人来找你，这就变成了做需求的了，业务思维很重要的一点就是要能主动出击。不仅要关注眼前做的那部分东西，还要学会横向去看，去对比，对标行业的解决方案和思路。</li><li><strong>平衡性</strong>：权衡技术思维和业务思维，不能一味的用业务的模式来解决问题，也不能固执的用技术思维来确定方案，两者需要做好平衡。</li><li><strong>前瞻性</strong>：架构先行一定是需要有一定的业务前瞻性，理解分析业务、参与到业务中、对未来的业务进行预判。</li></ul><a id="more"></a><h2 id="架构师的能力要求"><a href="#架构师的能力要求" class="headerlink" title="架构师的能力要求"></a>架构师的能力要求</h2><ul><li>在用户需求上，有判断能力和预见能力，对当前需求的判断、鉴别，对未来需求的预见能力。</li><li>在产品迭代上，有规划能力，判断需求哪些应该先满足，哪些后满足。</li><li>在系统设计上，有分解和组合能力。</li><li>在技术选型上，有决策力。</li><li>在人力资源上，有统筹能力。</li></ul><h2 id="从产品和需求视角看架构师"><a href="#从产品和需求视角看架构师" class="headerlink" title="从产品和需求视角看架构师"></a>从产品和需求视角看架构师</h2><ol><li><p><strong>对需求进行梳理，发现根源需求。</strong>很多用户反馈并不代表其根本性需求，用户在反馈需求的时候，往往带着他自己给出的解决方案。这种需求反馈已经属于二次加工的需求，而非原始需求。这个时候我们要多问多推敲，把它还原到不带任何技术实现假设的根源需求。</p></li><li><p><strong>对标行业解决方案，提出满足需求的最终方案。</strong>需要解决的需求有非常多现成的方案，但哪些方案是主流的，哪些是最关键的都需要思考。有些时候这些方案也只能提供思路、方向，你需要提炼出自己的解决方案。</p></li></ol><h2 id="从技术视角看架构师"><a href="#从技术视角看架构师" class="headerlink" title="从技术视角看架构师"></a>从技术视角看架构师</h2><p>从技术视角看，架构师很重要的能力是具备技术的全局视角，所谓的技术全貌是指从底到上的核心骨架，比如最底下的硬件结构、操作系统、编程语言，甚至浏览器等，只有掌握每一层的核心思想，才能在架构设计中没有技术盲点。</p><p><img src="/images/talking-about-architect.png" alt></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.infoq.cn/article/by*KHLcodyjocqChtr5Y" target="_blank" rel="noopener">蘑菇街陈辉谈架构师业务思维修炼术</a></li><li><a href="https://www.infoq.cn/article/ikh3SRGafbk6oWgA8waO" target="_blank" rel="noopener">七牛云许式伟：我所理解的架构是什么</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux上如何清除Cache和Swap</title>
      <link href="/2020/02/07/clear-ram-cache-and-swap/"/>
      <url>/2020/02/07/clear-ram-cache-and-swap/</url>
      
        <content type="html"><![CDATA[<p>在Linux系统中有先进的缓存机制，会针对dentry（用于VFS，加速文件路径名到inode的转换）、Buffer Cache（针对磁盘块的读写）和Page Cache（针对文件inode的读写）进行缓存操作，有效缩短 I/O系统调用（比如read、write）的时间。但当进行了大量文件操作之后，缓存会把内存资源基本用光，导致系统缓慢，使用swap空间，影响了性能，这时就需要清理缓存了。</p><h2 id="如何清除Cache"><a href="#如何清除Cache" class="headerlink" title="如何清除Cache"></a>如何清除Cache</h2><p>在清除Cache之前，先执行<a href="https://man.linuxde.net/sync" target="_blank" rel="noopener">sync</a>命令将缓冲区的数据写入磁盘，然后通过向文件<code>/proc/sys/vm/drop_caches</code>写入值<code>1</code>、<code>2</code>或<code>3</code>的方式来清除Cache：</p><p><em>注意：文件<code>/proc/sys/vm/drop_caches</code>只有在进行写操作时才会触发清除cache操作</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 仅清除页面缓存（PageCache）</span></span><br><span class="line">sync; <span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="comment"># 2. 清除目录项和inode</span></span><br><span class="line">sync; <span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="comment"># 3. 清除页面缓存，目录项和inode</span></span><br><span class="line">sync; <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><p>第一条命令是最安全的，它只会清除页面缓存，一般情况下，我们只需要执行第一条命令即可。在生产环境中，不建议执行第三条命令，除非你明确知道你需要执行什么。</p><a id="more"></a><h2 id="如何清除Swap"><a href="#如何清除Swap" class="headerlink" title="如何清除Swap"></a>如何清除Swap</h2><p>可以通过开关Swap的方式来清除Swap：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a &amp;&amp; swapon -a</span><br></pre></td></tr></table></figure><h2 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h2><p>使用<a href="https://man.linuxde.net/free" target="_blank" rel="noopener">free</a>命令来查看内存使用情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          7.5Gi       1.5Gi       5.3Gi       297Mi       704Mi       5.4Gi</span><br><span class="line">Swap:         7.8Gi          0B       7.8Gi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgres分组统计后取前几行</title>
      <link href="/2020/01/21/postgres-group-prerows/"/>
      <url>/2020/01/21/postgres-group-prerows/</url>
      
        <content type="html"><![CDATA[<p>使用<code>ROW_NUMBER() OVER()</code>来实现此功能，语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROW_NUMBER() OVER([PARTITION BY col1] ORDER BY col2 [DESC])</span><br></pre></td></tr></table></figure><ul><li>ROW_NUMBER: 为返回的记录定义行编号</li><li>PARTITION BY col1: 根据字段col1进行分组</li><li>ORDER BY col2: 按字段col2进行排序</li></ul><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>某市停车场停车统计数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">parking_id,park_date,park_counts</span><br><span class="line">00892a40c1ce0d7a02101d6f716a95a8,2020-01-01,479</span><br><span class="line">011fca99dfc8fd22060c3d90c2c998e6,2020-01-01,205</span><br><span class="line">01e29027cfc9833f076e4b2193c38c51,2020-01-01,24</span><br><span class="line">03d4550171bc01e918fe6556e337e0b4,2020-01-01,29</span><br><span class="line">04327a4180ca98105233098ac2ab730f,2020-01-01,180</span><br><span class="line">0a577156a1b4e845ae9d1bff28fffef9,2020-01-01,9</span><br><span class="line">0a8ee281cfc62618deff5fe2dcc56057,2020-01-01,16</span><br><span class="line">0e7f4e3ac5f511e692ba0242ac120002,2020-01-01,51</span><br><span class="line">10c72c08a28e825f48186ca8464fce6b,2020-01-01,604</span><br><span class="line">1137233254950fc2c5a9997ec82e2f0e,2020-01-01,58</span><br><span class="line">11d44b246fde92964e8d54a6ebebfa98,2020-01-01,467</span><br><span class="line">12e59b7fe4b8c234d7726805a87acb5d,2020-01-01,361</span><br><span class="line">136988fc7e0bf1f2b7cadce315260bc2,2020-01-01,90</span><br><span class="line">14fc069d62cb11c574c356b2c22f4077,2020-01-01,25</span><br><span class="line">16f3ed2ec60311e692ba0242ac120002,2020-01-01,299</span><br><span class="line">17f52e57dbe684d427d58758b8f65963,2020-01-01,1081</span><br><span class="line">18489e1d95fc35f88004473f1de3fbf3,2020-01-01,222</span><br><span class="line">1e0e1e4540c766c9d16567536b1e6df3,2020-01-01,88</span><br><span class="line">1e54816aa98ad53738c6d8b575d5ac68,2020-01-01,84</span><br></pre></td></tr></table></figure><p><strong>按停车场分组，查询每个停车场次数最多的三天的数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> parking_id,</span><br><span class="line">       park_date,</span><br><span class="line">       park_counts</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  (<span class="keyword">SELECT</span> *,</span><br><span class="line">          row_number() <span class="keyword">over</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> parking_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> park_counts <span class="keyword">DESC</span>) <span class="keyword">AS</span> rn</span><br><span class="line">   <span class="keyword">FROM</span> park_stats) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> a.rn &lt;= <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> parking_id,</span><br><span class="line">         park_counts <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">parking_id,park_date,park_counts</span><br><span class="line">00892a40c1ce0d7a02101d6f716a95a8,2020-01-11,661</span><br><span class="line">00892a40c1ce0d7a02101d6f716a95a8,2020-01-12,644</span><br><span class="line">00892a40c1ce0d7a02101d6f716a95a8,2020-01-18,632</span><br><span class="line">011fca99dfc8fd22060c3d90c2c998e6,2020-01-16,477</span><br><span class="line">011fca99dfc8fd22060c3d90c2c998e6,2020-01-17,469</span><br><span class="line">011fca99dfc8fd22060c3d90c2c998e6,2020-01-15,468</span><br><span class="line">01e29027cfc9833f076e4b2193c38c51,2020-01-14,168</span><br><span class="line">01e29027cfc9833f076e4b2193c38c51,2020-01-15,165</span><br><span class="line">01e29027cfc9833f076e4b2193c38c51,2020-01-10,162</span><br><span class="line">031f697b85ee016ab98c44831e415568,2020-01-10,4</span><br><span class="line">03d4550171bc01e918fe6556e337e0b4,2020-01-15,116</span><br><span class="line">03d4550171bc01e918fe6556e337e0b4,2020-01-16,94</span><br><span class="line">03d4550171bc01e918fe6556e337e0b4,2020-01-14,91</span><br><span class="line">04327a4180ca98105233098ac2ab730f,2020-01-17,304</span><br><span class="line">04327a4180ca98105233098ac2ab730f,2020-01-03,256</span><br><span class="line">04327a4180ca98105233098ac2ab730f,2020-01-13,253</span><br></pre></td></tr></table></figure><p><strong>按停车日期分组，查询每天停车次数最多的三个停车场</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> park_date,</span><br><span class="line">       parking_id,</span><br><span class="line">       park_counts</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  (<span class="keyword">SELECT</span> *,</span><br><span class="line">          row_number() <span class="keyword">over</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> park_date <span class="keyword">ORDER</span> <span class="keyword">BY</span> park_counts <span class="keyword">DESC</span>) <span class="keyword">AS</span> rn</span><br><span class="line">   <span class="keyword">FROM</span> park_stats) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> a.rn &lt;= <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> park_date,</span><br><span class="line">         park_counts <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">park_date,parking_id,park_counts</span><br><span class="line">2020-01-01,3198bed4067abf223c9766f0f6c0d7a1,4280</span><br><span class="line">2020-01-01,a81ebf846194a367d2049f468d2a0cf4,2672</span><br><span class="line">2020-01-01,fb718e3ff4aa5a5686f7ca8722073481,2398</span><br><span class="line">2020-01-02,3198bed4067abf223c9766f0f6c0d7a1,3505</span><br><span class="line">2020-01-02,b61eb790962cf024e717cf96239466c4,3396</span><br><span class="line">2020-01-02,a81ebf846194a367d2049f468d2a0cf4,3063</span><br><span class="line">2020-01-03,a81ebf846194a367d2049f468d2a0cf4,3585</span><br><span class="line">2020-01-03,3198bed4067abf223c9766f0f6c0d7a1,3526</span><br><span class="line">2020-01-03,b61eb790962cf024e717cf96239466c4,3517</span><br><span class="line">2020-01-04,3198bed4067abf223c9766f0f6c0d7a1,3653</span><br><span class="line">2020-01-04,a81ebf846194a367d2049f468d2a0cf4,3035</span><br><span class="line">2020-01-04,fb718e3ff4aa5a5686f7ca8722073481,2847</span><br><span class="line">2020-01-05,3198bed4067abf223c9766f0f6c0d7a1,3875</span><br><span class="line">2020-01-05,a81ebf846194a367d2049f468d2a0cf4,3667</span><br><span class="line">2020-01-05,fb718e3ff4aa5a5686f7ca8722073481,2597</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calibre一键生成封面</title>
      <link href="/2020/01/21/calibre-auto-cover/"/>
      <url>/2020/01/21/calibre-auto-cover/</url>
      
        <content type="html"><![CDATA[<p>刚刚写了个爬虫，抓取了infoq上的电子书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">minibooks/</span><br><span class="line">    |-- AI前线特刊：AI领域2017进展总结/</span><br><span class="line">    |   |-- AI前线特刊：AI领域2017进展总结.pdf</span><br><span class="line">    |   |-- cover.jpg</span><br><span class="line">    |   |-- metadata.json</span><br><span class="line">    |   |-- metadata.opf</span><br><span class="line">    |-- AI商业化下的技术演进/</span><br><span class="line">    |   |-- AI商业化下的技术演进.pdf</span><br><span class="line">    |   |-- cover.jpg</span><br><span class="line">    |   |-- metadata.json</span><br><span class="line">    |   |-- metadata.opf</span><br><span class="line">    |-- CNUTCon特刊：智能时代运维最佳实践/</span><br><span class="line">    |   |-- CNUTCon特刊：智能时代运维最佳实践.pdf</span><br><span class="line">    |   |-- cover.jpg</span><br><span class="line">    |   |-- metadata.json</span><br><span class="line">    |   |-- metadata.opf</span><br><span class="line">    |-- Cloud 2.0时代，华为云的技术探秘与实践/</span><br><span class="line">    |   |-- Cloud 2.0时代，华为云的技术探秘与实践.pdf</span><br><span class="line">    |   |-- cover.jpg</span><br><span class="line">    |   |-- metadata.json</span><br><span class="line">    |   |-- metadata.opf</span><br></pre></td></tr></table></figure><a id="more"></a><p>在使用calibre导入书籍的时候发现，没有正常导入封面，然后网上各种查找，没有发现类似问题的解决方案，后来一想，写个命令重新生成一下封面吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$calibre_library</span>/</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> */*; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ -d <span class="string">"<span class="variable">$book</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">pushd</span> <span class="string">"<span class="variable">$book</span>"</span> &gt;&gt; /dev/null</span><br><span class="line">        <span class="keyword">if</span> [[ ! -f cover.jpg ]]; <span class="keyword">then</span></span><br><span class="line">            ebook-meta *.pdf --get-cover cover.jpg &gt;&gt; /dev/null</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">popd</span> &gt;&gt; /dev/null</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>重新打开calibre，效果如下：</p><p><img src="/images/calibre-auto-cover-1.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> calibre </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker快速搭建Redash服务</title>
      <link href="/2020/01/14/docker-redash/"/>
      <url>/2020/01/14/docker-redash/</url>
      
        <content type="html"><![CDATA[<p><a href="https://redash.io/">Redash</a>是一款开源的BI工具，提供了基于web的数据库查询和数据可视化功能。</p><p><video controls autoplay src="/images/redash-intro-720.mp4" style="max-width: 80%;"></video></p><a id="more"></a><h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><p><strong>配置<code>docker-compose.yaml</code>文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">x-redash-service:</span> <span class="string">&amp;redash-service</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redash/redash</span></span><br><span class="line">  <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">env_file:</span> <span class="string">./env</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*redash-service</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:5000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">REDASH_WEB_WORKERS:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">scheduler:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*redash-service</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">scheduler</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">QUEUES:</span> <span class="string">&quot;celery&quot;</span></span><br><span class="line">      <span class="attr">WORKERS_COUNT:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">scheduled_worker:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*redash-service</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">worker</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">QUEUES:</span> <span class="string">&quot;scheduled_queries,schemas&quot;</span></span><br><span class="line">      <span class="attr">WORKERS_COUNT:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">adhoc_worker:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="string">*redash-service</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">worker</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">QUEUES:</span> <span class="string">&quot;queries&quot;</span></span><br><span class="line">      <span class="attr">WORKERS_COUNT:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:9.6-alpine</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">./env</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./postgres-data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p><strong>配置<code>env</code>环境变量文件</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">PYTHONUNBUFFERED</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">REDASH_LOG_LEVEL</span>=INFO</span><br><span class="line"><span class="attr">REDASH_REDIS_URL</span>=redis://redis:<span class="number">6379</span>/<span class="number">0</span></span><br><span class="line"><span class="attr">POSTGRES_PASSWORD</span>=<span class="variable">$&#123;postgres_password&#125;</span></span><br><span class="line"><span class="attr">REDASH_COOKIE_SECRET</span>=<span class="variable">$&#123;redash_cookie_secret&#125;</span></span><br><span class="line"><span class="attr">REDASH_SECRET_KEY</span>=<span class="variable">$&#123;redash_secret_key&#125;</span></span><br><span class="line"><span class="attr">REDASH_DATABASE_URL</span>=postgresql://postgres:<span class="variable">$&#123;postgres_password&#125;</span>@postgres/postgres</span><br></pre></td></tr></table></figure><p>更多设置参考：<a href="https://redash.io/help/open-source/admin-guide/env-vars-settings">env-vars-settings</a></p><p><strong>启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">docker-compose run --rm server create_db</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GreenPlum</title>
      <link href="/2020/01/02/greenplum/"/>
      <url>/2020/01/02/greenplum/</url>
      
        <content type="html"><![CDATA[<p><a href="https://greenplum.org/" target="_blank" rel="noopener">Greenplum</a>数据库，一个用于分析、机器学习和人工智能的开源大规模并行数据平台。</p><ul><li><strong>一次打包到处运行的平台</strong>：不管是裸机、私有云还是公有云。不受限于硬件环境和平台，用户可以灵活的选择最适合自己的方案，迁移代价低。硬件环境的普适性，提供了极大的灵活性，解放了硬件平台的制约和绑定，为客户解决了后顾之忧。使用 Greenplum 可以在其间无缝迁移，开发、运维人员不需要学习新的数据库处理技术。</li><li><strong>处理和分析各种数据源的数据的平台</strong>：支持各种数据源，包括 Hadoop、HIVE、HBase、S3、Gemfire、各种数据库和文件等，不需要移动数据，避免了数据加载的复杂性，和其带来的数据不一致的问题。</li><li><strong>支持各种数据格式的平台</strong>：不管是结构化、半结构化（XML、JSON、KV）还是非结构化，譬如文本数据、GIS数据、图数据等。</li><li><strong>具有强大内核的平台</strong>：Greenplum 具有强大的内核技术，包括数据水平分布、并行查询执行、专业优化器、线性扩展能力、多态存储、资源管理、高可用、高速数据加载等。</li><li><strong>具备强大灵活性和可扩展性的平台</strong>： 支持扩展（Extension）、自定义类型和函数、PXF和外部表技术。可以使用多种语言实现用户自定义函数和聚集，包括 PL/Python、PL/R、PL/Java、PL/Perl、PL/PGSQL 和 C 等。</li><li><strong>支持标准的平台</strong>：支持SQL、JDBC和ODBC等行业标准。经过半个多世纪的发展，SQL 成为了数据平台的万向头，向上可以连接各种 BI工具、可视化工具和数据分析工具，向下可以连接各种ETL工具、各种数据源和各种格式的数据等。</li><li><strong>集成数据分析平台</strong>：支持商业智能（BI）、文本、GIS、图、图像、流式数据处理等。通过Pivotal开源的 Apache 顶级项目 MADlib，Greenplum 可以在数据内部运行 50 多种数据分析和机器学习算法。MADlib 提供 SQL 接口进行数据分析，大大降低了数据分析的门槛；MADlib 内建于数据库内，使用 MPP 的优势，提高了分析的效率；MADlib可以在全量数据而不是抽样数据上进行分析，提高了精度。</li><li><strong>开放源代码且持续大力投入的平台</strong>： 2017年 Pivotal 在 github 的开源贡献列表中全球排名第四左右。采用开源方案，不担心后门问题和被锁定问题。开源还可以构建更好的生态。</li><li><strong>采用敏捷软件开发方法开发的平台</strong>：Greenplum 采用敏捷方法开发，实现了快速迭代、持续发布和质量内建。2017年 Greenplum 发布了10个版本，以前发布一个版本需要1个月左右，现在只需要十几个小时。</li><li><strong>具备企业级稳定性的平台</strong>：Greenplum 经过十多年发展，有大量活跃客户，大量数百节点集群为全球2000强企业生产系统提供服务，稳定性非常高。</li><li><strong>具备成熟生态系统的平台</strong>：Greenplum 生态非常完善，有大量的合作伙伴。</li></ul><a id="more"></a><h2 id="单节点安装"><a href="#单节点安装" class="headerlink" title="单节点安装"></a>单节点安装</h2><p>基于Ubuntu18.04，我是直接在<a href="https://www.vagrantup.com/" target="_blank" rel="noopener">vagrant</a>启动的虚拟机中进行安装的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## install greenplum</span></span><br><span class="line">sudo add-apt-repository -y ppa:greenplum/db</span><br><span class="line">sudo apt update -y &amp;&amp; sudo apt install -y greenplum-db git tree vim</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export GPHOME=/opt/<span class="variable">$(basename /opt/greenplum-db*)</span>"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'. $GPHOME/greenplum_path.sh'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">## init greenplum &amp; start greenplum</span></span><br><span class="line">cp <span class="variable">$GPHOME</span>/docs/cli_help/gpconfigs/gpinitsystem_singlenode .</span><br><span class="line">sed -i <span class="string">'/^#/d'</span> gpinitsystem_singlenode</span><br><span class="line">sed -i <span class="string">'/^$/d'</span> gpinitsystem_singlenode</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(hostname)</span>"</span> &gt; hostlist_singlenode</span><br><span class="line">sed -i <span class="string">"s/^MASTER_HOSTNAME.*$/MASTER_HOSTNAME=<span class="variable">$(hostname)</span>/g"</span> gpinitsystem_singlenode</span><br><span class="line">primary_dir=$(<span class="built_in">pwd</span>)/primary</span><br><span class="line">mkdir -p <span class="variable">$&#123;primary_dir&#125;</span></span><br><span class="line">sed -i <span class="string">'/^declare -a DATA_DIRECTORY/d'</span> gpinitsystem_singlenode</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"declare -a DATA_DIRECTORY=(<span class="variable">$&#123;primary_dir&#125;</span> <span class="variable">$&#123;primary_dir&#125;</span>)"</span> &gt;&gt; gpinitsystem_singlenode</span><br><span class="line">master_dir=$(<span class="built_in">pwd</span>)/master</span><br><span class="line">mkdir -p <span class="variable">$&#123;master_dir&#125;</span></span><br><span class="line">sed -i <span class="string">'/^MASTER_DIRECTORY/d'</span> gpinitsystem_singlenode</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"MASTER_DIRECTORY=<span class="variable">$&#123;master_dir&#125;</span>"</span> &gt;&gt; gpinitsystem_singlenode</span><br><span class="line"></span><br><span class="line">gpssh-exkeys -f hostlist_singlenode</span><br><span class="line">gpinitsystem -c gpinitsystem_singlenode</span><br><span class="line"></span><br><span class="line"><span class="comment">## config client authorization</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'host all all 192.168.0.0/16 trust'</span> &gt;&gt; <span class="variable">$&#123;master_dir&#125;</span>/gpsne-1/pg_hba.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">## restart greenplum</span></span><br><span class="line">gpstop -d <span class="variable">$&#123;master_dir&#125;</span>/gpsne-1/</span><br><span class="line">gpstart -d <span class="variable">$&#123;master_dir&#125;</span>/gpsne-1/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> greenplum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用xmllint处理xml</title>
      <link href="/2019/12/30/xmllint/"/>
      <url>/2019/12/30/xmllint/</url>
      
        <content type="html"><![CDATA[<p><a href="http://xmlsoft.org/xmllint.html" target="_blank" rel="noopener">xmllint</a>是一个命令行xml工具。</p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>使用<code>--format</code>参数格式化文件。</p><p>假设有文件<code>books.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;<span class="name">book-name</span>&gt;</span>习惯的力量<span class="tag">&lt;/<span class="name">book-name</span>&gt;</span><span class="tag">&lt;<span class="name">authors</span>&gt;</span><span class="tag">&lt;<span class="name">author</span>&gt;</span>查尔斯·都希格<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="tag">&lt;/<span class="name">authors</span>&gt;</span><span class="tag">&lt;/<span class="name">book</span>&gt;</span><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">book-name</span>&gt;</span>从0到1<span class="tag">&lt;/<span class="name">book-name</span>&gt;</span><span class="tag">&lt;<span class="name">authors</span>&gt;</span><span class="tag">&lt;<span class="name">author</span>&gt;</span>彼得·蒂尔<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="tag">&lt;<span class="name">author</span>&gt;</span>布莱克·马斯特斯<span class="tag">&lt;/<span class="name">author</span>&gt;</span><span class="tag">&lt;/<span class="name">authors</span>&gt;</span><span class="tag">&lt;/<span class="name">book</span>&gt;</span><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行命令<code>xmllint --format books.xml</code>，得到如下结果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book-name</span>&gt;</span>习惯的力量<span class="tag">&lt;/<span class="name">book-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">author</span>&gt;</span>查尔斯·都希格<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">authors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book-name</span>&gt;</span>从0到1<span class="tag">&lt;/<span class="name">book-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">author</span>&gt;</span>彼得·蒂尔<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">author</span>&gt;</span>布莱克·马斯特斯<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">authors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="获取节点的值"><a href="#获取节点的值" class="headerlink" title="获取节点的值"></a>获取节点的值</h2><p>使用<code>--xpath</code>参数获取节点的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmllint --xpath <span class="string">'//book[@id="1"]/book-name/text()'</span> books.xml</span><br><span class="line">习惯的力量</span><br></pre></td></tr></table></figure><h2 id="获取属性的值"><a href="#获取属性的值" class="headerlink" title="获取属性的值"></a>获取属性的值</h2><p>使用<code>--xpath</code>参数获取属性的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmllint --xpath <span class="string">'//book/@id'</span> books.xml</span><br><span class="line">id=<span class="string">"1"</span> id=<span class="string">"2"</span></span><br></pre></td></tr></table></figure><h2 id="验证xml有效性"><a href="#验证xml有效性" class="headerlink" title="验证xml有效性"></a>验证xml有效性</h2><p>使用<code>--schema</code>参数验证xml文件的有效性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ xmllite --schema books.xsd books.xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;books&gt;</span><br><span class="line">  &lt;book id=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;book-name&gt;习惯的力量&lt;/book-name&gt;</span><br><span class="line">    &lt;authors&gt;</span><br><span class="line">      &lt;author&gt;查尔斯·都希格&lt;/author&gt;</span><br><span class="line">    &lt;/authors&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">  &lt;book id=<span class="string">"2"</span>&gt;</span><br><span class="line">    &lt;book-name&gt;从0到1&lt;/book-name&gt;</span><br><span class="line">    &lt;authors&gt;</span><br><span class="line">      &lt;author&gt;彼得·蒂尔&lt;/author&gt;</span><br><span class="line">      &lt;author&gt;布莱克·马斯特斯&lt;/author&gt;</span><br><span class="line">    &lt;/authors&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br><span class="line">books.xml validates</span><br></pre></td></tr></table></figure><p>注意，默认情况下会先输出文件内容，然后给出验证结果。可以使用<code>--noout</code>参数，这样可以只得到验证结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmllite --schema books.xsd --noout books.xml</span><br><span class="line">books.xml validates</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git代码统计</title>
      <link href="/2019/12/11/git-stats/"/>
      <url>/2019/12/11/git-stats/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">git-<span class="function"><span class="title">stats</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> since=1970-01-01</span><br><span class="line">    <span class="built_in">local</span> until=3000-01-01</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="string">"<span class="variable">$1</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">        since=<span class="variable">$1</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="string">"<span class="variable">$2</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">        until=<span class="variable">$2</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    git <span class="built_in">log</span> --format=<span class="string">'%aN'</span> --since=<span class="variable">$&#123;since&#125;</span> --until=<span class="variable">$&#123;until&#125;</span> | sort -u | <span class="keyword">while</span> <span class="built_in">read</span> author; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$&#123;author&#125;</span>,"</span></span><br><span class="line">        git <span class="built_in">log</span> --author=<span class="string">"<span class="variable">$&#123;author&#125;</span>"</span> --pretty=tformat: --numstat --since=<span class="variable">$&#123;since&#125;</span> --until=<span class="variable">$&#123;until&#125;</span> \</span><br><span class="line">            | awk <span class="string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "%s,%s,%s\n", add, subs, loc &#125;'</span> -</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell数组</title>
      <link href="/2019/12/10/shell-array/"/>
      <url>/2019/12/10/shell-array/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>定义数组</strong></p><p>数组使用小括号括起，元素之间使用空格分隔：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ arr=(1 2 3 4 5 6)</span><br></pre></td></tr></table></figure><p><strong>获取数组长度</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#arr[*]&#125;</span></span><br><span class="line">6</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#arr[@]&#125;</span></span><br><span class="line">6</span><br></pre></td></tr></table></figure><p><strong>读取元素</strong></p><p>数组下标从<code>0</code>开始，若数组对应下标无元素，输出位空。下标使用<code>*</code>或<code>@</code>输出整个数组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[0]&#125;</span></span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line">2</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[2]&#125;</span></span><br><span class="line">3</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[10]&#125;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[*]&#125;</span></span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[@]&#125;</span></span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>对元素赋值</strong></p><p>直接使用<code>数组名[下标]</code>赋值，数组是自动伸缩的，所以不会有数组下标越界错误，当赋值下标超过元素长度时，中间填充的元素为空：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ arr[2]=5</span><br><span class="line">$ arr[8]=12</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[*]&#125;</span></span><br><span class="line">1 5 3 4 5 6 12</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#arr[*]&#125;</span></span><br><span class="line">8</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[7]&#125;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[8]&#125;</span></span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><p>使用<code>unset 数组名[下标]</code>删除元素，使用<code>unset 数组名</code>删除整个数组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> arr[4]</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[*]&#125;</span></span><br><span class="line">1 5 3 4 6 12</span><br><span class="line">$ <span class="built_in">unset</span> arr</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr[*]&#125;</span></span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><p><strong>数组切片</strong></p><p>使用<code>${数组名[@|*]:起始下标:长度}</code>进行切片，长度不写表示一直到数组结尾：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ arr=(1 2 3 4 5 6 7 8 9)</span><br><span class="line">$ arr2=( <span class="variable">$&#123;arr[*]:5:3&#125;</span> )</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr2[*]&#125;</span></span><br><span class="line">6 7 8</span><br><span class="line">$ arr3=( <span class="variable">$&#123;arr[*]:3&#125;</span> )</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;arr3[*]&#125;</span></span><br><span class="line">4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><p><strong>for循环遍历</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr=(1 2 3 4 5)</span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> <span class="variable">$&#123;arr[*]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;arr&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>按下标遍历数组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr=(1 2 3 4 5)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!arr[*]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"index: <span class="variable">$i</span>, element: <span class="variable">$&#123;arr[$i]&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>while循环遍历</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr=(1 2 3 4 5)</span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -lt <span class="variable">$&#123;#arr[*]&#125;</span> ]; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"index: <span class="variable">$i</span>, element: <span class="variable">$&#123;arr[$i]&#125;</span>"</span></span><br><span class="line">    <span class="built_in">let</span> i++</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office2016零售版转VOL版</title>
      <link href="/2019/11/25/office2016-convert-to-vol/"/>
      <url>/2019/11/25/office2016-convert-to-vol/</url>
      
        <content type="html"><![CDATA[<p>将下列文本另存为bat文件，运行即可：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">ECHO</span> OFF</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> "<span class="variable">%ProgramFiles%</span>\Microsoft Office\Office16\ospp.vbs" (</span><br><span class="line">    <span class="built_in">cd</span> /d "<span class="variable">%ProgramFiles%</span>\Microsoft Office\Office16"</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> "<span class="variable">%ProgramFiles(x86)%</span>\Microsoft Office\Office16\ospp.vbs" (</span><br><span class="line">    <span class="built_in">cd</span> /d "<span class="variable">%ProgramFiles(x86)%</span>\Microsoft Office\Office16"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:WH</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> ----------------------------------------------</span><br><span class="line"><span class="built_in">echo</span> <span class="number">1</span>. 零售版 Office Pro Plus <span class="number">2016</span> 转化为<span class="built_in">VOL</span>版</span><br><span class="line"><span class="built_in">echo</span> <span class="number">2</span>. 零售版 Office Visio Pro <span class="number">2016</span> 转化为<span class="built_in">VOL</span>版</span><br><span class="line"><span class="built_in">echo</span> <span class="number">3</span>. 零售版 Office Project Pro <span class="number">2016</span> 转化为<span class="built_in">VOL</span>版</span><br><span class="line"><span class="built_in">echo</span> ----------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p tsk="请选择（<span class="number">1</span>-<span class="number">3</span>）: "</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">defined</span> tsk <span class="keyword">goto</span>:err</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%tsk%</span>==<span class="number">1</span> <span class="keyword">goto</span>:convert_office</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%tsk%</span>==<span class="number">2</span> <span class="keyword">goto</span>:convert_visio</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%tsk%</span>==<span class="number">3</span> <span class="keyword">goto</span>:convert_project</span><br><span class="line"></span><br><span class="line">:err</span><br><span class="line"><span class="keyword">goto</span> :WH</span><br><span class="line"></span><br><span class="line">:convert_office</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">Convert</span> Office2016</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%x</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /b ..\root\Licenses16\proplusvl_kms*.xrm-ms') <span class="keyword">do</span> (</span><br><span class="line">    cscript ospp.vbs /inslic:"..\root\Licenses16\<span class="variable">%%x</span>" &gt;<span class="built_in">nul</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%x</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /b ..\root\Licenses16\proplusvl_mak*.xrm-ms') <span class="keyword">do</span> (</span><br><span class="line">    cscript ospp.vbs /inslic:"..\root\Licenses16\<span class="variable">%%x</span>" &gt;<span class="built_in">nul</span></span><br><span class="line">)</span><br><span class="line">cscript ospp.vbs /inpkey:XQNVK-<span class="number">8</span>JYDB-WJ9W3-YJ8YR-WFG99</span><br><span class="line"><span class="keyword">goto</span> :end</span><br><span class="line"></span><br><span class="line">:convert_visio</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">Convert</span> Visio2016</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%x</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /b ..\root\Licenses16\visio???vl_kms*.xrm-ms') <span class="keyword">do</span> (</span><br><span class="line">    cscript ospp.vbs /inslic:"..\root\Licenses16\<span class="variable">%%x</span>" &gt;<span class="built_in">nul</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%x</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /b ..\root\Licenses16\visio???vl_mak*.xrm-ms') <span class="keyword">do</span> (</span><br><span class="line">    cscript ospp.vbs /inslic:"..\root\Licenses16\<span class="variable">%%x</span>" &gt;<span class="built_in">nul</span></span><br><span class="line">)</span><br><span class="line">cscript ospp.vbs /inpkey:PD3PC-RHNGV-FXJ29-<span class="number">8</span>JK7D-RJRJK</span><br><span class="line"><span class="keyword">goto</span> :end</span><br><span class="line"></span><br><span class="line">:convert_project</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">Convert</span> Project2016</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%x</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /b ..\root\Licenses16\project???vl_kms*.xrm-ms') <span class="keyword">do</span> (</span><br><span class="line">    cscript ospp.vbs /inslic:"..\root\Licenses16\<span class="variable">%%x</span>" &gt;<span class="built_in">nul</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%x</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /b ..\root\Licenses16\project???vl_mak*.xrm-ms') <span class="keyword">do</span> (</span><br><span class="line">    cscript ospp.vbs /inslic:"..\root\Licenses16\<span class="variable">%%x</span>" &gt;<span class="built_in">nul</span></span><br><span class="line">)</span><br><span class="line">cscript ospp.vbs /inpkey:YG9NW-<span class="number">3</span>K39V-<span class="number">2</span>T3HJ-<span class="number">93</span>F3Q-G83KT</span><br><span class="line"><span class="keyword">goto</span> :end</span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line"><span class="built_in">pause</span> &gt;<span class="built_in">nul</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka入门</title>
      <link href="/2019/11/15/kafka-introduction/"/>
      <url>/2019/11/15/kafka-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka简介"><a href="#Kafka简介" class="headerlink" title="Kafka简介"></a>Kafka简介</h2><p><a href="https://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>是一个高吞吐量、分布式的发布-订阅消息系统。</p><p><a href="https://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>是一款开源的、轻量级的、分布式、可分区和具有复制备份的（Replicated）、基于<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">ZooKeeper</a>协调管理的分布式流平台的功能强大的消息系统。与传统的消息系统相比，<a href="https://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>能够很好地处理活跃的流数据，使得数据在各个子系统中高性能、低延迟地不停流转。</p><p><a href="https://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>作为一个分布式流处理平台，具备以下三个特性：</p><ul><li>能够允许发布和订阅流数据</li><li>存储流数据时提供相应的容错机制</li><li>当流数据到达时能够被及时处理</li></ul><a id="more"></a><h2 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>Kafka将一组消息抽象归纳为一个主题（Topic），也就是说，一个主题就是对消息的一个分类。生产者将消息发送到特定主题，消费者订阅主题或主题的某些分区进行消费。</p><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>消息是Kafka通信的基本单位，由一个固定长度的消息头和一个可变长度的消息体构成。在老版本中，每一条消息称为Message：在由Java重新实现的客户端中，每一条消息称为Record。</p><h3 id="分区和副本"><a href="#分区和副本" class="headerlink" title="分区和副本"></a>分区和副本</h3><p>Kafka将一组消息归纳为一个主题，而每个主题又被分成一个或多个分区（Partition）。每个分区由一系列有序、不可变的消息组成，是一个有序队列。</p><p>每个分区在物理上对应为一个文件夹，分区的命名规则为主题名称后接“-”连接符，之后再接分区编号，分区编号从0开始，编号最大值为分区的总数减l。每个分区又有一至多个副本（Replica），分区的副本分布在集群的不同代理上，以提高可用性。</p><p>分区使得Kafka在井发处理上变得更加容易，理论上来说，分区数越多吞吐量越高，但这要根据集群实际环境及业务场景而定。同时，分区也是Kafka保证消息被顺序消费以及对消息进行负载均衡的基础。</p><p>Kafka只能保证一个分区之内消息的有序性，并不能保证跨分区消息的有序性。每条消息被追加到相应的分区中，是顺序写磁盘，因此效率非常高，这是Kafka高吞吐率的一个重要保证。</p><h3 id="Leader副本和Follower副本"><a href="#Leader副本和Follower副本" class="headerlink" title="Leader副本和Follower副本"></a>Leader副本和Follower副本</h3><p>由于Kafka副本的存在，就需要保证一个分区的多个副本之间数据的一致性，Kafka会选择该分区的一个副本作为Leader副本，而该分区其他副本即为Follower副本，只有Leader副本才负责处理客户端读／写请求，Follower副本从Leader副本同步数据。</p><h3 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h3><p>任何发布到分区的消息会被直接追加到日志文件的尾部，而每条消息在日志文件中的位置都会对应一个按序递增的偏移量。偏移量是一个分区下严格有序的逻辑值，它并不表示消息在磁盘上的物理位置。</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>生产者（Producer）负责将消息发送给代理，也就是向Kafka代理发送消息的客户端。</p><h3 id="消费者和消费组"><a href="#消费者和消费组" class="headerlink" title="消费者和消费组"></a>消费者和消费组</h3><p>消费者（Comsumer）以拉取（pull）方式拉取数据，它是消费的客户端。在Kafka中每一个消费者都属于一个特定消费组（ConsumerGroup），我们可以为每个消费者指定一个消费组，以<code>groupId</code>代表消费组名称，通过<code>group.id</code>配置设置。如果不指定消费组，则该消费者属于默认消费组<code>test-consumer-group</code>。同时，每个消费者也有一个全局唯一的id，通过配置项<code>client.id</code>指定，如果客户端没有指定消费者的id，Kafka会自动为该消费者生成一个全局唯一的id，格式为<code>${groupld }-${hostName}-${timestamp}-${UUID前8位字符}</code>。</p><p>同一个主题的一条消息只能被同一个消费组下某一个消费者消费，但不同消费组的消费者可同时消费该消息。</p><h2 id="快速启动Kafka服务"><a href="#快速启动Kafka服务" class="headerlink" title="快速启动Kafka服务"></a>快速启动Kafka服务</h2><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>配置<code>docker-compose.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'bitnami/zookeeper:3'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'2181:2181'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'zookeeper_data:/bitnami'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_ANONYMOUS_LOGIN=yes</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'bitnami/kafka:2'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'9092:9092'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'kafka_data:/bitnami'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://192.168.56.10:9092</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">zookeeper_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">kafka_data:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH穿越跳板机登录远程服务器</title>
      <link href="/2019/11/01/ssh-board/"/>
      <url>/2019/11/01/ssh-board/</url>
      
        <content type="html"><![CDATA[<p>如果公司服务器处于外网，而出于安全方面的考虑，访问公司外网服务器时一般会通过跳板机（堡垒机）进行访问。</p><p><img src="/images/ssh-board-1.svg" alt></p><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><p>使用<code>ssh</code>分别登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先登录到跳板机</span></span><br><span class="line">$ ssh -A username@192.168.0.3   <span class="comment"># -A: 表示转发密钥，它会将本机的密钥转发到跳板机上，从跳板机登录目标机器时会使用该密钥</span></span><br><span class="line"><span class="comment"># 从跳板机上再登录目标机器</span></span><br><span class="line">$ ssh username@10.0.1.10</span><br></pre></td></tr></table></figure><h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><p>使用<code>ProxyCommand</code>选项，一行命令直接登录到目标机器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh username@10.0.1.10 -o ProxyCommand=<span class="string">'ssh username@192.168.0.3 -W %h:%p'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>命令有点复杂，推荐使用<code>~/.ssh/config</code>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Host    proxy.machine</span><br><span class="line">    HostName        192.168.0.3</span><br><span class="line">    Port            22</span><br><span class="line">    User            username</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa</span><br><span class="line">    ProxyCommand    none</span><br><span class="line">    CheckHostIP     no</span><br><span class="line">    ForwardAgent    yes</span><br><span class="line">    ControlMaster   auto</span><br><span class="line">    ControlPersist  10m</span><br><span class="line"></span><br><span class="line">Host    10.0.1.*</span><br><span class="line">    Port            22</span><br><span class="line">    User            username</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa</span><br><span class="line">    ProxyCommand    ssh username@proxy.machine -W %h:%p</span><br></pre></td></tr></table></figure><p>然后使用<code>ssh 10.0.1.10</code>登录目标机器。</p><h2 id="多重跳板机"><a href="#多重跳板机" class="headerlink" title="多重跳板机"></a>多重跳板机</h2><p><img src="/images/ssh-board-2.svg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Host    proxy1.machine</span><br><span class="line">    HostName        192.168.0.3</span><br><span class="line">    Port            22</span><br><span class="line">    User            username</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa</span><br><span class="line">    ProxyCommand    none</span><br><span class="line">    CheckHostIP     no</span><br><span class="line">    ForwardAgent    yes</span><br><span class="line">    ControlMaster   auto</span><br><span class="line">    ControlPersist  10m</span><br><span class="line"></span><br><span class="line">Host    proxy2.machine</span><br><span class="line">    HostName        1.2.3.4</span><br><span class="line">    Port            22</span><br><span class="line">    User            username</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa</span><br><span class="line">    ProxyCommand    ssh username@proxy1.machine -W %h:%p</span><br><span class="line">    CheckHostIP     no</span><br><span class="line">    ForwardAgent    yes</span><br><span class="line">    ControlMaster   auto</span><br><span class="line">    ControlPersist  10m</span><br><span class="line"></span><br><span class="line">Host    10.0.1.*</span><br><span class="line">    Port            22</span><br><span class="line">    User            username</span><br><span class="line">    IdentityFile    ~/.ssh/id_rsa</span><br><span class="line">    ProxyCommand    ssh username@proxy2.machine -W %h:%p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：使用type动态构建类</title>
      <link href="/2019/10/30/python-type/"/>
      <url>/2019/10/30/python-type/</url>
      
        <content type="html"><![CDATA[<p>Python内建的<code>type</code>自带3个参数，有两种用法：</p><ol><li><code>type(object) -&gt; the object&#39;s type</code></li><li><code>type(name, bases, dict) -&gt; a new type</code></li></ol><p>第一种用法就不说了，今天主要说一下第二种用法。</p><h2 id="type-name-bases-dict"><a href="#type-name-bases-dict" class="headerlink" title="type(name, bases, dict)"></a><code>type(name, bases, dict)</code></h2><ul><li><code>name</code>: 字符串，制定要构造类的名字，赋给新对象的<code>__name__</code>属性</li><li><code>bases</code>: 一个tuple，指定新类型的所有基类，赋给新对象的<code>__bases__</code>属性</li><li><code>dict</code>: 字典类型，作为新类的名字空间，赋给新对象的<code>__dict__</code>属性</li></ul><a id="more"></a><p>我们通常创建一个类的做法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>那么通过下面代码也能达到同样的效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = type(<span class="string">'A'</span>, (object,), &#123;&#125;)</span><br></pre></td></tr></table></figure><p>通过使用类属性的方式我们可以添加成员属性或成员函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A.bar = <span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">A.foo = foo</span><br></pre></td></tr></table></figure><p>使用<code>type</code>可以这么做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = type(<span class="string">'A'</span>, (object,), &#123;<span class="string">'bar'</span>: <span class="string">'bar'</span>, <span class="string">'foo'</span>: foo&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p>之前做过一个物联网项目，里面有一个设备管理模块，除了一些通用属性外，不同种类的设备属性基本上都不一样。这里我们的做法是在后台创建一种新的设备，配置好这类新设备的属性及其值域范围。然后使用<code>type</code>动态创建设备子类来管理设备。这样就不用每次添加一种新设备都需要发一次版本问题。</p></li><li><p>一般电子商城中的商品管理也有类似的问题，不同种类的商品属性差异化更加严重。同样，我们可以在后台配置好商品种类，然后使用<code>type</code>动态创建商品子类来管理商品。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限访问控制模型</title>
      <link href="/2019/10/22/access-control-model/"/>
      <url>/2019/10/22/access-control-model/</url>
      
        <content type="html"><![CDATA[<p>一般来说，我们在设计与人有交互的系统时，如果涉及到多用户能对同类资源进行操作的时候，就会有区分权限的需求了。</p><h2 id="ACL-Access-Control-List"><a href="#ACL-Access-Control-List" class="headerlink" title="ACL(Access Control List)"></a>ACL(Access Control List)</h2><p><code>ACL</code>是最早也是最基本的一种访问控制机制，它的原理非常简单：每一项资源，都配有一个列表，这个列表记录的就是哪些用户可以对这项资源执行<code>CRUD</code>中的那些操作。当系统试图访问这项资源时，会首先检查这个列表中是否有关于当前用户的访问权限，从而确定当前用户可否执行相应的操作。</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Alice -&gt; read:article, update:article</span><br><span class="line">Bob   -&gt; read:article, del:article</span><br></pre></td></tr></table></figure><p>通过ACL表，我们可以很容易的使用程序判断出用户的权限。我们在设计<code>RESTFUL</code>接口时，权限可以设计为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Alice -&gt; GET /article, PUT /article</span><br><span class="line">Bob   -&gt; GET /article, DELETE /article</span><br></pre></td></tr></table></figure><p><code>ACL</code>缺点也是很明显的，首先需要维护大量的访问权限列表，它在性能上有明显的缺陷。另外，对于拥有大量用户与众多资源的应用，管理访问控制列表本身就变成非常繁重的工作。</p><a id="more"></a><h2 id="DAC-Discretionary-Access-Control"><a href="#DAC-Discretionary-Access-Control" class="headerlink" title="DAC(Discretionary Access Control)"></a>DAC(Discretionary Access Control)</h2><p>被操作对象，根据访问控制规则，来判断操作主体可对操作对象做哪些操作，比如只读或者是可写的权限。而自主的含义，则是拥有某种权限的用户，可以把权限赋予其他用户。</p><p>这种设计最常见的应用就是文件系统的权限设计，如微软的NTFS。</p><p>DAC最大缺陷就是对权限控制比较分散，不便于管理，比如无法简单地将一组文件设置统一的权限开放给指定的一群用户。</p><h2 id="MAC-Mandatory-Access-Control"><a href="#MAC-Mandatory-Access-Control" class="headerlink" title="MAC(Mandatory Access Control)"></a>MAC(Mandatory Access Control)</h2><p>MAC是为了弥补DAC权限控制过于分散的问题而诞生的。在MAC的设计中，每一个对象都都有一些权限标识，每个用户同样也会有一些权限标识，而用户能否对该对象进行操作取决于双方的权限标识的关系，这个限制判断通常是由系统硬性限制的。</p><p>MAC非常适合机密机构或者其他等级观念强烈的行业，如军事系统，但对于类似商业服务系统，则因为不够灵活而不能适用。</p><h2 id="RBAC-Role-Based-Access-Control"><a href="#RBAC-Role-Based-Access-Control" class="headerlink" title="RBAC(Role-Based Access Control)"></a>RBAC(Role-Based Access Control)</h2><p><code>RBAC</code>是把用户按角色进行归类，通过用户的角色来确定用户能否针对某项资源进行某项操作。<code>RBAC</code>相对于ACL最大的优势就是它简化了用户与权限的管理，通过对用户进行分类，使得角色与权限关联起来，而用户与权限变成了间接关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArticleEditor -&gt; read:article, update:article</span><br><span class="line">ArticleAdmin  -&gt; read:article, update:article, del:article</span><br><span class="line"></span><br><span class="line">Alice -&gt; ArticleEditor</span><br><span class="line">Bob   -&gt; ArticleAdmin</span><br><span class="line">Lily  -&gt; ArticleEditor</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>但是它也有自身的缺点，那就是由于权限是以角色为载体分配的，如果某一角色下的个别用户需要进行特别的权限定制，如同加入一些其他角色的小部分权限或去除当前角色的一些权限时，RBAC就无能为力了，因为RBAC对权限的分配是角色为单位的。</p><h2 id="ABAC-Attribute-Based-Access-Control"><a href="#ABAC-Attribute-Based-Access-Control" class="headerlink" title="ABAC(Attribute-Based Access Control)"></a>ABAC(Attribute-Based Access Control)</h2><p>不同于常见的将用户通过某种方式关联到权限的方式，ABAC则是通过动态计算一个或一组属性是否满足某种条件来进行授权判断的（可以编写简单的逻辑）。属性通常来说分为四类：用户属性（如用户年龄），环境属性（如当前时间），操作属性（如读取）和对象属性（如一篇文章，又称资源属性），所以理论上能够实现非常灵活的权限控制，几乎能满足所有类型的需求。</p><p>例如：</p><ol><li>一个用户可以查看它所在部门内部的文档；</li><li>一个用户可以编辑一个处于草稿阶段的文档；</li><li>早上9点上班之前，禁止用户查看任何文档；</li></ol><p>由此可以看出<code>ABAC</code>非常的灵活，但是实现也是非常的难。这其中涉及到逻辑的动态执行，数据动态过滤等，更加具体就是动态拼接SQL语句（使用ORM的话就是动态组装对应ORM的查询语句）。根据配置的规则，最后解析出来可能是各种Sql语句：<code>&lt;</code>、<code>&gt;</code>、<code>=</code>、<code>like</code>、<code>in</code>、<code>not in</code>等等。</p><p>所以，<code>ABAC</code>的缺点非常明显，那就是它的复杂性。每次都要解析规则，对程序的性能也造成的影响，就算使用缓存，命中的概率也是非常的小，因为很多因素都是动态的。</p><p>所以，如果需要根据属性做权限判断的场景不是很多的话，建议使用<code>RBAC</code>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串相似度</title>
      <link href="/2019/10/15/similarity/"/>
      <url>/2019/10/15/similarity/</url>
      
        <content type="html"><![CDATA[<p>无论是做科学计算，还是数据挖掘，或者一些其他工程项目，我们经常需要比较字符串的相似度。</p><p>这里罗列一些常用的相似度计算方法，仅供参考。</p><h2 id="余弦相似性（Cosine-similarity）"><a href="#余弦相似性（Cosine-similarity）" class="headerlink" title="余弦相似性（Cosine similarity）"></a>余弦相似性（Cosine similarity）</h2><p><strong>余弦相似性</strong>通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1。从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。这结果是与向量的长度无关的，仅仅与向量的指向方向相关。余弦相似度通常用于正空间，因此给出的值为0到1之间。</p><p>注意这上下界对任何维度的向量空间中都适用，而且余弦相似性最常用于高维正空间。例如在信息检索中，每个词项被赋予不同的维度，而一个文档由一个向量表示，其各个维度上的值对应于该词项在文档中出现的频率。余弦相似度因此可以给出两篇文档在其主题方面的相似度。</p><p>另外，它通常用于<strong>文本挖掘</strong>中的文件比较。此外，在<strong>数据挖掘</strong>领域中，会用到它来度量集群内部的凝聚力。<a id="more"></a></p><p><img src="/images/similarity-01.svg" alt></p><h2 id="欧几里得距离（Euclidean-distance）"><a href="#欧几里得距离（Euclidean-distance）" class="headerlink" title="欧几里得距离（Euclidean distance）"></a>欧几里得距离（Euclidean distance）</h2><p><strong>欧几里得距离</strong>或欧几里得度量是欧几里得空间中两点间距离（即直线距离）。使用这个距离，欧氏空间成为度量空间。相关联的范数称为欧几里得范数。</p><p><img src="/images/similarity-02.svg" alt></p><h2 id="编辑距离（Edit-distance）"><a href="#编辑距离（Edit-distance）" class="headerlink" title="编辑距离（Edit distance）"></a>编辑距离（Edit distance）</h2><p><strong>编辑距离</strong>是针对二个字符串（例如英文字）的差异程度的量化量测，量测方式是看至少需要多少次的处理才能将一个字符串变成另一个字符串。编辑距离可以用在自然语言处理中，例如拼写检查可以根据一个拼错的字和其他正确的字的编辑距离，判断哪一个（或哪几个）是比较可能的字。DNA也可以视为用A、C、G和T组成的字符串，因此编辑距离也用在生物信息学中，判断二个DNA的类似程度。Unix下的<code>diff</code>及<code>patch</code>即是利用编辑距离来进行文本编辑对比的例子。</p><p><img src="/images/similarity-03.svg" alt></p><h2 id="汉明距离（Hamming-distance）"><a href="#汉明距离（Hamming-distance）" class="headerlink" title="汉明距离（Hamming distance）"></a>汉明距离（Hamming distance）</h2><p>两个等长字符串之间的<strong>汉明距离</strong>是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。</p><p><strong>汉明重量</strong>是字符串相对于同样长度的零字符串的汉明距离，也就是说，它是字符串中非零的元素个数：对于二进制字符串来说，就是1的个数，所以11101的汉明重量是4。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>virtualenv问题集</title>
      <link href="/2019/10/08/virtualenv-bugs/"/>
      <url>/2019/10/08/virtualenv-bugs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>OSError: Command /home/username/xxx/bin/python3 - setuptools pkg_resources pip wheel failed with error code 2</p></blockquote><p>今天在使用virtualenv创建虚拟环境的时候报错，一通查找之后发现是<code>setuptools</code>、<code>virtualenv</code>版本太旧的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U setuptools virtualenv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo引用自己的文章</title>
      <link href="/2019/10/08/hexo-local-link/"/>
      <url>/2019/10/08/hexo-local-link/</url>
      
        <content type="html"><![CDATA[<p>在用Hexo写文章时，经常需要引用自己的文章，而文章在发布之后地址为<code>/年/月/日/文章名</code>，这样的话，使用markdown格式（<code>[]()</code>）引用的话会变得很不方便。</p><p>万幸的是，hexo提供了内置的语法来引用文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link Hello-World %&#125;</span><br><span class="line">&#123;% post_link Hello-World 你好世界 %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现控制台进度条</title>
      <link href="/2019/10/08/python-process-bar/"/>
      <url>/2019/10/08/python-process-bar/</url>
      
        <content type="html"><![CDATA[<p>要实现进度条功能，只需要注意以下两点就可以做到：</p><ul><li>使用<code>\r</code>符号，从行首进行输出</li><li><code>print</code>时不要换行，即使用<code>end=&#39;&#39;</code></li></ul><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsoleColorMixin</span>:</span></span><br><span class="line">    text_colorful_fmt = &#123;</span><br><span class="line">        <span class="string">'black'</span>: <span class="string">'\033[30m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'red'</span>: <span class="string">'\033[31m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'green'</span>: <span class="string">'\033[32m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'yellow'</span>: <span class="string">'\033[33m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'blue'</span>: <span class="string">'\033[34m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'purple'</span>: <span class="string">'\033[35m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'black_green'</span>: <span class="string">'\033[36m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'white'</span>: <span class="string">'\033[37m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_black'</span>: <span class="string">'\033[90m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_red'</span>: <span class="string">'\033[91m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_green'</span>: <span class="string">'\033[92m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_yellow'</span>: <span class="string">'\033[93m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_blue'</span>: <span class="string">'\033[94m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_purple'</span>: <span class="string">'\033[95m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_black_green'</span>: <span class="string">'\033[96m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_white'</span>: <span class="string">'\033[97m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    bg_colorful_fmt = &#123;</span><br><span class="line">        <span class="string">'black'</span>: <span class="string">'\033[40m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'red'</span>: <span class="string">'\033[41m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'green'</span>: <span class="string">'\033[42m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'yellow'</span>: <span class="string">'\033[43m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'blue'</span>: <span class="string">'\033[44m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'purple'</span>: <span class="string">'\033[45m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'black_green'</span>: <span class="string">'\033[46m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'white'</span>: <span class="string">'\033[47m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_black'</span>: <span class="string">'\033[100m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_red'</span>: <span class="string">'\033[101m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_green'</span>: <span class="string">'\033[102m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_yellow'</span>: <span class="string">'\033[103m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_blue'</span>: <span class="string">'\033[104m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_purple'</span>: <span class="string">'\033[105m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_black_green'</span>: <span class="string">'\033[106m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">        <span class="string">'h_white'</span>: <span class="string">'\033[107m&#123;text&#125;\033[0m'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">text_colorful</span><span class="params">(self, text, color)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.text_colorful_fmt.get(color, <span class="string">'&#123;text&#125;'</span>).format(</span><br><span class="line">            text=text) <span class="keyword">if</span> text <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bg_colorful</span><span class="params">(self, text, color)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.bg_colorful_fmt.get(color, <span class="string">'&#123;text&#125;'</span>).format(</span><br><span class="line">            text=text) <span class="keyword">if</span> text <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item.startswith(<span class="string">'text_'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span> text: self.text_colorful(text, item[<span class="number">5</span>:])</span><br><span class="line">        <span class="keyword">elif</span> item.startswith(<span class="string">'bg_'</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span> text: self.bg_colorful(text, item[<span class="number">3</span>:])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(</span><br><span class="line">                <span class="string">"'ProcessBar' object has no attribute '%s'"</span> % item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessBar</span><span class="params">(ConsoleColorMixin)</span>:</span></span><br><span class="line">    fmt = <span class="string">'\r&#123;complete&#125;&#123;incomplete&#125; &#123;percent&#125; (&#123;cur&#125;/&#123;total&#125;)'</span></span><br><span class="line">    fmt2 = <span class="string">'Begin: &#123;begin&#125; Estimated: &#123;estimated&#125; Elapsed: &#123;elapsed&#125;'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, total, cur=<span class="number">0</span>, msg=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.begin_time = <span class="literal">None</span></span><br><span class="line">        self.total = total</span><br><span class="line">        self.cur = cur</span><br><span class="line">        self.msg = msg</span><br><span class="line">        self.bar_length = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self, cur)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.begin_time <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.begin()</span><br><span class="line">        du = datetime.now() - self.begin_time</span><br><span class="line">        percent = cur / self.total</span><br><span class="line">        string = self.fmt2.format(**&#123;</span><br><span class="line">            <span class="string">'begin'</span>: self.begin_time,</span><br><span class="line">            <span class="string">'elapsed'</span>: du,</span><br><span class="line">            <span class="string">'estimated'</span>: self.begin_time + (du / percent) <span class="keyword">if</span> cur <span class="keyword">else</span> <span class="string">'--'</span>,</span><br><span class="line">        &#125;) + <span class="string">' '</span> * self.bar_length</span><br><span class="line">        complete = string[<span class="number">0</span>:int(percent * self.bar_length)]</span><br><span class="line">        incomplete = string[int(percent * self.bar_length):self.bar_length]</span><br><span class="line">        print(self.fmt.format(**&#123;</span><br><span class="line">            <span class="string">'complete'</span>: self.text_h_white(self.bg_h_blue(complete)),</span><br><span class="line">            <span class="string">'incomplete'</span>: self.text_h_white(self.bg_white(incomplete)),</span><br><span class="line">            <span class="string">'percent'</span>: self.text_h_purple(<span class="string">'&#123;:.2%&#125;'</span>.format(percent)),</span><br><span class="line">            <span class="string">'cur'</span>: self.text_h_black_green(cur),</span><br><span class="line">            <span class="string">'total'</span>: self.text_h_red(self.total),</span><br><span class="line">        &#125;), end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">begin</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.begin_time = datetime.now()</span><br><span class="line">        <span class="keyword">if</span> self.msg:</span><br><span class="line">            print(self.text_h_yellow(<span class="string">'&gt;&gt;&gt; %s &lt;&lt;&lt;'</span> % self.msg))</span><br><span class="line">        self.print(self.cur)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.print(self.total)</span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = ProcessBar(<span class="number">143</span>, msg=<span class="string">'123'</span>)</span><br><span class="line">    p.begin()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">143</span>):</span><br><span class="line">        sleep(<span class="number">0.1</span>)  <span class="comment"># process ...</span></span><br><span class="line">        p.print(i + <span class="number">1</span>)</span><br><span class="line">    p.end()</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/python-process-bar.png" alt></p><p>示例代码是一个彩色进度条，关于彩色的控制可参考我的另一篇文章：<a href="/2018/07/14/terminal-colorful/" title="Linux终端彩色输出">Linux终端彩色输出</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python魔法函数：属性访问</title>
      <link href="/2019/09/23/python-magic-attr/"/>
      <url>/2019/09/23/python-magic-attr/</url>
      
        <content type="html"><![CDATA[<p>Python有以下关于属性访问的魔法方法：</p><ul><li><code>__getattr__(self, item)</code>: 访问不存在的属性时调用</li><li><code>__getattribute__(self, item)</code>: 访问属性时调用（先调用该方法，查看是否存在该属性，若不存在，则继续调用方法<code>__getattr__</code>）</li><li><code>__setattr__(self, key, value)</code>: 设置对象属性时调用</li><li><code>__delattr__(self, item)</code>: 删除属性时调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattr__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattribute__'</span>)</span><br><span class="line">        <span class="keyword">return</span> super().__getattribute__(item)   <span class="comment"># or: object.__getattribute__(self, item)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        print(<span class="string">'__setattr__'</span>)</span><br><span class="line">        super().__setattr__(key, value)     <span class="comment"># or: object.__setattr__(self, key, value)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__delattr__'</span>)</span><br><span class="line">        super().__delattr__(item)       <span class="comment"># or: object.__delattr__(self, item)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test = Test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.a</span><br><span class="line">__getattribute__</span><br><span class="line">__getattr__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.a = <span class="number">1</span></span><br><span class="line">__setattr__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test.b</span><br><span class="line">__getattribute__</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell控制语句</title>
      <link href="/2019/09/16/shell-control-statement/"/>
      <url>/2019/09/16/shell-control-statement/</url>
      
        <content type="html"><![CDATA[<h2 id="If语句"><a href="#If语句" class="headerlink" title="If语句"></a>If语句</h2><p>if语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1; <span class="keyword">then</span>     <span class="comment"># if语句块，必须出现一次</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition2; <span class="keyword">then</span>   <span class="comment"># elif语句块，可出现0次或多次</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>                    <span class="comment"># else语句块，只能出现0次或1次</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例，判断两个数是否相等：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 等于 b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 大于 b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a 小于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"没有符合的条件"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>for语句一般格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN; <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>可以通过一些技巧快速生成序列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> $(ls); <span class="keyword">do</span> ... <span class="keyword">done</span>             <span class="comment"># 遍历当前文件夹下所有文件（夹）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;; <span class="keyword">do</span> ... <span class="keyword">done</span>           <span class="comment"># 遍历1~10</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> &#123;a..f&#125;; <span class="keyword">do</span> ... <span class="keyword">done</span>            <span class="comment"># 遍历a~f</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 10); <span class="keyword">do</span> ... <span class="keyword">done</span>       <span class="comment"># 遍历1~10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 2 10); <span class="keyword">do</span> ... <span class="keyword">done</span>     <span class="comment"># 遍历1~10，但步长为2</span></span><br></pre></td></tr></table></figure><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><p>while语句一般格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition; <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$int</span> -lt 5 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$int</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">"int++"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="until语句"><a href="#until语句" class="headerlink" title="until语句"></a>until语句</h2><p>同while语句一样，但与while语句不同的是，while语句中条件为真时，才执行循环语句块，而until语句中，条件为假时才执行循环语句块，这一点恰好相反。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">until condition; <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int=10</span><br><span class="line">until [ <span class="variable">$int</span> -lt 5 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$int</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">"int--"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><p>case语句块与其他语言中的switch非常相像，语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> var <span class="keyword">in</span></span><br><span class="line">mode1)          <span class="comment"># 匹配模式1</span></span><br><span class="line">    ...</span><br><span class="line">    ;;</span><br><span class="line">mode2|mode3)    <span class="comment"># 当多个模式使用同一段语句块时，可使用`|`进行分隔</span></span><br><span class="line">    ...</span><br><span class="line">    ;;</span><br><span class="line">*)              <span class="comment"># 其他模式匹配不了时，执行该语句块，可选</span></span><br><span class="line">    ...</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>示例代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入选项（1, 2, 3）: "</span> choice</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$choice</span> <span class="keyword">in</span></span><br><span class="line">1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你选择了1"</span></span><br><span class="line">    ;;</span><br><span class="line">2)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你选择了2"</span></span><br><span class="line">    ;;</span><br><span class="line">3)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你选择了3"</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你只能在1、2、3中进行选择"</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p>continue的用法与其他语言的用法基本一致，都是用来终止本次循环并进行下一次循环。</p><p>break表示跳出循环，但与其他语言不同的是，如果是多重嵌套循环，break表示跳出所有循环，而不是跳出一层循环，如果仅想跳出一层或n层循环，可在后面添加一个数字用来表示跳出循环的层数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入选项（1, 2, 3）: "</span> choice</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$choice</span> <span class="keyword">in</span></span><br><span class="line">    1|2|3)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"你的选项为: <span class="variable">$choice</span>"</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">"你的输入不符合要求，请重新输入: "</span> choice</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Go Modules</title>
      <link href="/2019/09/12/using-go-modules/"/>
      <url>/2019/09/12/using-go-modules/</url>
      
        <content type="html"><![CDATA[<p><code>go modules</code>是golang1.11新加的特性。将环境变量<code>GO111MODULE</code>设置为<code>on</code>来开启<code>modules</code>功能。</p><h2 id="go-mod命令"><a href="#go-mod命令" class="headerlink" title="go mod命令"></a><code>go mod</code>命令</h2><p>golang提供了<code>go mod</code>命令来管理包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">help</span> mod</span><br><span class="line">Go mod provides access to operations on modules.</span><br><span class="line"></span><br><span class="line">Note that support <span class="keyword">for</span> modules is built into all the go commands,</span><br><span class="line">not just <span class="string">'go mod'</span>. For example, day-to-day adding, removing, upgrading,</span><br><span class="line">and downgrading of dependencies should be <span class="keyword">done</span> using <span class="string">'go get'</span>.</span><br><span class="line">See <span class="string">'go help modules'</span> <span class="keyword">for</span> an overview of module functionality.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">    go mod &lt;<span class="built_in">command</span>&gt; [arguments]</span><br><span class="line"></span><br><span class="line">The commands are:</span><br><span class="line"></span><br><span class="line">    download    download modules to <span class="built_in">local</span> cache</span><br><span class="line">    edit        edit go.mod from tools or scripts</span><br><span class="line">    graph       <span class="built_in">print</span> module requirement graph</span><br><span class="line">    init        initialize new module <span class="keyword">in</span> current directory</span><br><span class="line">    tidy        add missing and remove unused modules</span><br><span class="line">    vendor      make vendored copy of dependencies</span><br><span class="line">    verify      verify dependencies have expected content</span><br><span class="line">    why         explain why packages or modules are needed</span><br><span class="line"></span><br><span class="line">Use <span class="string">"go help mod &lt;command&gt;"</span> <span class="keyword">for</span> more information about a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="在项目中使用go-modules"><a href="#在项目中使用go-modules" class="headerlink" title="在项目中使用go modules"></a>在项目中使用<code>go modules</code></h2><h3 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h3><p>创建一个新项目，并使用<code>go mod init</code>初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir hello</span><br><span class="line">$ cd hello</span><br><span class="line">$ go mod init</span><br></pre></td></tr></table></figure><p>初始化之后会创建<code>go.mod</code>文件，<code>go.mod</code>提供了4个指令：<code>module</code>、<code>require</code>、<code>replace</code>、<code>exclude</code>。</p><ul><li><code>module</code>: 指定包的名字</li><li><code>require</code>: 指定依赖项模块</li><li><code>replace</code>: 指定可以替换的依赖项模块</li><li><code>exclude</code>: 指定可以忽略的依赖项模块</li></ul><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>新建一个<code>main.go</code>文件，内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(http.StatusOK, <span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接执行<code>go run main.go</code>，会发现<code>go mod</code>会自动检查并加载依赖。</p><h3 id="使用go-get命令"><a href="#使用go-get命令" class="headerlink" title="使用go get命令"></a>使用<code>go get</code>命令</h3><p>除了直接执行程序自动加载依赖以外，还可以使用<code>go get</code>命令添加或升级依赖。</p><ul><li><code>go get -u</code>将会升级到最新的次要版本或者修订版本</li><li><code>go get package@version</code>，将会获取指定version的package</li></ul><p>执行<code>go get</code>命令会自动更新<code>go.mod</code>文件。</p><h2 id="GOPROXY设置"><a href="#GOPROXY设置" class="headerlink" title="GOPROXY设置"></a><code>GOPROXY</code>设置</h2><p>当我们下载依赖包时，由于一些原因，导致下载失败，这时候我们可以通过设置<code>GOPROXY</code>来解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOPROXY=https://mirrors.aliyun.com/goproxy/</span><br></pre></td></tr></table></figure><p>我们也可以通过<a href="https://github.com/goproxyio/goproxy" target="_blank" rel="noopener">goproxy</a>来构建自己的私有服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Angular、React、Vue项目</title>
      <link href="/2019/09/11/deploy-node-app-in-docker/"/>
      <url>/2019/09/11/deploy-node-app-in-docker/</url>
      
        <content type="html"><![CDATA[<p>今天重新整理了一下<a href="https://angular.io/" target="_blank" rel="noopener">Angular</a>、<a href="https://reactjs.org/" target="_blank" rel="noopener">React</a>、<a href="http://vuejs.org/" target="_blank" rel="noopener">Vue</a>的部署方案，采用docker+nginx方式进行部署。</p><ul><li><code>nginx.conf</code></li><li><code>Dockerfile</code></li><li><code>docker-compose.yaml</code></li></ul><a id="more"></a><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><h3 id="编写nginx-conf文件"><a href="#编写nginx-conf文件" class="headerlink" title="编写nginx.conf文件"></a>编写<code>nginx.conf</code>文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> _;</span><br><span class="line">        <span class="attribute">root</span>        /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>       index.html index.htm;</span><br><span class="line">        <span class="attribute">try_files</span>   <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写<code>Dockerfile</code>文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### build app</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.10</span>-alpine as build-app</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install &amp;&amp; npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### final image</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build-app /app/dist /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><h3 id="编写docker-compose-yaml文件"><a href="#编写docker-compose-yaml文件" class="headerlink" title="编写docker-compose.yaml文件"></a>编写<code>docker-compose.yaml</code>文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d --build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> angular </tag>
            
            <tag> reactjs </tag>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker快速搭建Radicale服务</title>
      <link href="/2019/09/02/docker-radicale/"/>
      <url>/2019/09/02/docker-radicale/</url>
      
        <content type="html"><![CDATA[<p><a href="https://radicale.org/" target="_blank" rel="noopener">Radicale</a>：A Free and Open-Source CalDAV and CardDAV Server。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/hypc/radicale.git</span><br><span class="line">$ <span class="built_in">cd</span> radicale</span><br><span class="line">$ docker-compose up -d --build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> radicale </tag>
            
            <tag> carddav </tag>
            
            <tag> caldav </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python ThreadLocal</title>
      <link href="/2019/08/28/python-thread-local/"/>
      <url>/2019/08/28/python-thread-local/</url>
      
        <content type="html"><![CDATA[<p>我们知道多线程环境下，每一个线程均可以使用所属进程的全局变量。如果一个线程对全局变量进行了修改，将会影响到其他所有的线程。为了避免多个线程同时对变量进行修改，引入了线程同步机制，通过互斥锁，条件变量或者读写锁来控制对全局变量的访问。</p><p>只用全局变量并不能满足多线程环境的需求，很多时候线程还需要拥有自己的私有数据，这些数据对于其他线程来说不可见。因此线程中也可以使用局部变量，局部变量只有线程自身可以访问，同一个进程下的其他线程不可访问。</p><p>下图给出了线程中这几种变量的存在情况：</p><p><img src="/images/python-thread-local-1.png" alt></p><a id="more"></a><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>有时候使用局部变量不太方便，例如，在实际生产环境中，我们需要调用大量函数，每个函数都需要很多局部变量，这时候用传递参数的方法会非常繁琐。</p><p>为了解决这个问题，一个直观的的方法就是建立一个全局字典，保存进程ID到该进程局部变量的映射关系，运行中的线程可以根据自己的ID来获取本身拥有的数据。这样，就可以避免在函数调用中传递参数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">global_data = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    key = id(threading.current_thread())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> global_data.get(key):</span><br><span class="line">        global_data[key] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        global_data[key] += <span class="number">1</span></span><br><span class="line">    print(threading.current_thread().getName(), global_data[key])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        thread = threading.Thread(target=func)</span><br><span class="line">        thread.start()</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>Python还提供了ThreadLocal变量，它本身是一个全局变量，但是每个线程却可以利用它来保存属于自己的私有数据，这些私有数据对其他线程也是不可见的。</p><p>ThreadLocal示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">global_data = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(global_data, <span class="string">'num'</span>):</span><br><span class="line">        global_data.num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        global_data.num += <span class="number">1</span></span><br><span class="line">    print(threading.current_thread().getName(), global_data.num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        thread = threading.Thread(target=func)</span><br><span class="line">        thread.start()</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>上面示例中每个线程都可以通过<code>global_data.num</code>获得自己独有的数据，并且每个线程读取到的<code>global_data</code>都不同，真正做到线程之间的隔离。</p><h2 id="ThreadLocal的实现原理"><a href="#ThreadLocal的实现原理" class="headerlink" title="ThreadLocal的实现原理"></a>ThreadLocal的实现原理</h2><p>其实ThreadLocal的原理特别简单，就是创建一个全局字典，然后将线程的标识符作为key，相应线程的数据作为value。</p><p>感兴趣的童鞋可以阅读<code>threading.local</code>源码，里面一些编辑技巧非常值得学习。</p><h2 id="ThreadLocal的局限"><a href="#ThreadLocal的局限" class="headerlink" title="ThreadLocal的局限"></a>ThreadLocal的局限</h2><p>Python自带的ThreadLocal只能基于线程使用，而以下两种情况并不适合使用ThreadLocal：</p><ol><li>协程：一些阻塞的操作，我们经常会使用到协程（如gevent）进行处理；</li><li>线程池：在WSGI中，并不能保证每次都产生一个新的线程来处理请求，那么上一个请求遗留下来的数据将会污染当前请求。</li></ol><p>要解决这两个问题，需要设计一个Local类，它能做到线程以及协程之间数据的隔离，并且支持清理某个线程或协程下的数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django路由系统</title>
      <link href="/2019/08/22/django-urls/"/>
      <url>/2019/08/22/django-urls/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.djangoproject.com/" title="The web framework for perfectionists with deadlines." target="_blank" rel="noopener">Django</a>的路由是怎么回事在这里不再赘述，这里主要说一下<a href="https://docs.djangoproject.com/en/2.2/ref/urls/#django.conf.urls.include" target="_blank" rel="noopener"><code>include()</code></a>的用法，以及装配路由的一点技巧。</p><h2 id="include"><a href="#include" class="headerlink" title="include()"></a>include()</h2><p><a href="https://docs.djangoproject.com/en/2.2/ref/urls/#django.conf.urls.include" target="_blank" rel="noopener"><code>include</code></a>主要有下面两种用法：</p><ul><li><code>include(module, namespace=None)</code></li><li><code>include(pattern_list)</code></li></ul><a id="more"></a><h3 id="用法一：include-module-namespace-None"><a href="#用法一：include-module-namespace-None" class="headerlink" title="用法一：include(module, namespace=None)"></a>用法一：<code>include(module, namespace=None)</code></h3><p>这种用法中，参数<code>module</code>类型为<code>str|object</code>，它的值是一个模块，或者是一个模块路径，可以正常定位这个模块，<code>include</code>函数会自动加载<code>module</code>中的<code>urlpatterns</code>属性。<code>urlpatterns</code>是一个列表，类型为<code>list[RegexURLResolver|RegexURLPattern]</code>。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ... snip ...</span></span><br><span class="line">    url(<span class="string">r'^community/'</span>, include(<span class="string">'django_website.aggregator.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^contact/'</span>, include(<span class="string">'django_website.contact.urls'</span>)),</span><br><span class="line">    <span class="comment"># ... snip ...</span></span><br><span class="line">    url(<span class="string">r'^author-polls/'</span>, include(<span class="string">'polls.urls'</span>, namespace=<span class="string">'author-polls'</span>)),</span><br><span class="line">    url(<span class="string">r'^publisher-polls/'</span>, include(<span class="string">'polls.urls'</span>, namespace=<span class="string">'publisher-polls'</span>)),</span><br><span class="line">    <span class="comment"># ... snip ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="用法二：include-pattern-list"><a href="#用法二：include-pattern-list" class="headerlink" title="用法二：include(pattern_list)"></a>用法二：<code>include(pattern_list)</code></h3><p>参数<code>pattern_list</code>是一个列表，类型为<code>list[RegexURLResolver|RegexURLPattern]</code>。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">polls_patterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.IndexView.as_view(), name=<span class="string">'index'</span>),</span><br><span class="line">    url(<span class="string">r'^(?P&lt;pk&gt;\d+)/$'</span>, views.DetailView.as_view(), name=<span class="string">'detail'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^polls/'</span>, include(polls_patterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="自动装配路由"><a href="#自动装配路由" class="headerlink" title="自动装配路由"></a>自动装配路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ##################################</span></span><br><span class="line"><span class="comment"># #### &lt;django_project&gt;/urls.py ####</span></span><br><span class="line"><span class="comment"># ##################################</span></span><br><span class="line"><span class="keyword">from</span> importlib <span class="keyword">import</span> import_module</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"></span><br><span class="line">urlpatterns = []    <span class="comment"># settings.INSTALLED_APPS之外的urls，可直接在这写</span></span><br><span class="line"></span><br><span class="line">_c_urlpatterns, _p_urlpatterns = [], []   <span class="comment"># 具有相同url前缀，但又分属不同模块的pattern_list</span></span><br><span class="line"><span class="keyword">for</span> app <span class="keyword">in</span> settings.INSTALLED_APPS:</span><br><span class="line">    <span class="keyword">if</span> app.startswith(<span class="string">'django.contrib'</span>):    <span class="comment"># 忽略django内置模块</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        urlconf_module = import_module(app + <span class="string">'.urls'</span>)</span><br><span class="line">        urlpatterns += getattr(urlconf_module, <span class="string">'urlpatterns'</span>, [])</span><br><span class="line">        _c_urlpatterns += getattr(urlconf_module, <span class="string">'c_urlpatterns'</span>, [])</span><br><span class="line">        _p_urlpatterns += getattr(urlconf_module, <span class="string">'p_urlpatterns'</span>, [])</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    url(<span class="string">r'^cs/(?P&lt;c_id&gt;\w&#123;1,32&#125;)'</span>, include(_c_urlpatterns)),</span><br><span class="line">    url(<span class="string">r'^ps/(?P&lt;p_id&gt;\w&#123;1,32&#125;)'</span>, include(_p_urlpatterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防止表单重复提交</title>
      <link href="/2019/08/22/duplicate-submission/"/>
      <url>/2019/08/22/duplicate-submission/</url>
      
        <content type="html"><![CDATA[<p>在一些特殊场景下，可能会导致表单重复提交，如：</p><ul><li>网络延时，用户多次点击提交</li><li>刷新页面导致重复提交表单</li><li>后退之后再次提交表单</li><li>…</li></ul><p>有些幂等操作允许重复提交表单，但大多数操作都是非幂等的，重复提交将会导致系统异常甚至系统崩溃。所以，我们需要尽量避免表单重复提交。</p><p>这里有两种思路：</p><ul><li>前端拦截，这可以拦截绝大部分用户误操作</li><li>后端处理</li></ul><a id="more"></a><h2 id="前端处理"><a href="#前端处理" class="headerlink" title="前端处理"></a>前端处理</h2><p>表单中添加隐藏参数<code>noncestr</code>（是一个随机字符串，用来标识表单），提交表单时，<code>noncestr</code>一起提交，然后锁定表单，将表单状态设置为不可提交（或一段时间内不可提交），如果对表单再次编辑，修改<code>noncestr</code>值，解除表单锁定状态。</p><h2 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h2><ol><li>先从cache中查询<code>noncestr</code>对应操作，</li><li>如果查询到了对应的操作，判断操作的处理状态<ol><li>已经完成，直接将操作对应的结果返回</li><li>未完成，返回202响应，告知客户端已接受该请求，并正在处理中</li></ol></li><li>如果未查询到对应的操作<ol><li>查询数据库，看是否有对应操作的记录</li><li>如果有对应的操作记录，将操作结果存放到缓存中，然后返回处理结果</li><li>如果没有，进行正常的业务处理，将操作结果存放到缓存中，然后返回处理结果</li></ol></li></ol><p>Python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cache = get_cache()   <span class="comment"># 缓存</span></span><br><span class="line">timeout = <span class="number">30</span>    <span class="comment"># 缓存超时时间</span></span><br><span class="line"></span><br><span class="line">cache_key = <span class="string">'$(session_id)_$(noncestr)'</span></span><br><span class="line">value = cache.get(cache_key)</span><br><span class="line"><span class="keyword">if</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> value[<span class="string">'status'</span>] == <span class="string">'doing'</span>:</span><br><span class="line">    <span class="keyword">return</span> Response(<span class="number">202</span>)</span><br><span class="line"><span class="keyword">elif</span> value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> value[<span class="string">'status'</span>] == <span class="string">'done'</span>:</span><br><span class="line">    <span class="keyword">return</span> value.response</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cache.set(cache_key, &#123;<span class="string">'status'</span>: <span class="string">'doing'</span>&#125;, timeout)</span><br><span class="line">    response = do_something()   <span class="comment"># 业务处理</span></span><br><span class="line">    cache.set(cache_key, &#123;<span class="string">'status'</span>: <span class="string">'done'</span>, <span class="string">'response'</span>: response&#125;, timeout)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">()</span>:</span></span><br><span class="line">    db = get_db()   <span class="comment"># 数据库</span></span><br><span class="line">    data = db.get(noncestr) <span class="comment"># 查询时，可以附带其他条件防止误查</span></span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = ...  <span class="comment"># 正常业务处理</span></span><br><span class="line">        <span class="keyword">return</span> Response(data)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beego快速入门</title>
      <link href="/2019/08/16/beego-get-started/"/>
      <url>/2019/08/16/beego-get-started/</url>
      
        <content type="html"><![CDATA[<p><a href="https://beego.me/" target="_blank" rel="noopener">Beego</a>是一个快速开发Go应用的HTTP框架，他可以用来快速开发API、Web及后端服务等各种应用，是一个RESTful的框架，主要设计灵感来源于tornado、sinatra和flask这三个框架，但是结合了Go本身的一些特性（interface、struct嵌入等）而设计的一个框架。</p><h2 id="beego执行逻辑"><a href="#beego执行逻辑" class="headerlink" title="beego执行逻辑"></a>beego执行逻辑</h2><p><a href="https://beego.me/" target="_blank" rel="noopener">Beego</a>是一个典型的MVC架构，它的执行逻辑如下图所示：</p><p><img src="/images/beego-get-started-1.png" alt></p><a id="more"></a><h2 id="beego项目结构"><a href="#beego项目结构" class="headerlink" title="beego项目结构"></a>beego项目结构</h2><p>beego项目一般结构为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">proj</span><br><span class="line">|-- conf</span><br><span class="line">|   |-- app.conf</span><br><span class="line">|-- controllers</span><br><span class="line">|   |-- admin</span><br><span class="line">|   |-- default.go</span><br><span class="line">|-- main.go</span><br><span class="line">|-- models</span><br><span class="line">|   |-- models.go</span><br><span class="line">|-- static</span><br><span class="line">|   |-- css</span><br><span class="line">|   |-- ico</span><br><span class="line">|   |-- img</span><br><span class="line">|   |-- js</span><br><span class="line">|-- views</span><br><span class="line">    |-- admin</span><br><span class="line">    |-- index.tpl</span><br></pre></td></tr></table></figure><p>从上面的目录结构我们可以看出来<code>M</code>（models）、<code>V</code>（views）和<code>C</code>（controllers）的结构，<code>main.go</code>是入口文件。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>安装或升级beego：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/astaxie/beego</span><br></pre></td></tr></table></figure><p><code>hello.go</code>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MainController <span class="keyword">struct</span> &#123;</span><br><span class="line">    beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MainController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">    this.Ctx.WriteString(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    beego.Router(<span class="string">"/"</span>, &amp;MainController&#123;&#125;)</span><br><span class="line">    beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并且运行服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go build -o hello hello.go</span><br><span class="line">$ ./hello</span><br></pre></td></tr></table></figure><p>打开浏览器浏览<code>http://localhost:8080</code>，将看到返回<code>hello world</code>。</p><h2 id="使用bee命令快速创建应用"><a href="#使用bee命令快速创建应用" class="headerlink" title="使用bee命令快速创建应用"></a>使用bee命令快速创建应用</h2><p>安装或升级bee：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/beego/bee</span><br></pre></td></tr></table></figure><p>快速创建应用并应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src</span><br><span class="line">$ bee new hello</span><br><span class="line">$ <span class="built_in">cd</span> hello</span><br><span class="line">$ bee run</span><br></pre></td></tr></table></figure><p>打开浏览器浏览<code>http://localhost:8080</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> beego </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo集成Disqus</title>
      <link href="/2019/08/16/hexo-disqus/"/>
      <url>/2019/08/16/hexo-disqus/</url>
      
        <content type="html"><![CDATA[<p><a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>是一个非常流行的为网站集成评论系统的工具，同样，<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>也可以集成<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>以便可以和读者交流。</p><h2 id="创建站点"><a href="#创建站点" class="headerlink" title="创建站点"></a>创建站点</h2><p>登录Disqus后，创建一个站点：</p><p><img src="/images/disqus-1.png" alt></p><p>根据提示填写表单，注意这里生成的<code>shortname</code>，在后面配置Hexo时会用到。</p><a id="more"></a><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>修改主题配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">your_shortname</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>执行<code>hexo serve</code>命令，打开文章，效果如下：</p><p><img src="/images/disqus-2.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> disqus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go项目代码组织结构</title>
      <link href="/2019/08/16/golang-project-structure/"/>
      <url>/2019/08/16/golang-project-structure/</url>
      
        <content type="html"><![CDATA[<h2 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h2><p>Go工作空间下有三个子目录：</p><ul><li><code>src</code>: 存放源代码</li><li><code>pkg</code>: 编译后生成的文件</li><li><code>bin</code>: 编译后生成的可执行文件</li></ul><p>原则上，项目代码都应该放在<code>$GOPATH</code>目录下，并且按照<code>$GOPATH/$git_url</code>路径存放项目代码。</p><p>例如，我有一个<code>go-demos</code>的项目，存放路径为<code>$GOPATH/github.com/hypc/go-demos/</code>。</p><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><p>目录结构基本上就是一个项目的门面，很多时候我们从目录结构中就能够看出开发者对这门语言是否有足够的经验，所以在这里首先要介绍的最佳实践就是如何在Go语言的项目或者服务中组织代码。</p><p>官方并没有给出一个推荐的目录划分方式，很多项目对于目录结构的划分也非常随意，但是社区中还是有一些比较常见的约定，例如：<a href="https://github.com/golang-standards/project-layout/" target="_blank" rel="noopener"><code>golang-standards/project-layout</code></a>项目中就定义了一个比较标准的目录结构。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">api/            -- OpenAPI/Swagger specs, JSON schema files, protocol definition files.</span><br><span class="line">assets/         -- Other assets to go along with your repository (images, logos, etc).</span><br><span class="line">build/          -- Packaging and Continuous Integration.</span><br><span class="line">cmd/            -- Main applications for this project.</span><br><span class="line">configs/        -- Configuration file templates or default configs.</span><br><span class="line">deployments/    -- IaaS, PaaS, system and container orchestration deployment configurations and templates (docker-compose, kubernetes/helm, mesos, terraform, bosh).</span><br><span class="line">docs/           -- Design and user documents (in addition to your godoc generated documentation).</span><br><span class="line">examples/       -- Examples for your applications and/or public libraries.</span><br><span class="line">githooks/       -- Git hooks.</span><br><span class="line">init/           -- System init (systemd, upstart, sysv) and process manager/supervisor (runit, supervisord) configs.</span><br><span class="line">internal/       -- Private application and library code. This is the code you don&apos;t want others importing in their applications or libraries.</span><br><span class="line">    |-- app/    -- application code can go in the `/internal/app` directory</span><br><span class="line">    |-- pkg/    -- the code shared by those apps in the `/internal/pkg` directory</span><br><span class="line">pkg/            -- Library code that&apos;s ok to use by external applications (e.g., `/pkg/mypubliclib`). Other projects will import these libraries expecting them to work, so think twice before you put something here :-)</span><br><span class="line">scripts/        -- Scripts to perform various build, install, analysis, etc operations.</span><br><span class="line">test/           -- Additional external test apps and test data.</span><br><span class="line">third_party/    -- External helper tools, forked code and other 3rd party utilities (e.g., Swagger UI).</span><br><span class="line">tools/          -- Supporting tools for this project. Note that these tools can import code from the `/pkg` and /internal directories.</span><br><span class="line">vendor/         -- Application dependencies (managed manually or by your favorite dependency management tool like dep).</span><br><span class="line">web/            -- Web application specific components: static web assets, server side templates and SPAs.</span><br><span class="line">website/        -- This is the place to put your project&apos;s website dapopta if you are not using Github pages.</span><br><span class="line">.gitignore      -- gitignore</span><br><span class="line">LICENSE.md      -- LICENSE</span><br><span class="line">Makefile        -- call scripts from `/scripts`</span><br><span class="line">README.md       -- README</span><br></pre></td></tr></table></figure><h3 id="pkg"><a href="#pkg" class="headerlink" title="/pkg"></a>/pkg</h3><p><code>/pkg</code>目录是Go语言项目中非常常见的目录，这个目录中存放的就是项目中可以被外部应用使用的代码库，其他的项目可以直接通过<code>import</code>引入这里的代码，所以当我们将代码放入<code>pkg</code>时一定要慎重。</p><h3 id="internal"><a href="#internal" class="headerlink" title="/internal"></a>/internal</h3><p>私有代码推荐放到<code>/internal</code>目录中，真正的项目代码应该写在<code>/internal/app</code>里，同时这些内部应用依赖的代码库应该在<code>/internal/pkg</code>子目录和<code>/pkg</code>中。</p><h3 id="cmd"><a href="#cmd" class="headerlink" title="/cmd"></a>/cmd</h3><p><code>/cmd</code>目录中存储的都是当前项目中的可执行文件，该目录下的每一个子目录都应该包含我们希望有的可执行文件。</p><h3 id="api"><a href="#api" class="headerlink" title="/api"></a>/api</h3><p><code>/api</code>目录中存放的就是当前项目对外提供的各种不同类型的API接口定义文件，其中可能包含类似<code>/api/protobuf-spec</code>、<code>/api/thrift-spec</code>、<code>/api/swagger-spec</code>的子目录。</p><h3 id="configs"><a href="#configs" class="headerlink" title="/configs"></a>/configs</h3><p><code>/configs</code>目录存放默认配置文件或配置模板文件。</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="/scripts"></a>/scripts</h3><p><code>/scripts</code>存放用于构建、安装、分析等操作的脚本文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go快速入门</title>
      <link href="/2019/08/16/golang-get-started/"/>
      <url>/2019/08/16/golang-get-started/</url>
      
        <content type="html"><![CDATA[<p>2009年11月，Google发布了Go语言，在世界范围内引发了轰动。2015年和2016年中国区的Go语言大会分别在上海和北京召开，来自Go语言团队的开发人员均作了相关的报告。纵观这几年来的发展趋势，Go语言已经成为云计算、云存储时代最重要的基础编程语言。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://golang.org/dl/" target="_blank" rel="noopener">下载</a>相应的压缩包，并解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -C /usr/<span class="built_in">local</span> -xvf go<span class="variable">$VERSION</span>.<span class="variable">$OS</span>-<span class="variable">$ARCH</span>.tar.gz</span><br></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/go/bin</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>创建你的工作目录<code>$HOME/go</code>（可以使用其他目录），并设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:$(go env GOPATH)/bin</span><br></pre></td></tr></table></figure><p>然后在其中创建目录<code>src/hello</code>，并且创建文件<code>hello.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"hello, world\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并且执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/hello</span><br><span class="line">$ go build</span><br><span class="line">$ ./hello</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Mixin机制</title>
      <link href="/2019/08/15/python-mixin/"/>
      <url>/2019/08/15/python-mixin/</url>
      
        <content type="html"><![CDATA[<p>在面向对象编程中，Mixin是一种类，这种类包含了其他类要使用的方法，但不必充当其他类的父类。其他类是如何获取Mixin中的方法因语言的不同而不同。所以有时候Mixin被描述为<code>include</code>（包含）而不是<code>inheritance</code>（继承）。</p><p>Mixins鼓励代码重用，并且可以用于避免多重继承可能导致（如钻石问题）的继承歧义，或者解决一个缺乏对一种语言的多重继承的支持。Mixin也可以被看作<code>实现方法</code>的接口。这种模式是强制依赖性反转原理的一个例子。</p><p>Mixins是一种语言概念，允许程序员将一些代码注入到一个类中。Mixin编程是一种软件开发的风格，其中功能单元在一个类中创建，然后与其他类混合。Mixin类扮演父类的角色，包含其他类想要的功能。</p><a id="more"></a><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>在自然界中，有些鸟会飞、有些不会，还有些鸟会游泳。这时候我们可以将飞行、游泳这种能力设计成mixins，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="string">"""鸟类"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwimMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'can swim'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'can fly'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span><span class="params">(Bird, SwimMixin)</span>:</span></span><br><span class="line">    <span class="string">"""企鹅"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Eagle</span><span class="params">(Bird, FlyMixin)</span>:</span></span><br><span class="line">    <span class="string">"""鹰"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span><span class="params">(Bird)</span>:</span></span><br><span class="line">    <span class="string">"""鸵鸟"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>当然，有些哺乳动物也会飞行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="string">"""哺乳动物"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span><span class="params">(Mammal, FlyMixin)</span>:</span></span><br><span class="line">    <span class="string">"""蝙蝠"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="在Django项目中的应用"><a href="#在Django项目中的应用" class="headerlink" title="在Django项目中的应用"></a>在Django项目中的应用</h2><p>Django项目中大量使用了Mixins方式编程，如<code>middleware</code>、<code>forms</code>、<code>views</code>等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextMixin</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A default context mixin that passes the keyword arguments received by</span></span><br><span class="line"><span class="string">    get_context_data() as the template context.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    extra_context = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        kwargs.setdefault(<span class="string">'view'</span>, self)</span><br><span class="line">        <span class="keyword">if</span> self.extra_context <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            kwargs.update(self.extra_context)</span><br><span class="line">        <span class="keyword">return</span> kwargs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateResponseMixin</span>:</span></span><br><span class="line">    <span class="string">"""A mixin that can be used to render a template."""</span></span><br><span class="line">    template_name = <span class="literal">None</span></span><br><span class="line">    template_engine = <span class="literal">None</span></span><br><span class="line">    response_class = TemplateResponse</span><br><span class="line">    content_type = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render_to_response</span><span class="params">(self, context, **response_kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return a response, using the `response_class` for this view, with a</span></span><br><span class="line"><span class="string">        template rendered with the given context.</span></span><br><span class="line"><span class="string">        Pass response_kwargs to the constructor of the response class.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        response_kwargs.setdefault(<span class="string">'content_type'</span>, self.content_type)</span><br><span class="line">        <span class="keyword">return</span> self.response_class(</span><br><span class="line">            request=self.request,</span><br><span class="line">            template=self.get_template_names(),</span><br><span class="line">            context=context,</span><br><span class="line">            using=self.template_engine,</span><br><span class="line">            **response_kwargs</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_template_names</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return a list of template names to be used for the request. Must return</span></span><br><span class="line"><span class="string">        a list. May not be called if render_to_response() is overridden.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.template_name <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                <span class="string">"TemplateResponseMixin requires either a definition of "</span></span><br><span class="line">                <span class="string">"'template_name' or an implementation of 'get_template_names()'"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [self.template_name]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateView</span><span class="params">(TemplateResponseMixin, ContextMixin, View)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Render a template. Pass keyword arguments from the URLconf to the context.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        context = self.get_context_data(**kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.render_to_response(context)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tree命令显示中文问题</title>
      <link href="/2019/08/04/tree-bug-cn/"/>
      <url>/2019/08/04/tree-bug-cn/</url>
      
        <content type="html"><![CDATA[<p>执行<code>tree</code>指令，它会列出指定目录下的所有文件，包括子目录里的文件。</p><p>当遇到文件名（或目录名）中包含中文时，会出现乱码：</p><p><img src="/images/tree-bug-cn-1.png" alt></p><p>这时候可以添加参数<code>-N</code>，执行命令<code>tree -N</code>：</p><p><img src="/images/tree-bug-cn-2.png" alt></p><p>常用别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> tree=<span class="string">'tree -CNF'</span></span><br><span class="line"><span class="built_in">alias</span> treel=<span class="string">'tree -alF'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试分类</title>
      <link href="/2019/07/29/test-classification/"/>
      <url>/2019/07/29/test-classification/</url>
      
        <content type="html"><![CDATA[<p>软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。</p><p>软件测试有许多方法，但对复杂的产品运行有效测试不仅仅是研究过程，更是创造并严格遵守某些呆板步骤的大事。测试的其中一个定义：为了评估而质疑产品的过程；这里的“质疑”是测试员试着对产品做的事，而产品以测试者脚本行为反应作为回答。虽然大部分测试的智力过程不外乎回顾、检查，然而“测试”这个词意味着产品动态分析──让产品流畅运行。程序质量可能，而且通常会，随系统不同而有差异；不过某些公认特性是共通的：可靠性、稳定性、轻便性、易于维护、以及实用性。</p><p><strong>软件测试类型分为</strong>：功能测试、界面测试、性能测试、容量测试、压力测试、安全测试、兼容性测试、安装测试、文档测试、易用性测试、边界测试、健壮性测试、本地化测试、无障碍测试、回归测试、冒烟测试、随机测试、A/B测试。</p><a id="more"></a><p>可以按照以下方式进行分组：</p><ul><li><strong>按开发阶段划分</strong>：单元测试、集成测试、确认测试、系统测试、验收测试；</li><li><strong>按是否查看源码划分</strong>：黑盒测试、白盒测试、灰盒测试；</li><li><strong>按是否执行代码划分</strong>：静态测试、动态测试；</li><li><strong>按自动化程度划分</strong>：人工测试、自动化测试；</li><li><strong>按测试实施组织划分</strong>：开发测试、用户测试、第三方测试；</li><li><strong>按测试所处环境划分</strong>：Alpha测试、Beta测试、Gamma测试。</li></ul><p><img src="/images/test-classification-1.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存降级</title>
      <link href="/2019/07/17/cache-degradation/"/>
      <url>/2019/07/17/cache-degradation/</url>
      
        <content type="html"><![CDATA[<p>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。</p><p>降级的最终目的是保证核心服务可用，即使是有损的。但是有些服务是无法降级的（如加入购物车、结算）。</p><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级。</p><p><strong>页面降级</strong></p><p>在大促或者某些特殊情况下，某些页面占用了一些稀缺服务资源，在紧急情况下可以对其整个降级，以达到丢卒保帅；</p><p><strong>页面片段降级</strong></p><p>比如商品详情页中的商家部分因为数据错误了，此时需要对其进行降级；</p><p><strong>页面异步请求降级</strong></p><p>比如商品详情页上有推荐信息/配送至等异步加载的请求，如果这些信息响应慢或者后端服务有问题，可以进行降级；</p><a id="more"></a><p><strong>服务功能降级</strong></p><p>比如渲染商品详情页时需要调用一些不太重要的服务：相关分类、热销榜等，而这些服务在异常情况下直接不获取，即降级即可；</p><p><strong>读降级</strong></p><p>比如多级缓存模式，如果后端服务有问题，可以降级为只读缓存，这种方式适用于对读一致性要求不高的场景；</p><p><strong>写降级</strong></p><p>比如秒杀抢购，我们可以只进行Cache的更新，然后异步同步扣减库存到DB，保证最终一致性即可，此时可以将DB降级为Cache。</p><p><strong>爬虫降级</strong></p><p>在大促活动时，可以将爬虫流量导向静态页或者返回空数据，从而保护后端稀缺资源。</p><p><strong>自动开关降级</strong></p><p>自动降级是根据系统负载、资源使用情况、SLA等指标进行降级。</p><p><strong>超时降级</strong></p><p>当访问的数据库/http服务/远程调用响应慢或者长时间响应慢，且该服务不是核心服务的话可以在超时后自动降级；比如商品详情页上有推荐内容/评价，但是推荐内容/评价暂时不展示对用户购物流程不会产生很大的影响；对于这种服务是可以超时降级的。如果是调用别人的远程服务，和对方定义一个服务响应最大时间，如果超时了则自动降级。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存穿透</title>
      <link href="/2019/07/15/cache-penetration/"/>
      <url>/2019/07/15/cache-penetration/</url>
      
        <content type="html"><![CDATA[<p><strong>什么是缓存穿透</strong></p><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>如果有人利用这个（些）不存在的key频繁地攻击我们的应用，也会造成雪崩效应。</p><p><strong>解决思路</strong></p><ol><li><p>使用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。</p></li><li><p>另一个粗暴的方式是将数据库查询到的空值也进行缓存，但缓存过期时间会很短，远低于正常缓存过期时间。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存雪崩</title>
      <link href="/2019/07/15/cache-avalanche/"/>
      <url>/2019/07/15/cache-avalanche/</url>
      
        <content type="html"><![CDATA[<p><strong>什么是缓存雪崩</strong></p><p>缓存雪崩可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，或者缓存服务器宕机，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。</p><p><strong>解决思路</strong></p><ol><li><p>针对缓存已经失效的情况，可以采用加锁计数，或者使用合理的队列数量来避免缓存失效时对数据库造成太大的压力。这种办法虽然能缓解数据库的压力，但是同时又降低了系统的吞吐量。</p></li><li><p>分析用户行为，尽量让缓存失效时间分布均匀，可以用来避免缓存在同一时间大面积失效的情况。也可直接在原有缓存时间上增加一个随机值。</p></li><li><p>可以使用主备或集群的方式来应对缓存服务器宕机的问题。但此时需要处理事务问题，如update时可能会读到脏数据。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存模式</title>
      <link href="/2019/07/15/cache-pattern/"/>
      <url>/2019/07/15/cache-pattern/</url>
      
        <content type="html"><![CDATA[<p>常见的模式有分为两大类：Cache-aside以及Cache-as-SoR。</p><p>SoR(system-of-record)：记录系统，或者可以叫做数据源，即实际存储原始数据的系统。</p><p>Cache：缓存，是SoR的快照数据，Cache的访问速度比SoR要快，放入Cache的目的是提升访问速度，减少回源到SoR的次数。</p><h2 id="Cache-aside"><a href="#Cache-aside" class="headerlink" title="Cache-aside"></a>Cache-aside</h2><p>访问记录系统（SoR）的应用程序代码应首先查询缓存，如果缓存包含数据，则直接从缓存返回数据，绕过SoR。否则，应用程序代码必须从记录系统获取数据，将数据存储在缓存中，然后返回它。写入数据时，必须同时更新缓存以及记录系统。</p><p><strong>读取值的伪代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v = cache.get(k)</span><br><span class="line">if v == null:</span><br><span class="line">    v = sor.get(k)</span><br><span class="line">    cache.put(k, v)</span><br></pre></td></tr></table></figure><p><strong>写入值得伪代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v = new V()</span><br><span class="line">sor.put(k, v)</span><br><span class="line">cache.put(k, v)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Cache-as-SoR"><a href="#Cache-as-SoR" class="headerlink" title="Cache-as-SoR"></a>Cache-as-SoR</h2><p>在Cache-aside模式下，cache的维护逻辑要业务端自己实现和维护，而Cache-as-SoR则是将cache的逻辑放在存储端，即<code>db + cache</code>对于业务调用方而言是透明的一个整体，业务无须关心实现细节，只需<code>get/set</code>即可。Cache-as-SoR模式常见的有Read Through、Write Through、Write Behind。</p><h3 id="Read-Through"><a href="#Read-Through" class="headerlink" title="Read Through"></a>Read Through</h3><p>Read-Through，业务代码首先调用Cache，如果Cache不命中由Cache回源到SoR，而不是业务代码。</p><p>使用Read-Through模式，需要配置一个CacheLoader组件用来回源到SoR加载源数据。</p><h3 id="Write-Through"><a href="#Write-Through" class="headerlink" title="Write Through"></a>Write Through</h3><p>Write-Through，称之为穿透写模式/直写模式，业务代码首先调用Cache写（新增/修改）数据，然后由Cache负责写缓存和写SoR，而不是业务代码。</p><p>使用Write-Through模式需要配置一个CacheWriter组件用来回写SoR。</p><h3 id="Write-Behind"><a href="#Write-Behind" class="headerlink" title="Write Behind"></a>Write Behind</h3><p>Write-Behind，也叫Write-Back，称之为回写模式，不同于Write-Through是同步写SoR和Cache，Write-Behind是异步写。异步之后可以实现批量写、合并写、延时和限流。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes名词解释之Service</title>
      <link href="/2019/07/15/k8s-service/"/>
      <url>/2019/07/15/k8s-service/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes Pod是平凡的，它门会被创建，销毁（生老病死），并且他们是不可复活的。每个Pod都有自己的IP地址，但是在部署中，一段时间内运行的Pod集可能与稍后运行该应用程序的Pod集不同。</p><p>这会导致一个问题：如果某些Pod（称为『后端』）为集群内的其他Pod（称为『前端』）提供功能，前端如何找出并跟踪要连接的IP地址，以便前端可以使用工作负载的后端部分？</p><p>答案是：Service</p><p>在Kubernetes中，Service是一个抽象，它定义了一组逻辑Pod和一个访问它们的策略（有时这种模式称为微服务）。服务所针对的Pod集合通常由选择器确定。</p><p>例如，一个运行3个副本的无状态图像处理后端。那些复制品是可替代的 - 前端并不关心它们使用哪个后端。虽然组成后端集的实际Pod可能会发生变化，但前端客户端不应该知道这一点，也不需要自己跟踪后端集。服务抽象地实现了这种解耦。</p><blockquote><p>有关更多信息，请参阅<a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Service</a>。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes名词解释之Pod</title>
      <link href="/2019/07/12/k8s-pod/"/>
      <url>/2019/07/12/k8s-pod/</url>
      
        <content type="html"><![CDATA[<p>Pod是Kubernetes应用程序的基本执行单元 - Kubernetes应用程序中，创建或部署的Kubernetes对象模型中最小和最简单的单元。Pod表示在群集上运行的进程。</p><p>Pod封装了应用程序的容器（或者，在某些情况下，多个容器），存储资源，唯一的网络IP以及管理容器应该如何运行的选项。Pod表示部署单元：Kubernetes中的单个应用程序实例，可能包含单个容器或者是少量紧密耦合并共享资源的容器。</p><p>Docker是Kubernetes Pod中最常用的容器运行时，但Pods也支持其他容器运行时。</p><p>Kubernetes集群中的Pod可以以两种主要方式使用：</p><ul><li><p>运行单个容器：<code>one-container-per-Pod</code>模型是最常见的Kubernetes用例；在这种情况下，您可以将Pod视为单个容器的包装，而Kubernetes直接管理Pod而不是容器。</p></li><li><p>运行多个需要协同工作的容器：Pod可以封装由多个共址容器组成的应用程序，这些容器紧密耦合并需要共享资源。这些共处一地的容器可能形成一个统一的服务单元 - 一个容器从共享卷向公众提供文件，而一个单独的“sidecar”容器刷新或更新这些文件。Pod将这些容器和存储资源作为单个可管理实体包装在一起。</p></li></ul><p>每个Pod都用于运行给定应用程序的单个实例。如果要水平扩展应用程序（例如，运行多个实例），则应使用多个Pod，每个实例一个。在Kubernetes中，这通常被称为复制。复制Pod通常由称为Controller的抽象创建和管理。</p><blockquote><p>有关更多信息，请参阅<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener">Pod Overview</a>。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务部署方式演进</title>
      <link href="/2019/07/11/deployment/"/>
      <url>/2019/07/11/deployment/</url>
      
        <content type="html"><![CDATA[<p><strong>传统部署时代：</strong>早期，组织在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。例如，如果在物理服务器上运行多个应用程序，则可能存在一个应用程序占用大部分资源的情况，因此其他应用程序将表现不佳。解决方案是在不同的物理服务器上运行每个应用程序。但是由于资源未得到充分利用，这并没有扩展，组织维护许多物理服务器的成本很高。</p><p><strong>虚拟化部署时代：</strong>作为解决方案，引入了虚拟化。它允许您在单个物理服务器的CPU上运行多个虚拟机（VM）。虚拟化允许应用程序在VM之间隔离，并提供一定程度的安全性，因为另一个应用程序无法自由访问一个应用程序的信息。虚拟化可以更好地利用物理服务器中的资源，并且可以实现更好的可扩展性，因为可以轻松添加或更新应用程序，降低硬件成本等等。每个VM都是在虚拟化硬件之上运行所有组件（包括其自己的操作系统）的完整计算机。</p><p><strong>容器部署时代：</strong>容器类似于VM，但它们具有宽松的隔离属性，可在应用程序之间共享操作系统（OS）。因此，容器被认为是轻质的。与VM类似，容器具有自己的文件系统，CPU，内存，进程空间等。当它们与底层基础架构分离时，它们可以跨云和OS分发进行移植。</p><p><img src="/images/deployment.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes简介</title>
      <link href="/2019/07/11/kubernetes/"/>
      <url>/2019/07/11/kubernetes/</url>
      
        <content type="html"><![CDATA[<p><a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a>是一个开源容器编排引擎，用于容器化应用的自动化部署、扩展和管理。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>要使用 Kubernetes，你需要用 <em>Kubernetes API</em> 对象 来描述集群的 <em>预期状态（desired state）</em> ：包括你需要运行的应用或者负载，它们使用的镜像、副本数，以及所需网络和磁盘资源等等。你可以使用命令行工具 <code>kubectl</code> 来调用 Kubernetes API 创建对象，通过所创建的这些对象来配置预期状态。你也可以直接调用 Kubernetes API 和集群进行交互，设置或者修改预期状态。</p><p>一旦你设置了你所需的目标状态，<em>Kubernetes 控制面（control plane）</em> 会促成集群的当前状态符合其预期状态。为此，Kubernetes 会自动执行各类任务，比如运行或者重启容器、调整给定应用的副本数等等。Kubernetes 控制面由一组运行在集群上的进程组成：</p><ul><li><p>Kubernetes 主控组件（Master） 包含三个进程，都运行在集群中的某个节上，通常这个节点被称为 master 节点。这些进程包括：<a href="https://kubernetes.io/docs/admin/kube-apiserver/" target="_blank" rel="noopener">kube-apiserver</a>、<a href="https://kubernetes.io/docs/admin/kube-controller-manager/" target="_blank" rel="noopener">kube-controller-manager</a> 和 <a href="https://kubernetes.io/docs/admin/kube-scheduler/" target="_blank" rel="noopener">kube-scheduler</a>。</p></li><li><p>集群中的每个非 master 节点都运行两个进程：</p><ul><li><a href="https://kubernetes.io/docs/admin/kubelet/" target="_blank" rel="noopener">kubelet</a>，和 master 节点进行通信。</li><li><a href="https://kubernetes.io/docs/admin/kube-proxy/" target="_blank" rel="noopener">kube-proxy</a>，一种网络代理，将 Kubernetes 的网络服务代理到每个节点上。</li></ul></li></ul><a id="more"></a><h2 id="Kubernetes-对象"><a href="#Kubernetes-对象" class="headerlink" title="Kubernetes 对象"></a>Kubernetes 对象</h2><p>Kubernetes 包含若干抽象用来表示系统状态，包括：已部署的容器化应用和负载、与它们相关的网络和磁盘资源以及有关集群正在运行的其他操作的信息。这些抽象使用 Kubernetes API 对象来表示。参阅 Kubernetes对象概述以了解详细信息。</p><p>基本的 Kubernetes 对象包括：</p><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener">Pod</a></li><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Service</a></li><li><a href="https://kubernetes.io/docs/concepts/storage/volumes/" target="_blank" rel="noopener">Volume</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/" target="_blank" rel="noopener">Namespace</a></li></ul><p>另外，Kubernetes 包含大量的被称作控制器（controllers） 的高级抽象。控制器基于基本对象构建并提供额外的功能和方便使用的特性。具体包括：</p><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/" target="_blank" rel="noopener">ReplicaSet</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Deployment</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/" target="_blank" rel="noopener">StatefulSet</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/" target="_blank" rel="noopener">DaemonSet</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/" target="_blank" rel="noopener">Job</a></li></ul><h2 id="Kubernetes-控制面"><a href="#Kubernetes-控制面" class="headerlink" title="Kubernetes 控制面"></a>Kubernetes 控制面</h2><p>关于 Kubernetes 控制平面的各个部分，（如 Kubernetes 主控组件和 kubelet 进程，管理着 Kubernetes 如何与你的集群进行通信。控制平面维护着系统中所有的 Kubernetes 对象的状态记录，并且通过连续的控制循环来管理这些对象的状态。在任一的给定时间点，控制面的控制环都能响应集群中的变化，并且让系统中所有对象的实际状态与你提供的预期状态相匹配。</p><p>比如， 当你通过 Kubernetes API 创建一个 Deployment 对象，你就为系统增加了一个新的目标状态。Kubernetes 控制平面记录着对象的创建，并启动必要的应用然后将它们调度至集群某个节点上来执行你的指令，以此来保持集群的实际状态和目标状态的匹配。</p><h3 id="Kubernetes-Master-节点"><a href="#Kubernetes-Master-节点" class="headerlink" title="Kubernetes Master 节点"></a>Kubernetes Master 节点</h3><p>Kubernetes master 节点负责维护集群的目标状态。当你要与 Kubernetes 通信时，使用如 kubectl 的命令行工具，就可以直接与 Kubernetes master 节点进行通信。</p><p>“master” 是指管理集群状态的一组进程的集合。通常这些进程都跑在集群中一个单独的节点上，并且这个节点被称为 master 节点。master 节点也可以扩展副本数，来获取更好的性能及冗余。</p><h3 id="Kubernetes-Node-节点"><a href="#Kubernetes-Node-节点" class="headerlink" title="Kubernetes Node 节点"></a>Kubernetes Node 节点</h3><p>集群中的 node 节点（虚拟机、物理机等等）都是用来运行你的应用和云工作流的机器。Kubernetes master 节点控制所有 node 节点；你很少需要和 node 节点进行直接通信。</p>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灰度发布</title>
      <link href="/2019/07/05/gray-release/"/>
      <url>/2019/07/05/gray-release/</url>
      
        <content type="html"><![CDATA[<p>灰度发布（又名金丝雀发布）是指在黑与白之间，能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p><h2 id="灰度发布流程"><a href="#灰度发布流程" class="headerlink" title="灰度发布流程"></a>灰度发布流程</h2><p><img src="/images/gray-release-1.jpg" alt="灰度发布流程"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PCI DSS简介</title>
      <link href="/2019/07/01/pci-dss/"/>
      <url>/2019/07/01/pci-dss/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zh.pcisecuritystandards.org/" target="_blank" rel="noopener">PCI DSS</a> (支付卡行业数据安全标准) 旨在促进并增强持卡人的数据安全，便于统一的数据安全措施在全球范围内的广泛应用。<a href="https://zh.pcisecuritystandards.org/" target="_blank" rel="noopener">PCI DSS</a> 为意在保护帐户数据的技术和操作要求提供了一个基准。<a href="https://zh.pcisecuritystandards.org/" target="_blank" rel="noopener">PCI DSS</a> 适用于参与支付卡处理的所有实体 — 包括商户、处理商、收单机构、发卡机构和服务提供商。<a href="https://zh.pcisecuritystandards.org/" target="_blank" rel="noopener">PCI DSS</a> 还适用于存储、处理或传输持卡人数据 (CHD) 和/或敏感验证数据 (SAD) 的所有其他实体。</p><table style="width: 720px; margin: auto;">    <tr>        <td><b>建立并维护安全的网络和系统</b></td>        <td>1. 安装并维护防火墙配置以保护持卡人数据<br>2. 不要使用供应商提供的默认系统密码和其他安全参数</td>    </tr>    <tr>        <td><b>保护持卡人数据</b></td>        <td>3. 保护存储的持卡人数据<br>4. 加密持卡人数据在开放式公共网络中的传输</td>    </tr>    <tr>        <td><b>维护漏洞管理计划</b></td>        <td>5. 为所有系统提供恶意软件防护并定期更新杀毒软件或程序<br>6. 开发并维护安全的系统和应用程序</td>    </tr>    <tr>        <td><b>实施强效访问控制措施</b></td>        <td>7. 按业务知情需要限制对持卡人数据的访问<br>8. 识别并验证对系统组件的访问<br>9. 限制对持卡人数据的物理访问</td>    </tr>    <tr>        <td><b>定期监控并测试网络</b></td>        <td>10. 跟踪并监控对网络资源和持卡人数据的所有访问<br>11. 定期测试安全系统和流程</td>    </tr>    <tr>        <td><b>维护信息安全政策</b></td>        <td>12. 维护针对所有工作人员的信息安全政策</td>    </tr></table>]]></content>
      
      
      
        <tags>
            
            <tag> pci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用FRP搭建内网穿透服务</title>
      <link href="/2019/05/29/docker-frp/"/>
      <url>/2019/05/29/docker-frp/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp</a>是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</p><p>本文主要内容是『如何利用内网穿透访问内网Web服务』。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一台有公网ip的服务器S1，ip为：x.x.x.x</li><li>一台位于内网（没有公网ip）的服务器S2</li><li>一个已经解析到公网ip的域名：test.yourdomain.com</li><li>一个位于内网的Web服务，地址为：y.y.y.y:local_port</li></ul><a id="more"></a><h2 id="部署frps服务"><a href="#部署frps服务" class="headerlink" title="部署frps服务"></a>部署frps服务</h2><p>frps服务部署在S1服务器上，执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">"EOF"</span>&gt;&gt; frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8000</span><br><span class="line">token = 1234567890123456</span><br><span class="line">dashboard_addr = 0.0.0.0</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = admin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">"EOF"</span>&gt;&gt; docker-compose.yaml</span><br><span class="line">version: <span class="string">'2'</span></span><br><span class="line">services:</span><br><span class="line">    frps:</span><br><span class="line">        image: riftbit/frp-server</span><br><span class="line">        container_name: frps</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - 7000:7000</span><br><span class="line">            - 8000:8000</span><br><span class="line">            - 7500:7500</span><br><span class="line">        volumes:</span><br><span class="line">            - ./frps.ini:/frp_config/frps.ini</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="部署frpc服务"><a href="#部署frpc服务" class="headerlink" title="部署frpc服务"></a>部署frpc服务</h2><p>frpc服务部署在S2服务器上，执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">"EOF"</span>&gt;&gt; frpc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 1234567890123456</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line"><span class="built_in">type</span> = http</span><br><span class="line">local_ip = y.y.y.y</span><br><span class="line">local_port = local_port</span><br><span class="line">custom_domains = test.yourdomain.com</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">"EOF"</span>&gt;&gt; docker-compose.yaml</span><br><span class="line">version: <span class="string">'2'</span></span><br><span class="line">services:</span><br><span class="line">    frpc:</span><br><span class="line">        image: riftbit/frp-client</span><br><span class="line">        container_name: frpc</span><br><span class="line">        restart: always</span><br><span class="line">        volumes:</span><br><span class="line">            - ./frpc.ini:/frp_config/frpc.ini</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>使用浏览器打开<code>http://test.yourdomain.com:8000</code>访问位于内网的Web服务。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>可以在S1服务器上使用nginx做一下反向代理，然后可以直接使用<code>http://test.yourdomain.com</code>访问Web服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用verdaccio搭建npmjs服务</title>
      <link href="/2019/05/29/docker-verdaccio/"/>
      <url>/2019/05/29/docker-verdaccio/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://verdaccio.org/">verdaccio</a></strong>: A lightweight private npm proxy registry.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>直接使用<a href="https://hub.docker.com/r/verdaccio/verdaccio">verdaccio/verdaccio</a>镜像启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio</span><br></pre></td></tr></table></figure><span id="more"></span><p>或者使用docker-compose进行部署：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">verdaccio:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">verdaccio/verdaccio</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">verdaccio</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">4873</span><span class="string">:4873</span></span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry http://localhost:4783/</span><br></pre></td></tr></table></figure><h2 id="Deploy-with-S3"><a href="#Deploy-with-S3" class="headerlink" title="Deploy with S3"></a>Deploy with S3</h2><p>使用S3需要用到<a href="https://github.com/Remitly/verdaccio-s3-storage">verdaccio-s3-storage</a>插件，我们可以基于<a href="https://hub.docker.com/r/verdaccio/verdaccio">verdaccio/verdaccio</a>镜像进行修改。</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> verdaccio/verdaccio</span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install --production \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install verdaccio-s3-storage</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./conf/config.yaml ./conf/config.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4873</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/opt/verdaccio/bin/verdaccio&quot;</span>, <span class="string">&quot;--config&quot;</span>, <span class="string">&quot;/verdaccio/conf/config.yaml&quot;</span>, <span class="string">&quot;--listen&quot;</span>, <span class="string">&quot;http://0.0.0.0:4873&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="conf-config-yaml"><a href="#conf-config-yaml" class="headerlink" title="conf/config.yaml"></a>conf/config.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">store:</span></span><br><span class="line">  <span class="attr">aws-s3-storage:</span></span><br><span class="line">    <span class="attr">bucket:</span> <span class="string">your-bucket-name</span></span><br><span class="line">    <span class="attr">s3ForcePathStyle:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">*</span></span><br><span class="line">    <span class="attr">secretAccessKey:</span> <span class="string">***</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">verdaccio:</span></span><br><span class="line">        <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">verdaccio</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">4873</span><span class="string">:4873</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> npm </tag>
            
            <tag> verdaccio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署NextCloud和draw.io</title>
      <link href="/2019/05/05/docker-nextcloud-draw/"/>
      <url>/2019/05/05/docker-nextcloud-draw/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://nextcloud.com/" target="_blank" rel="noopener">NextCloud</a></strong>是一款用于自建私有网盘的云存储开源软件，采用PHP+MySQL开发，功能类似百度云盘，提供了PC、IOS和Android三个同步客户端支持多种设备访问，用户可以很方便地与服务器上存储的文件、日程安排、通讯录、书签等重要数据保持同步，还支持其他同步来源：Amazon S3、Dropbox、FTP、Google Drive、OpenStack Object Storage、SMB、WebDAV、SFTP。</p><p><strong><a href="https://www.draw.io/" target="_blank" rel="noopener">draw.io</a></strong>是一个强大简洁的在线的绘图网站，支持流程图，UML图，架构图，原型图等图标。支持Github，Google Drive, One drive等网盘同步，并且永久免费。如果觉得使用Web版不方便，draw.io 也提供了多平台的离线桌面版可供下载。</p><a id="more"></a><h2 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">nextcloud:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nextcloud</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">nextcloud</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8087</span><span class="string">:80</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/var/www/html</span></span><br><span class="line">    <span class="attr">draw:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">fjudith/draw.io:10.6.3-alpine</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">draw</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8089</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><p>更详细的配置参考：<a href="https://hub.docker.com/_/nextcloud" target="_blank" rel="noopener">NextCloud Image</a>、<a href="https://hub.docker.com/r/fjudith/draw.io" target="_blank" rel="noopener">draw.io</a>。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>服务启动之后，浏览器打开<code>http://&lt;your-ip&gt;:8087/</code>，按照提示配置好NextCloud服务器参数，然后安装<code>Draw.io</code>插件，接着在设置里面找到<code>其他设置</code>，在<code>Draw.io URL</code>里面配置<code>http://&lt;your-ip&gt;:8089/</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django静态文件配置</title>
      <link href="/2019/04/24/django-static-files/"/>
      <url>/2019/04/24/django-static-files/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首先，需要保证<code>INSTALLED_APPS</code>中有<code>django.contrib.staticfiles</code>模块：</p><p> <img src="/images/django-static-files-1.png" alt></p></li><li><p>在<code>settings.py</code>中配置<code>STATIC_ROOT</code>：</p><p> <img src="/images/django-static-files-2.png" alt></p><p> <strong>注意</strong>，这一步执行完之后可以执行<code>python manage.py collectstatic</code>将所有App的静态资源都收集到<code>STATIC_ROOT</code>目录下。</p></li><li><p>在<code>urls.py</code>中添加静态文件路由配置：</p><p> <img src="/images/django-static-files-3.png" alt></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署NextCloud和Collabora</title>
      <link href="/2019/04/22/docker-nextcloud-collabora/"/>
      <url>/2019/04/22/docker-nextcloud-collabora/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://nextcloud.com/" target="_blank" rel="noopener">NextCloud</a></strong>是一款用于自建私有网盘的云存储开源软件，采用PHP+MySQL开发，功能类似百度云盘，提供了PC、IOS和Android三个同步客户端支持多种设备访问，用户可以很方便地与服务器上存储的文件、日程安排、通讯录、书签等重要数据保持同步，还支持其他同步来源：Amazon S3、Dropbox、FTP、Google Drive、OpenStack Object Storage、SMB、WebDAV、SFTP。</p><p><strong><a href="https://www.collabora.com/" target="_blank" rel="noopener">Collabora</a></strong>是一个功能强大的基于libreoffice的在线办公室，它支持所有主要文档、电子表格和演示文件格式，您可以将这些格式集成到自己的基础结构中。主要功能是协同编辑和卓越的Office文件格式支持。</p><a id="more"></a><h2 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">nextcloud:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nextcloud</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">nextcloud</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8087</span><span class="string">:80</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/var/www/html</span></span><br><span class="line">    <span class="attr">collabora:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">collabora/code</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">collabora</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">9980</span><span class="string">:9980</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">extra_params=--o:ssl.enable=false</span></span><br></pre></td></tr></table></figure><p>更详细的配置参考：<a href="https://hub.docker.com/_/nextcloud" target="_blank" rel="noopener">NextCloud Image</a>、<a href="https://hub.docker.com/r/collabora/code" target="_blank" rel="noopener">Collabora Image</a>。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>服务启动之后，浏览器打开<code>http://&lt;your-ip&gt;:8087/</code>，按照提示配置好NextCloud服务器参数，然后安装<code>Collabora Online</code>插件，接着在设置里面找到<code>在线协作</code>，在<code>URL (and Port) of Collabora Online-server</code>里面配置<code>http://&lt;your-ip&gt;:9980/</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nextcloud </tag>
            
            <tag> collaboraoffice </tag>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Privoxy将Socks代理转为Http代理</title>
      <link href="/2019/04/19/privoxy-socks/"/>
      <url>/2019/04/19/privoxy-socks/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.privoxy.org/" target="_blank" rel="noopener">Privoxy</a>是一款带过滤功能的代理服务器，针对HTTP、HTTPS协议。通过Privoxy的过滤功能，用户可以保护隐私、对网页内容进行过滤、管理cookies，以及拦阻各种广告等。</p><h2 id="安装Privoxy"><a href="#安装Privoxy" class="headerlink" title="安装Privoxy"></a>安装Privoxy</h2><p>ubuntu:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y privoxy</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> privoxy</span><br><span class="line">sudo systemctl start privoxy</span><br></pre></td></tr></table></figure><p>centos:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y privoxy</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> privoxy</span><br><span class="line">sudo systemctl start privoxy</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="转发socks代理"><a href="#转发socks代理" class="headerlink" title="转发socks代理"></a>转发socks代理</h2><p>打开Privoxy的配置文件<code>/etc/privoxy/config</code>，找到下面这一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># forward-socks5 / 127.0.0.1:9050 .</span><br></pre></td></tr></table></figure><p>去掉前面的<code>#</code>号，并将后面的ip和port改成socks服务的ip和port，然后重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start privoxy</span><br></pre></td></tr></table></figure><h2 id="允许其他设备使用"><a href="#允许其他设备使用" class="headerlink" title="允许其他设备使用"></a>允许其他设备使用</h2><p>打开Privoxy的配置文件<code>/etc/privoxy/config</code>，找到下面这一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen-address  127.0.0.1:8118</span><br></pre></td></tr></table></figure><p>将其中的ip修改为<code>0.0.0.0</code>，然后重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start privoxy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> proxy </tag>
            
            <tag> privoxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建KMS服务器</title>
      <link href="/2019/04/15/kms/"/>
      <url>/2019/04/15/kms/</url>
      
        <content type="html"><![CDATA[<p>Key Management Service（简称:KMS），这个功能是在Windows Vista之后的产品中的一种新型产品激活机制。我们可以利用手里闲置的VPS安装<a href="https://github.com/Wind4/vlmcsd" target="_blank" rel="noopener">vlmcsd</a>来搭建KMS激活服务器，这篇文章以CentOS为例，当然vlmcsd并不局限限于CentOS，如Ubuntu、Windows、MacOS等都可以安装服务端，原理和方法相同。</p><a id="more"></a><h2 id="安装vlmcsd服务"><a href="#安装vlmcsd服务" class="headerlink" title="安装vlmcsd服务"></a>安装vlmcsd服务</h2><h3 id="查看cpu架构信息"><a href="#查看cpu架构信息" class="headerlink" title="查看cpu架构信息"></a>查看cpu架构信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">processor: 0</span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: 6</span><br><span class="line">model: 42</span><br><span class="line">model name: Intel Xeon E312xx (Sandy Bridge)</span><br><span class="line">stepping: 1</span><br><span class="line">microcode: 0x1</span><br><span class="line">cpu MHz: 2099.998</span><br><span class="line">cache size: 4096 KB</span><br><span class="line">physical id: 0</span><br><span class="line">siblings: 1</span><br><span class="line">core id: 0</span><br><span class="line">cpu cores: 1</span><br><span class="line">apicid: 0</span><br><span class="line">initial apicid: 0</span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: 13</span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm fsgsbase smep erms xsaveopt</span><br><span class="line">bogomips: 4199.99</span><br><span class="line">clflush size: 64</span><br><span class="line">cache_alignment: 64</span><br><span class="line">address sizes: 46 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看出我的机器是Intel 64位架构的机器。</p><h3 id="下载vlmcsd"><a href="#下载vlmcsd" class="headerlink" title="下载vlmcsd"></a>下载vlmcsd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Wind4/vlmcsd/releases/download/svn1112/binaries.tar.gz</span><br><span class="line">tar xvf binaries.tar.gz</span><br><span class="line">cp binaries/Linux/intel/static/vlmcsd-x64-musl-static /usr/<span class="built_in">local</span>/bin/vlmcsd</span><br></pre></td></tr></table></figure><h3 id="配置vlmcsd服务"><a href="#配置vlmcsd服务" class="headerlink" title="配置vlmcsd服务"></a>配置vlmcsd服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tee /usr/lib/systemd/system/kms.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=vlmcsd - kms emulator</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/vlmcsd</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">systemctl <span class="built_in">enable</span> kms</span><br><span class="line">systemctl start kms</span><br></pre></td></tr></table></figure><h2 id="激活Windows系统"><a href="#激活Windows系统" class="headerlink" title="激活Windows系统"></a>激活Windows系统</h2><p>这里使用系统内置命令<code>slmgr</code>激活系统，使用管理员身份运行CMD，然后执行下面命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms &lt;kms ip or host&gt;</span><br><span class="line">slmgr /ato</span><br><span class="line">slmgr /xpr</span><br></pre></td></tr></table></figure><p><strong>记住</strong>，只能激活VL版Windows或Office，并且只有180天有效期，但只要服务还在运行，系统会自动续订，即可以认为是永久激活。</p><h2 id="激活Office"><a href="#激活Office" class="headerlink" title="激活Office"></a>激活Office</h2><p>使用管理员身份运行CMD，进入软件安装目录，然后执行下面命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /sethst:&lt;kms ip or host&gt;</span><br><span class="line">cscript ospp.vbs /act</span><br><span class="line">cscript ospp.vbs /dstatus</span><br></pre></td></tr></table></figure><p><strong>记住</strong>，只能激活VL版Windows或Office，并且只有180天有效期，但只要服务还在运行，系统会自动续订，即可以认为是永久激活。</p>]]></content>
      
      
      
        <tags>
            
            <tag> office </tag>
            
            <tag> kms </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Plex in Docker</title>
      <link href="/2019/04/15/docker-plex/"/>
      <url>/2019/04/15/docker-plex/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.plex.tv/" target="_blank" rel="noopener">Plex</a>是一套媒体播放器及媒体服务器软件，由于Plex Media Server和Plex Media Player组成，主要功能是存储+索引+转码+在线播放。Plex Media Server不是简单地帮你存储分类影音文件，它还能分析影片的信息从而从IMDB等数据库补全影片介绍等信息，进行索引以方便搜索。</p><p><a href="https://www.plex.tv/" target="_blank" rel="noopener">Plex</a>可用于Windows、Android、Linux、OS X、FreeBSD和XBox，PS，各种TV，树莓派等，可以说是全平台通吃，甚至与Bitcasa、Box和Dropbox等云服务兼容，Plex支持在线格式转换，支持将视频、音乐等各类文件转化为流至移动设备、智能电视和电子媒体播放器上。</p><h2 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">plex:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">plexinc/pms-docker</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">plex</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ADVERTISE_IP=http://192.168.31.160:32400/</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./media:/data</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> plex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署NextCloud和OnlyOffice</title>
      <link href="/2019/04/02/docker-nextcloud-onlyoffice/"/>
      <url>/2019/04/02/docker-nextcloud-onlyoffice/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://nextcloud.com/" target="_blank" rel="noopener">NextCloud</a></strong>是一款用于自建私有网盘的云存储开源软件，采用PHP+MySQL开发，功能类似百度云盘，提供了PC、IOS和Android三个同步客户端支持多种设备访问，用户可以很方便地与服务器上存储的文件、日程安排、通讯录、书签等重要数据保持同步，还支持其他同步来源：Amazon S3、Dropbox、FTP、Google Drive、OpenStack Object Storage、SMB、WebDAV、SFTP。</p><p><strong><a href="https://www.onlyoffice.com/" target="_blank" rel="noopener">ONLYOFFICE</a></strong>是一款集成了文档、电子邮件、事件、任务和客户关系管理工具的开源在线办公套件。其文档管理功能实现了文档的在线编辑、在线预览和协同管理，可用于替代Office365或Google docs。另外，它还提供了CRM、项目管理等功能，非常合适作为企业内部的全员协作Office系统。</p><a id="more"></a><h2 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">nextcloud:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nextcloud</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">nextcloud</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8087</span><span class="string">:80</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/var/www/html</span></span><br><span class="line">    <span class="attr">onlyoffice:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">onlyoffice/documentserver</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">onlyoffice</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8088</span><span class="string">:80</span></span><br></pre></td></tr></table></figure><p>更详细的配置参考：<a href="https://hub.docker.com/_/nextcloud" target="_blank" rel="noopener">NextCloud Image</a>、<a href="https://hub.docker.com/r/onlyoffice/documentserver" target="_blank" rel="noopener">ONLYOFFICE Image</a>。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>服务启动之后，浏览器打开<code>http://&lt;your-ip&gt;:8087/</code>，按照提示配置好NextCloud服务器参数，然后安装<code>ONLYOFFICE</code>插件，接着在设置里面找到<code>ONLYOFFICE</code>，在<code>Document Editing Service address</code>里面配置<code>http://&lt;your-ip&gt;:8088/</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nextcloud </tag>
            
            <tag> office </tag>
            
            <tag> onlyoffice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git：创建一个空分支</title>
      <link href="/2019/03/12/git-orphan-branch/"/>
      <url>/2019/03/12/git-orphan-branch/</url>
      
        <content type="html"><![CDATA[<p>有时候，我们希望创建一个新的分支，而又不想继承任何提交，没有一个父节点，是一个完全新的干净的分支，例如有时候我们希望创建一个分支用来放置文档。</p><p>这是后可以使用<code>--orphan</code>参数创建分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan doc</span><br></pre></td></tr></table></figure><p>这时候，当前分支会有前面那个分支的所有文件，可以执行下面命令删除所有文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -rf .</span><br></pre></td></tr></table></figure><p>然后提交分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch README.md</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'new branch for documentation'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce Program in Python</title>
      <link href="/2019/03/07/mapreduce-program-in-python/"/>
      <url>/2019/03/07/mapreduce-program-in-python/</url>
      
        <content type="html"><![CDATA[<a href="/2018/12/21/hadoop-mapreduce-logical-data-flow/" title="MapReduce逻辑数据流图">MapReduce逻辑数据流图</a><p><strong>mapper.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">"""A more advanced Mapper, using Python iterators and generators."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_input</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="comment"># split the line into words</span></span><br><span class="line">        <span class="keyword">yield</span> line.split()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(separator=<span class="string">'\t'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># input comes from STDIN (standard input)</span></span><br><span class="line">    data = read_input(sys.stdin)</span><br><span class="line">    <span class="keyword">for</span> words <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># write the results to STDOUT (standard output);</span></span><br><span class="line">        <span class="comment"># what we output here will be the input for the</span></span><br><span class="line">        <span class="comment"># Reduce step, i.e. the input for reducer.py</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># tab-delimited; the trivial word count is 1</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'%s%s%d'</span> % (word, separator, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>reducer.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">"""A more advanced Reducer, using Python iterators and generators."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_mapper_output</span><span class="params">(file, separator=<span class="string">'\t'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="keyword">yield</span> line.rstrip().split(separator, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(separator=<span class="string">'\t'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># input comes from STDIN (standard input)</span></span><br><span class="line">    data = read_mapper_output(sys.stdin, separator=separator)</span><br><span class="line">    <span class="comment"># groupby groups multiple word-count pairs by word,</span></span><br><span class="line">    <span class="comment"># and creates an iterator that returns consecutive keys and their group:</span></span><br><span class="line">    <span class="comment">#   current_word - string containing a word (the key)</span></span><br><span class="line">    <span class="comment">#   group - iterator yielding all ["&amp;lt;current_word&amp;gt;", "&amp;lt;count&amp;gt;"] items</span></span><br><span class="line">    <span class="keyword">for</span> current_word, group <span class="keyword">in</span> groupby(data, itemgetter(<span class="number">0</span>)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total_count = sum(int(count) <span class="keyword">for</span> current_word, count <span class="keyword">in</span> group)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"%s%s%d"</span> % (current_word, separator, total_count)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="comment"># count was not a number, so silently discard this item</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>执行job</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar /usr/hdp/3.*/hadoop-mapreduce/hadoop-streaming.jar \</span><br><span class="line">    -files mapper.py,reducer.py -mapper mapper.py -reducer reducer.py \</span><br><span class="line">    -input input/* -output output</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mapreduce </tag>
            
            <tag> bigdata </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Django字段类型的问题</title>
      <link href="/2019/03/07/about-django-fields/"/>
      <url>/2019/03/07/about-django-fields/</url>
      
        <content type="html"><![CDATA[<p>今天有个同事遇到一个问题，创建Model对象的时候，字段类型与预期的不一致：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    demoid = models.UUIDField(primary_key=<span class="literal">True</span>, default=uuid.uuid1)</span><br><span class="line">    str_field = models.CharField(max_length=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> app1.models <span class="keyword">import</span> DemoModel</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = DemoModel.objects.create(**&#123;<span class="string">'str_field'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(m.str_field)       <span class="comment">## 这时候字段类型是int而不是预想中的str</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">m</span>.<span class="title">str_field</span></span></span><br><span class="line"><span class="class">1</span></span><br><span class="line">&gt;&gt;&gt; m = DemoModel.objects.first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(m.str_field)       <span class="comment">## 此时字段类型是str</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">m</span>.<span class="title">str_field</span></span></span><br><span class="line"><span class="class">'1'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>问题分析</strong></p><p>查看源码发现<code>create</code>函数是先new了一个model对象，然后调用model的<code>save</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuerySet</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Creates a new object with the given kwargs, saving it to the database</span></span><br><span class="line"><span class="string">        and returning the created object.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        obj = self.model(**kwargs)</span><br><span class="line">        self._for_write = <span class="literal">True</span></span><br><span class="line">        obj.save(force_insert=<span class="literal">True</span>, using=self.db)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>接着查看model的<code>__init__</code>函数，发现这里只是简单的设置字段值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(six.with_metaclass<span class="params">(ModelBase)</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        signals.pre_init.send(sender=self.__class__, args=args, kwargs=kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set up the storage for instance state</span></span><br><span class="line">        self._state = ModelState()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># There is a rather weird disparity here; if kwargs, it's set, then args</span></span><br><span class="line">        <span class="comment"># overrides it. It should be one or the other; don't duplicate the work</span></span><br><span class="line">        <span class="comment"># The reason for the kwargs check is that standard iterator passes in by</span></span><br><span class="line">        <span class="comment"># args, and instantiation for iteration is 33% faster.</span></span><br><span class="line">        args_len = len(args)</span><br><span class="line">        <span class="keyword">if</span> args_len &gt; len(self._meta.concrete_fields):</span><br><span class="line">            <span class="comment"># Daft, but matches old exception sans the err msg.</span></span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">"Number of args exceeds number of fields"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> kwargs:</span><br><span class="line">            fields_iter = iter(self._meta.concrete_fields)</span><br><span class="line">            <span class="comment"># The ordering of the zip calls matter - zip throws StopIteration</span></span><br><span class="line">            <span class="comment"># when an iter throws it. So if the first iter throws it, the second</span></span><br><span class="line">            <span class="comment"># is *not* consumed. We rely on this, so don't change the order</span></span><br><span class="line">            <span class="comment"># without changing the logic.</span></span><br><span class="line">            <span class="keyword">for</span> val, field <span class="keyword">in</span> zip(args, fields_iter):</span><br><span class="line">                setattr(self, field.attname, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Slower, kwargs-ready version.</span></span><br><span class="line">            fields_iter = iter(self._meta.fields)</span><br><span class="line">            <span class="keyword">for</span> val, field <span class="keyword">in</span> zip(args, fields_iter):</span><br><span class="line">                setattr(self, field.attname, val)</span><br><span class="line">                kwargs.pop(field.name, <span class="literal">None</span>)</span><br><span class="line">                <span class="comment"># Maintain compatibility with existing calls.</span></span><br><span class="line">                <span class="keyword">if</span> isinstance(field.remote_field, ManyToOneRel):</span><br><span class="line">                    kwargs.pop(field.attname, <span class="literal">None</span>)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>继续查看model的<code>save</code>函数，也没有发现转换字段类型的代码，故得出结论：djano在创建model的时候，并不会转换字段类型，二是会保存原有的字段类型。</p><p><strong>解决方案</strong></p><p>如果你想在创建完model对象之后，还想继续使用model的字段，那么有两种方案处理这个问题：</p><ul><li><p>方案1：</p><p>  在创建model对象的时候，直接使用字段对应的类型赋值。</p></li><li><p>方案2：</p><p>  在创建完对象后，调用model的<code>refresh_from_db</code>函数：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = DemoModel.objects.create(**&#123;<span class="string">'str_field'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(m.str_field)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">m</span>.<span class="title">str_field</span></span></span><br><span class="line"><span class="class">1</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">m</span>.<span class="title">refresh_from_db</span><span class="params">()</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(m.str_field)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">m</span>.<span class="title">str_field</span></span></span><br><span class="line"><span class="class">'1'</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Redmine in Docker</title>
      <link href="/2019/03/05/docker-redmine/"/>
      <url>/2019/03/05/docker-redmine/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.redmine.org/" target="_blank" rel="noopener">Redmine</a>: 是一个开源的、基于Web的项目管理和缺陷跟踪工具。</p><p>下面是<code>docker-compose.yaml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">redmine:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redmine:4.0</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">redmine</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./redmine/sqlite:/usr/src/redmine/sqlite</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./redmine/plugins:/usr/src/redmine/plugins</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./redmine/files:/usr/src/redmine/files</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/repos:/repos</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redmine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integrating Gogs and Redmine</title>
      <link href="/2019/03/05/Integrating-Gogs-and-Redmine/"/>
      <url>/2019/03/05/Integrating-Gogs-and-Redmine/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://gogs.io/" target="_blank" rel="noopener">Gogs</a>: 是一个Git服务。</li><li><a href="https://www.redmine.org/" target="_blank" rel="noopener">Redmine</a>: 是一个开源的、基于Web的项目管理和缺陷跟踪工具。</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Gogs"><a href="#安装Gogs" class="headerlink" title="安装Gogs"></a>安装Gogs</h3><p>参考我的另一篇文章<a href="/2018/07/16/docker-gogs/" title="Deploying Gogs in Docker">Deploying Gogs in Docker</a>。</p><h3 id="安装Redmine"><a href="#安装Redmine" class="headerlink" title="安装Redmine"></a>安装Redmine</h3><p>参考我的另一篇文章<a href="/2019/03/05/docker-redmine/" title="Deploying Redmine in Docker">Deploying Redmine in Docker</a>。</p><a id="more"></a><h2 id="配置Gogs"><a href="#配置Gogs" class="headerlink" title="配置Gogs"></a>配置Gogs</h2><p>将Git项目的问题集管理配置为Redmine。</p><p><img src="/images/Integrating-Gogs-and-Redmine-01.png" alt></p><h2 id="配置Redmine"><a href="#配置Redmine" class="headerlink" title="配置Redmine"></a>配置Redmine</h2><p><code>管理 -&gt; 配置 -&gt; 版本库</code>：</p><p><img src="/images/Integrating-Gogs-and-Redmine-02.png" alt></p><p>然后在项目配置中添加版本库：</p><p><img src="/images/Integrating-Gogs-and-Redmine-03.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> gogs </tag>
            
            <tag> redmine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integrating Gogs and Jenkins</title>
      <link href="/2019/03/01/Integrating-Gogs-and-Jenkins/"/>
      <url>/2019/03/01/Integrating-Gogs-and-Jenkins/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://gogs.io/" target="_blank" rel="noopener">Gogs</a>: 是一个Git服务。</li><li><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a>: 是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</li><li><a href="https://plugins.jenkins.io/generic-webhook-trigger" target="_blank" rel="noopener">Generic Webhook Trigger</a>: Jenkins插件。</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Gogs"><a href="#安装Gogs" class="headerlink" title="安装Gogs"></a>安装Gogs</h3><p>参考我的另一篇文章<a href="/2018/07/16/docker-gogs/" title="Deploying Gogs in Docker">Deploying Gogs in Docker</a>。</p><h3 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h3><p>参考我的另一篇文章<a href="/2019/03/01/docker-jenkins/" title="Deploying Jenkins in Docker">Deploying Jenkins in Docker</a>。</p><p>安装完Jenkins之后，<code>系统管理 -&gt; 插件管理 -&gt; 可选插件</code>，安装Generic Webhook Trigger插件。</p><a id="more"></a><h2 id="在Gogs中配置WebHook"><a href="#在Gogs中配置WebHook" class="headerlink" title="在Gogs中配置WebHook"></a>在Gogs中配置WebHook</h2><p><img src="/images/Integrating-Gogs-and-Jenkins-01.png" alt><img src="/images/Integrating-Gogs-and-Jenkins-02.png" alt></p><h2 id="在Jenkins中创建任务"><a href="#在Jenkins中创建任务" class="headerlink" title="在Jenkins中创建任务"></a>在Jenkins中创建任务</h2><p><img src="/images/Integrating-Gogs-and-Jenkins-03.png" alt><img src="/images/Integrating-Gogs-and-Jenkins-04.png" alt><img src="/images/Integrating-Gogs-and-Jenkins-05.png" alt></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="/images/Integrating-Gogs-and-Jenkins-06.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> gogs </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Jenkins in Docker</title>
      <link href="/2019/03/01/docker-jenkins/"/>
      <url>/2019/03/01/docker-jenkins/</url>
      
        <content type="html"><![CDATA[<p><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a>: 是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p><p>下面是<code>docker-compose.yaml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">jenkins:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">jenkinsci/jenkins:lts</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">50000</span><span class="string">:50000</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./jenkins:/var/jenkins_home</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker问题集</title>
      <link href="/2019/02/22/docker-bugs/"/>
      <url>/2019/02/22/docker-bugs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>OCI runtime create failed: container_linux.go:348: starting container process caused “<em>**</em>“: unknown</p></blockquote><p>执行<code>docker run -dit ***</code>时遇到这个问题，现在还未找到问题原因，删除容器、删除镜像、重启docker、重启机器都未能好使，最后<code>重新安装docker</code>才恢复正常。</p><hr><blockquote><p>Error response from daemon: Get <a href="https://registry-1.docker.io/v2/" target="_blank" rel="noopener">https://registry-1.docker.io/v2/</a>: dial tcp: lookup registry-1.docker.io on [::1]:53: dial udp [::1]:53: connect: no route to host</p></blockquote><p>问题出在DNS，极有可能是没有配置DNS或者DNS失效。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy数组维度变换</title>
      <link href="/2019/02/20/numpy-dimension/"/>
      <url>/2019/02/20/numpy-dimension/</url>
      
        <content type="html"><![CDATA[<h2 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = arange(<span class="number">24</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>,</span><br><span class="line">       <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.reshape((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = b.reshape((<span class="number">3</span>, <span class="number">8</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">       [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：reshape只是返回数组的一个视图（View），并没有分配内存保存结果。<a id="more"></a>也就是说，当改变其中某个元素的值时，原数组中的值也会改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[[ <span class="number">100</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([ <span class="number">100</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>,</span><br><span class="line">       <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">array([[ <span class="number">100</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">       [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])</span><br></pre></td></tr></table></figure><h2 id="ravel"><a href="#ravel" class="headerlink" title="ravel"></a>ravel</h2><p>用来将多维数组展平。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = arange(<span class="number">24</span>).reshape((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.ravel()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>,</span><br><span class="line">       <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>])</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：ravel与reshape一样，也只是返回数组的一个视图（View），并没有分配内存保存结果。也就是说，当改变其中某个元素的值时，原数组中的值也会改变。</p><h2 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h2><p>这个函数同样用来将多维数组展平，但与ravel不同的是，这个函数会分配内存将结果保存起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = arange(<span class="number">24</span>).reshape((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.flatten()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>,</span><br><span class="line">       <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>])</span><br></pre></td></tr></table></figure><h2 id="通过shape属性设置维度"><a href="#通过shape属性设置维度" class="headerlink" title="通过shape属性设置维度"></a>通过shape属性设置维度</h2><p>通过直接给shape赋值来修改维度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = arange(<span class="number">24</span>).reshape((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape = (<span class="number">2</span>, <span class="number">12</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])</span><br></pre></td></tr></table></figure><h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = arange(<span class="number">24</span>).reshape((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.resize((<span class="number">2</span>, <span class="number">12</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])</span><br></pre></td></tr></table></figure><h2 id="transpose"><a href="#transpose" class="headerlink" title="transpose"></a>transpose</h2><p>transpose用来转换矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = arange(<span class="number">24</span>).reshape((<span class="number">4</span>, <span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">       [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>],</span><br><span class="line">       [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.transpose()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">7</span>, <span class="number">13</span>, <span class="number">19</span>],</span><br><span class="line">       [ <span class="number">2</span>,  <span class="number">8</span>, <span class="number">14</span>, <span class="number">20</span>],</span><br><span class="line">       [ <span class="number">3</span>,  <span class="number">9</span>, <span class="number">15</span>, <span class="number">21</span>],</span><br><span class="line">       [ <span class="number">4</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">22</span>],</span><br><span class="line">       [ <span class="number">5</span>, <span class="number">11</span>, <span class="number">17</span>, <span class="number">23</span>]])</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：同样，transpose也只是返回数组的一个视图（View），并没有分配内存保存结果。也就是说，当改变其中某个元素的值时，原数组中的值也会改变。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm：Robot Framework运行环境搭建</title>
      <link href="/2019/02/18/pycharm-robot/"/>
      <url>/2019/02/18/pycharm-robot/</url>
      
        <content type="html"><![CDATA[<p>首先安装<code>IntelliBot</code>插件，然后配置<code>External Tools</code>：</p><ul><li>name: <code>Robot Run TestSuite</code></li><li>Group: <code>Robot External Tools</code></li><li>Program: <code>$JDKPath$</code></li><li>Parameters: <code>-m robot -d results --pythonpath . -v VERSION:d $FilePathRelativeToProjectRoot$</code></li><li>Working directory: <code>$ProjectFileDir$</code></li></ul><p><img src="/images/pycharm-robot-1.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> pycharm </tag>
            
            <tag> robotframework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序问题集</title>
      <link href="/2019/02/15/wx-miniprogram-bugs/"/>
      <url>/2019/02/15/wx-miniprogram-bugs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>VM175:4 /bin/sh: npm: command not found</p></blockquote><p>在MacOS系统下，编译小程序时可能会遇到这个问题。由于我是使用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener"><code>nvm</code></a>管理多个nodejs版本，而微信开发者工具并不会切换nodejs版本，导致找不到对应的nodejs版本。</p><p>这个问题解决办法是，<code>项目设置 -&gt; 启用自定义处理命令</code>，配置下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile &amp;&amp; nvm use 8 &amp;&amp; npm run compile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker &amp; Kubernetes 学习路线图</title>
      <link href="/2019/02/15/docker-and-kubernetes/"/>
      <url>/2019/02/15/docker-and-kubernetes/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/docker-and-kubernetes-1.png" alt="Docker"></p><a id="more"></a><p><img src="/images/docker-and-kubernetes-2.png" alt="Kubernetes基础"></p><p><a href="https://www.katacoda.com/courses/kubernetes" target="_blank" rel="noopener">katacoda</a>为我们提供了一个学习Kubernetes的环境，可以在这里使用、感受、了解一下Kubernetes里面的一些基本概念。</p><p><img src="/images/docker-and-kubernetes-3.png" alt="Kubernetes高阶实践"></p><p><em><a href="/images/docker-and-kubernetes.xmind">下载思维导图</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubectl常用用法</title>
      <link href="/2019/02/14/kubectl-overview/"/>
      <url>/2019/02/14/kubectl-overview/</url>
      
        <content type="html"><![CDATA[<p>kubectl是Kubernetes集群管理器的命令行工具，使用kubectl可以在Kubernetes上部署和管理应用程序。使用kubectl，可以检查集群资源；创建，删除和更新组件。</p><p>更多kubectl参考：<a href="https://kubernetes.io/docs/reference/kubectl/overview/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/kubectl/overview/</a></p><h2 id="kubectl常用命令"><a href="#kubectl常用命令" class="headerlink" title="kubectl常用命令"></a>kubectl常用命令</h2><h3 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure><h3 id="查看资源信息"><a href="#查看资源信息" class="headerlink" title="查看资源信息"></a>查看资源信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes       <span class="comment"># 查看node信息</span></span><br><span class="line">kubectl get pods        <span class="comment"># 查看pod信息</span></span><br><span class="line">kubectl get rc,service  <span class="comment"># 同时查看rc和service信息</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="查看资源的详细信息"><a href="#查看资源的详细信息" class="headerlink" title="查看资源的详细信息"></a>查看资源的详细信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME) [options]</span></span><br><span class="line">kubectl describe nodes &lt;node_name&gt;  <span class="comment"># 查看node的详细信息</span></span><br><span class="line">kubectl describe pods/&lt;pod_name&gt;    <span class="comment"># 查看pod的详细信息</span></span><br></pre></td></tr></table></figure><h3 id="创建资源信息"><a href="#创建资源信息" class="headerlink" title="创建资源信息"></a>创建资源信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f FILENAME [options]</span></span><br><span class="line">kubectl create -f &lt;my_resource_filename&gt;     <span class="comment"># 根据配置文件创建资源</span></span><br><span class="line">kubectl create -f &lt;my_resource_directory&gt;    <span class="comment"># 根据配置文件所在目录创建资源</span></span><br><span class="line">kubectl create -f &lt;my_resource_url&gt;          <span class="comment"># 根据配置文件url创建资源</span></span><br></pre></td></tr></table></figure><h3 id="删除资源对象"><a href="#删除资源对象" class="headerlink" title="删除资源对象"></a>删除资源对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl delete ([-f FILENAME] | TYPE [(NAME | -l label | --all)]) [options]</span></span><br><span class="line">kubectl delete -f FILENAME          <span class="comment"># 根据配置文件删除资源</span></span><br><span class="line">kubectl delete pod,service baz foo  <span class="comment"># 删除名为「baz」、「foo」的pod和service</span></span><br><span class="line">kubectl delete pods --all           <span class="comment"># 删除所有的pod</span></span><br></pre></td></tr></table></figure><h3 id="执行容器命令"><a href="#执行容器命令" class="headerlink" title="执行容器命令"></a>执行容器命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kubectl exec POD [-c CONTAINER] -- COMMAND [args...] [options]</span></span><br><span class="line">kubectl <span class="built_in">exec</span> &lt;pod-name&gt; data                            <span class="comment"># 执行Pod的data命令，默认是用Pod中的第一个容器执行</span></span><br><span class="line">kubectl <span class="built_in">exec</span> &lt;pod-name&gt; -c &lt;container-name&gt; data        <span class="comment"># 执行Pod的data命令</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it &lt;pod-name&gt; -c &lt;container-name&gt; bash    <span class="comment"># 通过bash获得Pod中某个容器的TTY，相当于登录容器</span></span><br></pre></td></tr></table></figure><h2 id="kubectl命令列表"><a href="#kubectl命令列表" class="headerlink" title="kubectl命令列表"></a>kubectl命令列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">help</span></span><br><span class="line">kubectl controls the Kubernetes cluster manager.</span><br><span class="line"></span><br><span class="line">Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/</span><br><span class="line"></span><br><span class="line">Basic Commands (Beginner):</span><br><span class="line">  create         Create a resource from a file or from stdin.</span><br><span class="line">  expose         Take a replication controller, service, deployment or pod and expose it as a new Kubernetes Service</span><br><span class="line">  run            Run a particular image on the cluster</span><br><span class="line">  <span class="built_in">set</span>            Set specific features on objects</span><br><span class="line"></span><br><span class="line">Basic Commands (Intermediate):</span><br><span class="line">  explain        Documentation of resources</span><br><span class="line">  get            Display one or many resources</span><br><span class="line">  edit           Edit a resource on the server</span><br><span class="line">  delete         Delete resources by filenames, stdin, resources and names, or by resources and label selector</span><br><span class="line"></span><br><span class="line">Deploy Commands:</span><br><span class="line">  rollout        Manage the rollout of a resource</span><br><span class="line">  scale          Set a new size <span class="keyword">for</span> a Deployment, ReplicaSet, Replication Controller, or Job</span><br><span class="line">  autoscale      Auto-scale a Deployment, ReplicaSet, or ReplicationController</span><br><span class="line"></span><br><span class="line">Cluster Management Commands:</span><br><span class="line">  certificate    Modify certificate resources.</span><br><span class="line">  cluster-info   Display cluster info</span><br><span class="line">  top            Display Resource (CPU/Memory/Storage) usage.</span><br><span class="line">  cordon         Mark node as unschedulable</span><br><span class="line">  uncordon       Mark node as schedulable</span><br><span class="line">  drain          Drain node <span class="keyword">in</span> preparation <span class="keyword">for</span> maintenance</span><br><span class="line">  taint          Update the taints on one or more nodes</span><br><span class="line"></span><br><span class="line">Troubleshooting and Debugging Commands:</span><br><span class="line">  describe       Show details of a specific resource or group of resources</span><br><span class="line">  logs           Print the logs <span class="keyword">for</span> a container <span class="keyword">in</span> a pod</span><br><span class="line">  attach         Attach to a running container</span><br><span class="line">  <span class="built_in">exec</span>           Execute a <span class="built_in">command</span> <span class="keyword">in</span> a container</span><br><span class="line">  port-forward   Forward one or more <span class="built_in">local</span> ports to a pod</span><br><span class="line">  proxy          Run a proxy to the Kubernetes API server</span><br><span class="line">  cp             Copy files and directories to and from containers.</span><br><span class="line">  auth           Inspect authorization</span><br><span class="line"></span><br><span class="line">Advanced Commands:</span><br><span class="line">  diff           Diff live version against would-be applied version</span><br><span class="line">  apply          Apply a configuration to a resource by filename or stdin</span><br><span class="line">  patch          Update field(s) of a resource using strategic merge patch</span><br><span class="line">  replace        Replace a resource by filename or stdin</span><br><span class="line">  <span class="built_in">wait</span>           Experimental: Wait <span class="keyword">for</span> a specific condition on one or many resources.</span><br><span class="line">  convert        Convert config files between different API versions</span><br><span class="line"></span><br><span class="line">Settings Commands:</span><br><span class="line">  label          Update the labels on a resource</span><br><span class="line">  annotate       Update the annotations on a resource</span><br><span class="line">  completion     Output shell completion code <span class="keyword">for</span> the specified shell (bash or zsh)</span><br><span class="line"></span><br><span class="line">Other Commands:</span><br><span class="line">  api-resources  Print the supported API resources on the server</span><br><span class="line">  api-versions   Print the supported API versions on the server, <span class="keyword">in</span> the form of <span class="string">"group/version"</span></span><br><span class="line">  config         Modify kubeconfig files</span><br><span class="line">  plugin         Provides utilities <span class="keyword">for</span> interacting with plugins.</span><br><span class="line">  version        Print the client and server version information</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  kubectl [flags] [options]</span><br><span class="line"></span><br><span class="line">Use <span class="string">"kubectl &lt;command&gt; --help"</span> <span class="keyword">for</span> more information about a given <span class="built_in">command</span>.</span><br><span class="line">Use <span class="string">"kubectl options"</span> <span class="keyword">for</span> a list of global <span class="built_in">command</span>-line options (applies to all commands).</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Python的GIL</title>
      <link href="/2019/02/13/python-gil/"/>
      <url>/2019/02/13/python-gil/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文原文地址：<a href="http://cenalulu.github.io/python/gil-in-python/" target="_blank" rel="noopener">http://cenalulu.github.io/python/gil-in-python/</a></p></blockquote><h2 id="GIL是什么"><a href="#GIL是什么" class="headerlink" title="GIL是什么"></a>GIL是什么</h2><p>首先需要明确的一点是<code>GIL</code>并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C++，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把GIL归结为Python语言的缺陷。所以这里要先明确一点：<code>GIL</code>并不是Python的特性，Python完全可以不依赖于GIL。</p><a id="more"></a><p>那么CPython实现中的GIL又是什么呢？GIL全称<code>Global Interpreter Lock</code>为了避免误导，我们还是来看一下官方给出的解释：</p><blockquote><p>In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threadsfrom executing Python bytecodes at once. This lock is necessary mainly because CPython’smemory management is not thread-safe. (However, since the GIL exists,other features have grown to depend on the guarantees that it enforces.)</p></blockquote><p>好吧，是不是看上去很糟糕？一个防止多线程并发执行机器码的一个Mutex，乍一看就是个BUG般存在的全局锁嘛！别急，我们下面慢慢的分析。</p><h2 id="为什么会有GIL"><a href="#为什么会有GIL" class="headerlink" title="为什么会有GIL"></a>为什么会有GIL</h2><p>由于物理上得限制，各CPU厂商在核心频率上的比赛已经被多核所取代。为了更有效的利用多核处理器的性能，就出现了多线程的编程方式，而随之带来的就是线程间数据一致性和状态同步的困难。即使在CPU内部的Cache也不例外，为了有效解决多份缓存之间的数据同步时各厂商花费了不少心思，也不可避免的带来了一定的性能损失。</p><p>Python当然也逃不开，为了利用多核，Python开始支持多线程。而解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。于是有了GIL这把超级大锁，而当越来越多的代码库开发者接受了这种设定后，他们开始大量依赖这种特性（即默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作）。</p><p>慢慢的这种实现方式被发现是蛋疼且低效的。但当大家试图去拆分和去除GIL的时候，发现大量库代码开发者已经重度依赖GIL而非常难以去除了。有多难？做个类比，像MySQL这样的“小项目”为了把Buffer Pool Mutex这把大锁拆分成各个小锁也花了从5.5到5.6再到5.7多个大版为期近5年的时间，并且仍在继续。MySQL这个背后有公司支持且有固定开发团队的产品走的如此艰难，那又更何况Python这样核心开发和代码贡献者高度社区化的团队呢？</p><p>所以简单的说GIL的存在更多的是历史原因。如果推到重来，多线程的问题依然还是要面对，但是至少会比目前GIL这种方式会更优雅。</p><h2 id="GIL的影响"><a href="#GIL的影响" class="headerlink" title="GIL的影响"></a>GIL的影响</h2><p>从上文的介绍和官方的定义来看，GIL无疑就是一把全局排他锁。毫无疑问全局锁的存在会对多线程的效率有不小影响。甚至就几乎等于Python是个单线程的程序。 那么读者就会说了，全局锁只要释放的勤快效率也不会差啊。只要在进行耗时的IO操作的时候，能释放GIL，这样也还是可以提升运行效率的嘛。或者说再差也不会比单线程的效率差吧。理论上是这样，而实际上呢？Python比你想的更糟。</p><p>下面我们就对比下Python在多线程和单线程下得效率对比。测试方法很简单，一个循环1亿次的计数器函数。一个通过单线程执行两次，一个多线程执行。最后比较执行总时间。测试环境为双核的Mac pro。注：为了减少线程库本身性能损耗对测试结果带来的影响，这里单线程的代码同样使用了线程。只是顺序的执行两次，模拟单线程。</p><h3 id="顺序执行的单线程-single-thread-py"><a href="#顺序执行的单线程-single-thread-py" class="headerlink" title="顺序执行的单线程(single_thread.py)"></a>顺序执行的单线程(single_thread.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    thread_array = &#123;&#125;</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = Thread(target=my_counter)</span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Total time: &#123;&#125;"</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="同时执行的两个并发线程-multi-thread-py"><a href="#同时执行的两个并发线程-multi-thread-py" class="headerlink" title="同时执行的两个并发线程(multi_thread.py)"></a>同时执行的两个并发线程(multi_thread.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_counter</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    thread_array = &#123;&#125;</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = Thread(target=my_counter)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_array[tid] = t</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        thread_array[i].join()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    print(<span class="string">"Total time: &#123;&#125;"</span>.format(end_time - start_time))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>下图是测试结果：</p><p><img src="/images/python-gil-1.jpg" alt></p><p>可以看到python在多线程的情况下居然比单线程整整慢了45%。按照之前的分析，即使是有GIL全局锁的存在，串行化的多线程也应该和单线程有一样的效率才对。那么怎么会有这么糟糕的结果呢？</p><p>让我们通过GIL的实现原理来分析这其中的原因。</p><h2 id="当前GIL设计的缺陷"><a href="#当前GIL设计的缺陷" class="headerlink" title="当前GIL设计的缺陷"></a>当前GIL设计的缺陷</h2><p>###基于pcode数量的调度方式</p><p>按照Python社区的想法，操作系统本身的线程调度已经非常成熟稳定了，没有必要自己搞一套。所以Python的线程就是C语言的一个pthread，并通过操作系统调度算法进行调度（例如linux是CFS）。为了让各个线程能够平均利用CPU时间，python会计算当前已执行的微代码数量，达到一定阈值后就强制释放GIL。而这时也会触发一次操作系统的线程调度（当然是否真正进行上下文切换由操作系统自主决定）。</p><p>伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    acquire GIL</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1000</span>:</span><br><span class="line">        do something</span><br><span class="line">    release GIL</span><br><span class="line">    /* Give Operating System a chance to do thread scheduling */</span><br></pre></td></tr></table></figure><p>这种模式在只有一个CPU核心的情况下毫无问题。任何一个线程被唤起时都能成功获得到GIL（因为只有释放了GIL才会引发线程调度）。但当CPU有多个核心的时候，问题就来了。从伪代码可以看到，从<code>release GIL</code>到<code>acquire GIL</code>之间几乎是没有间隙的。所以当其他在其他核心上的线程被唤醒时，大部分情况下主线程已经又再一次获取到GIL了。这个时候被唤醒执行的线程只能白白的浪费CPU时间，看着另一个线程拿着GIL欢快的执行着。然后达到切换时间后进入待调度状态，再被唤醒，再等待，以此往复恶性循环。</p><p>PS：当然这种实现方式是原始而丑陋的，Python的每个版本中也在逐渐改进GIL和线程调度之间的互动关系。例如先尝试持有GIL在做线程上下文切换，在IO等待时释放GIL等尝试。但是无法改变的是GIL的存在使得操作系统线程调度的这个本来就昂贵的操作变得更奢侈了。</p><p>为了直观的理解GIL对于多线程带来的性能影响，这里直接借用的一张测试结果图（见下图）。图中表示的是两个线程在双核CPU上得执行情况。两个线程均为CPU密集型运算线程。绿色部分表示该线程在运行，且在执行有用的计算，红色部分为线程被调度唤醒，但是无法获取GIL导致无法进行有效运算等待的时间。由图可见，GIL的存在导致多线程无法很好的立即多核CPU的并发处理能力。</p><p><img src="/images/python-gil-2.png" alt></p><p>那么Python的IO密集型线程能否从多线程中受益呢？我们来看下面这张测试结果。颜色代表的含义和上图一致。白色部分表示IO线程处于等待。可见，当IO线程收到数据包引起终端切换后，仍然由于一个CPU密集型线程的存在，导致无法获取GIL锁，从而进行无尽的循环等待。</p><p><img src="/images/python-gil-3.png" alt></p><p>简单的总结下就是：Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。</p><h2 id="如何避免受到GIL的影响"><a href="#如何避免受到GIL的影响" class="headerlink" title="如何避免受到GIL的影响"></a>如何避免受到GIL的影响</h2><p>说了那么多，如果不说解决方案就仅仅是个科普帖，然并卵。GIL这么烂，有没有办法绕过呢？我们来看看有哪些现成的方案。</p><h3 id="用multiprocessing替代Thread"><a href="#用multiprocessing替代Thread" class="headerlink" title="用multiprocessing替代Thread"></a>用multiprocessing替代Thread</h3><p>multiprocessing库的出现很大程度上是为了弥补thread库因为GIL而低效的缺陷。它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。</p><p>当然multiprocessing也不是万能良药。它的引入会增加程序实现时线程间数据通讯和同步的困难。就拿计数器来举例子，如果我们要多个线程累加同一个变量，对于thread来说，申明一个global变量，用thread.Lock的context包裹住三行就搞定了。而multiprocessing由于进程之间无法看到对方的数据，只能通过在主线程申明一个Queue，put再get或者用share memory的方法。这个额外的实现成本使得本来就非常痛苦的多线程程序编码，变得更加痛苦了。</p><h3 id="用其他解析器"><a href="#用其他解析器" class="headerlink" title="用其他解析器"></a>用其他解析器</h3><p>之前也提到了既然GIL只是CPython的产物，那么其他解析器是不是更好呢？没错，像JPython和IronPython这样的解析器由于实现语言的特性，他们不需要GIL的帮助。然而由于用了Java/C#用于解析器实现，他们也失去了利用社区众多C语言模块有用特性的机会。所以这些解析器也因此一直都比较小众。毕竟功能和性能大家在初期都会选择前者，Done is better than perfect。</p><h3 id="所以没救了么？"><a href="#所以没救了么？" class="headerlink" title="所以没救了么？"></a>所以没救了么？</h3><p>当然Python社区也在非常努力的不断改进GIL，甚至是尝试去除GIL。并在各个小版本中有了不少的进步。</p><ul><li>将切换颗粒度从基于opcode计数改成基于时间片计数</li><li>避免最近一次释放GIL锁的线程再次被立即调度</li><li>新增线程优先级功能（高优先级线程可以迫使其他线程释放所持有的GIL锁）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Python GIL其实是功能和性能之间权衡后的产物，它尤其存在的合理性，也有较难改变的客观因素。从本分的分析中，我们可以做以下一些简单的总结：</p><ul><li>因为GIL的存在，只有IO Bound场景下得多线程会得到较好的性能</li><li>如果对并行计算性能较高的程序可以考虑把核心部分也成C模块，或者索性用其他语言实现</li><li>GIL在较长一段时间内将会继续存在，但是会不断对其进行改进</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://www.jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/" target="_blank" rel="noopener">Python’s hardest problem</a></li><li><a href="https://wiki.python.org/moin/GlobalInterpreterLock" target="_blank" rel="noopener">Official documents about GIL</a></li><li><a href="http://dabeaz.blogspot.com/2010/02/revisiting-thread-priorities-and-new.html" target="_blank" rel="noopener">Revisiting thread priorities and the new GIL</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Requests源码解析</title>
      <link href="/2019/02/01/source-code-analysis-requests/"/>
      <url>/2019/02/01/source-code-analysis-requests/</url>
      
        <content type="html"><![CDATA[<p>年终岁尾，也没心思写代码了，后来想想，看看<a href="https://github.com/requests/requests" target="_blank" rel="noopener">requests</a>源代码吧~</p><hr><h2 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a>setup.py</h2><p>首先看这一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">-1</span>] == <span class="string">'publish'</span>:</span><br><span class="line">    os.system(<span class="string">'python setup.py sdist bdist_wheel'</span>)</span><br><span class="line">    os.system(<span class="string">'twine upload dist/*'</span>)</span><br><span class="line">    sys.exit()</span><br></pre></td></tr></table></figure><p>当执行<code>python setup.py publish</code>时会自动编译并上传分发包，咱们在编写分发包时可以参考这种写法，不过可以优化，我们只上传当前版本的分发包即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">-1</span>] == <span class="string">'publish'</span>:</span><br><span class="line">    os.system(<span class="string">'python setup.py sdist bdist_wheel'</span>)</span><br><span class="line">    os.system(<span class="string">'twine upload dist/*&#123;&#125;*'</span>.format(about[<span class="string">'__version__'</span>]))</span><br><span class="line">    sys.exit()</span><br></pre></td></tr></table></figure><p>再看这一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">about = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> open(os.path.join(here, <span class="string">'requests'</span>, <span class="string">'__version__.py'</span>), <span class="string">'r'</span>, <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    exec(f.read(), about)</span><br></pre></td></tr></table></figure><p>这段代码有两个写的好的地方：</p><ol><li>将一些公共配置信息放到了<code>requests/__version__.py</code>文件中；</li><li>在执行<code>setup.py</code>时不会引入不必要module。</li></ol><a id="more"></a><hr><h2 id="requests-version-py"><a href="#requests-version-py" class="headerlink" title="requests/__version__.py"></a>requests/__version__.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__title__ = <span class="string">'requests'</span></span><br><span class="line">__description__ = <span class="string">'Python HTTP for Humans.'</span></span><br><span class="line">__url__ = <span class="string">'http://python-requests.org'</span></span><br><span class="line">__version__ = <span class="string">'2.21.0'</span></span><br><span class="line">__build__ = <span class="number">0x022100</span></span><br><span class="line">__author__ = <span class="string">'Kenneth Reitz'</span></span><br><span class="line">__author_email__ = <span class="string">'me@kennethreitz.org'</span></span><br><span class="line">__license__ = <span class="string">'Apache 2.0'</span></span><br><span class="line">__copyright__ = <span class="string">'Copyright 2018 Kenneth Reitz'</span></span><br><span class="line">__cake__ = <span class="string">u'\u2728 \U0001f370 \u2728'</span></span><br></pre></td></tr></table></figure><p>正常编写的分发包安装完之后，是无法找到这些信息的，这样写之后，分发包安装完之后也可以看到这部分信息，另外，在代码中，还可以将这些信息用作逻辑判断。</p><hr><h2 id="requests-init-py"><a href="#requests-init-py" class="headerlink" title="requests/__init__.py"></a>requests/__init__.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .__version__ <span class="keyword">import</span> __title__, __description__, __url__, __version__</span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> packages</span><br></pre></td></tr></table></figure><p>在requests中，大量使用相对位置import模块，这也是值得学习的一个地方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> urllib3.contrib <span class="keyword">import</span> pyopenssl</span><br><span class="line">    pyopenssl.inject_into_urllib3()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check cryptography version</span></span><br><span class="line">    <span class="keyword">from</span> cryptography <span class="keyword">import</span> __version__ <span class="keyword">as</span> cryptography_version</span><br><span class="line">    _check_cryptography(cryptography_version)</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这是一段检测依赖包版本的代码，我们在写代码的时候会依赖各种包，如果版本不一致可能会导致各种未知的情况，可以按照这段代码的写法检测依赖包的版本问题。</p><hr><h2 id="requests-session-py"><a href="#requests-session-py" class="headerlink" title="requests/session.py"></a>requests/session.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span><span class="params">(SessionRedirectMixin)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        self.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Closes all adapters and as such the session"""</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> self.adapters.values():</span><br><span class="line">            v.close()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>类Session是一个标准上下文管理器的写法，它可以直接使用with语句块进行代码编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> requests.Session() <span class="keyword">as</span> s:</span><br><span class="line">    s.get(<span class="string">'https://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>这也是一个值得我们学习的地方，当我们编写一段涉及资源申请、使用、销毁的代码时，可以按这种方式进行封装。</p><hr><h2 id="requests-api-py"><a href="#requests-api-py" class="headerlink" title="requests/api.py"></a>requests/api.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(method, url, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> sessions.Session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">return</span> session.request(method=method, url=url, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url, params=None, **kwargs)</span>:</span></span><br><span class="line">    kwargs.setdefault(<span class="string">'allow_redirects'</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'get'</span>, url, params=params, **kwargs)</span><br></pre></td></tr></table></figure><p>这也是一个值得学习的地方，当我们想读一个配置文件可以采用这种写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_configs</span><span class="params">(config_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(config_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line">configs = read_configs(<span class="string">'/path/to/config'</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="requests-exceptions-py"><a href="#requests-exceptions-py" class="headerlink" title="requests/exceptions.py"></a>requests/exceptions.py</h2><p>这个文件中都是一些自定义异常，我认为这里有两个需要学习的地方：</p><ol><li>在一个文件中定义异常，方便统一管理；</li><li>先定义一个基类异常，然后在这个基类的基础上定义各种业务的异常。</li></ol><hr><h2 id="requests-compat-py"><a href="#requests-compat-py" class="headerlink" title="requests/compat.py"></a>requests/compat.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Syntax sugar.</span></span><br><span class="line">_ver = sys.version_info</span><br><span class="line"><span class="comment">#: Python 2.x?</span></span><br><span class="line">is_py2 = (_ver[<span class="number">0</span>] == <span class="number">2</span>)</span><br><span class="line"><span class="comment">#: Python 3.x?</span></span><br><span class="line">is_py3 = (_ver[<span class="number">0</span>] == <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_py2:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> is_py3:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>如果你的代码需要兼容Python2和Python3的话，这是一个很好的例子。</p><hr><h2 id="requests-utils-py"><a href="#requests-utils-py" class="headerlink" title="requests/utils.py"></a>requests/utils.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.platform == <span class="string">'win32'</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>当你的代码需要考虑平台兼容性时，可以这么做，<code>sys.platform</code>可能得值有：<code>linux</code>、<code>win32</code>、<code>cygwin</code>、<code>darwin</code>等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的with语句块</title>
      <link href="/2019/02/01/python-with/"/>
      <url>/2019/02/01/python-with/</url>
      
        <content type="html"><![CDATA[<p>WITH语句块用于使用上下文管理器定义的方法。语法结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with_stmt ::=  <span class="string">"with"</span> with_item (<span class="string">","</span> with_item)* <span class="string">":"</span> suite</span><br><span class="line">with_item ::=  expression [<span class="string">"as"</span> target]</span><br></pre></td></tr></table></figure><p>我们经常会用到文件读写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"a.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>使用with语句块可以这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"a.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.read()</span><br></pre></td></tr></table></figure><a id="more"></a><p>也可以同时打开多个文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"a.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> a, open(<span class="string">"b.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> b:</span><br><span class="line">    a.read()</span><br><span class="line">    b.read()</span><br></pre></td></tr></table></figure><p>我们还可以定义自己的类使用with语句，只需要实现<code>__enter__</code>、<code>__exit__</code>这两个函数，详见<a href="https://docs.python.org/3.7/reference/datamodel.html#context-managers" target="_blank" rel="noopener">With Statement Context Managers</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"----enter----"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span></span><br><span class="line">        print(<span class="string">"----exit----"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> a:</span><br><span class="line">    print(<span class="string">"----with----"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; ----enter----</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; ----with----</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; ----exit----</span></span><br></pre></td></tr></table></figure><p>除了上面那种方法之外，还可以使用<a href="https://docs.python.org/3.7/library/contextlib.html#contextlib.contextmanager" target="_blank" rel="noopener">contextlib.contextmanager</a>装饰器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">managed_resource</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">    <span class="comment"># Code to acquire resource, e.g.:</span></span><br><span class="line">    resource = acquire_resource(*args, **kwds)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> resource</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># Code to release resource, e.g.:</span></span><br><span class="line">        release_resource(resource)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> managed_resource(timeout=<span class="number">3600</span>) <span class="keyword">as</span> resource:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>注意，被装饰的方法必须返回一个可迭代的对象，并且只能有一个值，这个值作为<code>with</code>语句块的<code>as</code>语句的内容，另外，在<code>yield</code>之后需要释放对应的资源。所以，推荐的写法如上，被装饰的方法前半部分获取相应的资源，然后<code>yield</code>出来，后半部分释放对应的资源。推荐<code>try...except...finally...</code>写法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证码识别</title>
      <link href="/2019/01/29/captcha-ocr/"/>
      <url>/2019/01/29/captcha-ocr/</url>
      
        <content type="html"><![CDATA[<p>使用<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">Google’s Tesseract-OCR Engine</a>来做验证码识别。</p><h2 id="安装Tesseract"><a href="#安装Tesseract" class="headerlink" title="安装Tesseract"></a>安装Tesseract</h2><p>参考<a href="https://github.com/tesseract-ocr/tesseract/wiki" target="_blank" rel="noopener">Install Tesseract via pre-built binary package</a>安装Tesseract。</p><h2 id="识别验证码"><a href="#识别验证码" class="headerlink" title="识别验证码"></a>识别验证码</h2><p>识别验证码可以按照以下步骤进行：</p><ol><li>处理验证码图片<ol><li>去掉背景，有些验证码背景是纯色背景，这样的验证码我们可以先去掉背景色</li><li>去噪/干扰线，去掉噪点以及干扰线，有些干扰线是1像素宽度，这样可以使用去噪点的方式去除干扰线</li><li>二值化，将图片做二值化处理</li><li>图片切割，将图片切分成单个字符的小图片，也可不切割</li></ol></li><li>识别验证码</li></ol><a id="more"></a><h2 id="字体库训练"><a href="#字体库训练" class="headerlink" title="字体库训练"></a>字体库训练</h2><p>为了提高验证码的识别率，我们需要先对<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">Tesseract</a>进行训练，生成自己的字体库。</p><p>这里我们使用<a href="http://vietocr.sourceforge.net/training.html" target="_blank" rel="noopener">jTessBoxEditor</a>工具。</p><p>先设置一些环境变量：</p><h3 id="0-准备验证码图片"><a href="#0-准备验证码图片" class="headerlink" title="0. 准备验证码图片"></a>0. 准备验证码图片</h3><p>准备一些处理后的验证码图片，最好100张以上。</p><h3 id="1-合并图片"><a href="#1-合并图片" class="headerlink" title="1. 合并图片"></a>1. 合并图片</h3><p>打开<a href="http://vietocr.sourceforge.net/training.html" target="_blank" rel="noopener">jTessBoxEditor</a>，使用<code>Tools -&gt; Merge TIFF</code>合并验证码图片，将合并后的图片命名为<code>eng.captcha.exp0.tif</code>。</p><h3 id="2-生成box文件"><a href="#2-生成box文件" class="headerlink" title="2. 生成box文件"></a>2. 生成box文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract eng.captcha.exp0.tif eng.captcha.exp0 -l captcha --psm 7 batch.nochop makebox</span><br></pre></td></tr></table></figure><h3 id="3-修改box文件"><a href="#3-修改box文件" class="headerlink" title="3. 修改box文件"></a>3. 修改box文件</h3><p>打开<a href="http://vietocr.sourceforge.net/training.html" target="_blank" rel="noopener">jTessBoxEditor</a>，编辑box文件内容：</p><p><img src="/images/jTessBoxEditor.png" alt></p><h3 id="4-生成font-properties"><a href="#4-生成font-properties" class="headerlink" title="4. 生成font_properties"></a>4. 生成font_properties</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> captcha 0 0 0 0 0 &gt; font_properties</span><br></pre></td></tr></table></figure><h3 id="5-生成训练文件"><a href="#5-生成训练文件" class="headerlink" title="5. 生成训练文件"></a>5. 生成训练文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract eng.captcha.exp0.tif eng.captcha.exp0 -l captcha --psm 7 nobatch box.train</span><br></pre></td></tr></table></figure><h3 id="6-生成字符集文件"><a href="#6-生成字符集文件" class="headerlink" title="6. 生成字符集文件"></a>6. 生成字符集文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unicharset_extractor eng.captcha.exp0.box</span><br></pre></td></tr></table></figure><h3 id="7-生成shape文件"><a href="#7-生成shape文件" class="headerlink" title="7. 生成shape文件"></a>7. 生成shape文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shapeclustering -F font_properties -U unicharset -O eng.unicharset eng.captcha.exp0.tr</span><br></pre></td></tr></table></figure><h3 id="8-生成聚集字符特征文件"><a href="#8-生成聚集字符特征文件" class="headerlink" title="8. 生成聚集字符特征文件"></a>8. 生成聚集字符特征文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mftraining -F font_properties -U unicharset -O eng.unicharset eng.captcha.exp0.tr</span><br></pre></td></tr></table></figure><h3 id="9-生成字符正常化特征文件"><a href="#9-生成字符正常化特征文件" class="headerlink" title="9. 生成字符正常化特征文件"></a>9. 生成字符正常化特征文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cntraining eng.captcha.exp0.tr</span><br></pre></td></tr></table></figure><h3 id="10-更名"><a href="#10-更名" class="headerlink" title="10. 更名"></a>10. 更名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rename normproto captcha.normproto</span><br><span class="line">rename inttemp captcha.inttemp</span><br><span class="line">rename pffmtable captcha.pffmtable</span><br><span class="line">rename unicharset captcha.unicharset</span><br><span class="line">rename shapetable captcha.shapetable</span><br></pre></td></tr></table></figure><h3 id="11-合并训练文件，生成captcha-traineddata"><a href="#11-合并训练文件，生成captcha-traineddata" class="headerlink" title="11. 合并训练文件，生成captcha.traineddata"></a>11. 合并训练文件，生成captcha.traineddata</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">combine_tessdata captcha.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tesseract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python图片识别</title>
      <link href="/2019/01/21/python-ocr/"/>
      <url>/2019/01/21/python-ocr/</url>
      
        <content type="html"><![CDATA[<p>使用<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">Google’s Tesseract-OCR Engine</a>来识别图片。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Tesseract"><a href="#安装Tesseract" class="headerlink" title="安装Tesseract"></a>安装Tesseract</h3><p>参考<a href="https://github.com/tesseract-ocr/tesseract/wiki" target="_blank" rel="noopener">Install Tesseract via pre-built binary package</a>安装Tesseract。</p><h3 id="安装pytesseract"><a href="#安装pytesseract" class="headerlink" title="安装pytesseract"></a>安装pytesseract</h3><p>直接使用pip命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure><h2 id="Quickstart"><a href="#Quickstart" class="headerlink" title="Quickstart"></a>Quickstart</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you don't have tesseract executable in your PATH, include the following:</span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r'&lt;full_path_to_your_tesseract_executable&gt;'</span></span><br><span class="line"><span class="comment"># Example tesseract_cmd = r'C:\Program Files (x86)\Tesseract-OCR\tesseract'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Simple image to string</span></span><br><span class="line">print(pytesseract.image_to_string(Image.open(<span class="string">'test.png'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># French text image to string</span></span><br><span class="line">print(pytesseract.image_to_string(Image.open(<span class="string">'test-european.jpg'</span>), lang=<span class="string">'fra'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get bounding box estimates</span></span><br><span class="line">print(pytesseract.image_to_boxes(Image.open(<span class="string">'test.png'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get verbose data including boxes, confidences, line and page numbers</span></span><br><span class="line">print(pytesseract.image_to_data(Image.open(<span class="string">'test.png'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get information about orientation and script detection</span></span><br><span class="line">print(pytesseract.image_to_osd(Image.open(<span class="string">'test.png'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># In order to bypass the internal image conversions, just use relative or absolute image path</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> If you don't use supported images, tesseract will return error</span></span><br><span class="line">print(pytesseract.image_to_string(<span class="string">'test.png'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># get a searchable PDF</span></span><br><span class="line">pdf = pytesseract.image_to_pdf_or_hocr(<span class="string">'test.png'</span>, extension=<span class="string">'pdf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get HOCR output</span></span><br><span class="line">hocr = pytesseract.image_to_pdf_or_hocr(<span class="string">'test.png'</span>, extension=<span class="string">'hocr'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tesseract </tag>
            
            <tag> ocr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python解包</title>
      <link href="/2019/01/18/python-unpack/"/>
      <url>/2019/01/18/python-unpack/</url>
      
        <content type="html"><![CDATA[<p>昨天有个Python初学者问了一个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a, b, c)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 怎么用一个元组作为参数直接传递给test函数？</span></span><br></pre></td></tr></table></figure><p>这里用到了一个解包的概念，可以直接使用<code>test(*(1, 2, 3))</code>。</p><h2 id="解包可迭代对象"><a href="#解包可迭代对象" class="headerlink" title="解包可迭代对象"></a>解包可迭代对象</h2><p>在Python中，可迭代对象都可以解包，如str、list、tuple、set、生成器、迭代器…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a0, a1, *args, a_1 = <span class="string">"Hello world!"</span>     <span class="comment"># 解包str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a0</span><br><span class="line"><span class="string">'H'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_1</span><br><span class="line"><span class="string">'!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a0, a1, *args, a_1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]     <span class="comment"># 解包list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a0</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_1</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a0, a1, *args, a_1 = range(<span class="number">10</span>)      <span class="comment"># 解包生成器</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a0</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_1</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a0, a1, (a2_0, a2_1, *a2_args), *args = [<span class="string">"0"</span>, <span class="string">"a"</span>, (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)]     <span class="comment"># 双重解包</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a0</span><br><span class="line"><span class="string">'0'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2_0</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a2_args</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="解包dict"><a href="#解包dict" class="headerlink" title="解包dict"></a>解包dict</h2><p>正常情况下，dict也是可以迭代的，只不过只能迭代key值，不能迭代value，也就是说，dict是可以正常解包的。由于dict是无序的，解包也是无序的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'c'</span></span><br></pre></td></tr></table></figure><h2 id="函数调用中的解包操作"><a href="#函数调用中的解包操作" class="headerlink" title="函数调用中的解包操作"></a>函数调用中的解包操作</h2><p>普通解包，可以在前面添加一个<code>*</code>号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(*[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])       <span class="comment"># 解包list</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(*&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)    <span class="comment"># 解包set</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(*<span class="string">'Hello world!'</span>)  <span class="comment"># 解包str</span></span><br><span class="line">H e l l o   w o r l d !</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(*&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)    <span class="comment"># 解包dict的key值</span></span><br><span class="line">a b</span><br></pre></td></tr></table></figure><p>dict解包还可以用于关键字参数上，在前面添加两个<code>*</code>号，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span>:</span></span><br><span class="line">    print(a, b, c)</span><br><span class="line"></span><br><span class="line">test(**&#123;<span class="string">'a'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">20</span>, <span class="string">'c'</span>: <span class="number">30</span>&#125;)</span><br><span class="line"><span class="comment"># ==&gt; 10 20 30</span></span><br></pre></td></tr></table></figure><p>在Python3.5之后，Python还支持同时对多个值进行解包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(*(<span class="number">1</span>, <span class="number">2</span>), *[<span class="number">3</span>], *<span class="string">'Hello world!'</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> H e l l o   w o r l d !</span><br></pre></td></tr></table></figure><p>也可以将解包用在表达式中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>*range(<span class="number">3</span>), *[<span class="number">3</span>]</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;*range(<span class="number">4</span>), <span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'a'</span>: <span class="number">1</span>, **&#123;<span class="string">'b'</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;**&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;, **&#123;<span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;&#125;    <span class="comment"># 合并两个dict</span></span><br><span class="line">&#123;<span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Nodejs编写命令行工具</title>
      <link href="/2019/01/17/node-commander/"/>
      <url>/2019/01/17/node-commander/</url>
      
        <content type="html"><![CDATA[<h2 id="编写命令行工具"><a href="#编写命令行工具" class="headerlink" title="编写命令行工具"></a>编写命令行工具</h2><h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><p>直接使用<code>npm init</code>初始化一个项目，<code>package.json</code>文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"nb-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建可执行程序"><a href="#创建可执行程序" class="headerlink" title="创建可执行程序"></a>创建可执行程序</h3><p>创建文件<code>bin/nb-cli</code>，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'cli'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(process.argv);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置自定义命令"><a href="#配置自定义命令" class="headerlink" title="配置自定义命令"></a>配置自定义命令</h3><p>修改<code>package.json</code>文件，添加自定义命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"nb-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">      <span class="attr">"nb-cli"</span>: <span class="string">"./bin/nb-cli"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><p>使用<code>npm install -g</code>将模块安装全局模块中，然后使用<code>nb-cli</code>命令进行测试。</p><h2 id="解析命令行参数"><a href="#解析命令行参数" class="headerlink" title="解析命令行参数"></a>解析命令行参数</h2><p>我们使用<a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">Commander</a>模块来解析参数。</p><h3 id="安装Commander"><a href="#安装Commander" class="headerlink" title="安装Commander"></a>安装Commander</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save commander</span><br></pre></td></tr></table></figure><h3 id="解析参数"><a href="#解析参数" class="headerlink" title="解析参数"></a>解析参数</h3><p>修改<code>bin/nb-cli</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .version(<span class="string">'0.1.0'</span>)</span><br><span class="line">  .option(<span class="string">'-p, --peppers'</span>, <span class="string">'Add peppers'</span>)</span><br><span class="line">  .option(<span class="string">'-P, --pineapple'</span>, <span class="string">'Add pineapple'</span>)</span><br><span class="line">  .option(<span class="string">'-b, --bbq-sauce'</span>, <span class="string">'Add bbq sauce'</span>)</span><br><span class="line">  .option(<span class="string">'-c, --cheese [type]'</span>, <span class="string">'Add the specified type of cheese [marble]'</span>, <span class="string">'marble'</span>)</span><br><span class="line">  .parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'you ordered a pizza with:'</span>);</span><br><span class="line"><span class="keyword">if</span> (program.peppers) <span class="built_in">console</span>.log(<span class="string">'  - peppers'</span>);</span><br><span class="line"><span class="keyword">if</span> (program.pineapple) <span class="built_in">console</span>.log(<span class="string">'  - pineapple'</span>);</span><br><span class="line"><span class="keyword">if</span> (program.bbqSauce) <span class="built_in">console</span>.log(<span class="string">'  - bbq'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'  - %s cheese'</span>, program.cheese);</span><br></pre></td></tr></table></figure><h3 id="测试命令-1"><a href="#测试命令-1" class="headerlink" title="测试命令"></a>测试命令</h3><p>重新安装，然后使用<code>nb-cli</code>命令进行测试。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python命令行参数解析：argparse</title>
      <link href="/2019/01/16/python-argparse/"/>
      <url>/2019/01/16/python-argparse/</url>
      
        <content type="html"><![CDATA[<p>Python标准库中自带了一个<a href="https://docs.python.org/3/library/argparse.html" target="_blank" rel="noopener">argparse</a>模块，这个模块用来解析命令行参数。当然，python还自带了另外两个库用来实现同样的功能：<a href="https://docs.python.org/3/library/getopt.html" target="_blank" rel="noopener">getopt</a>、<a href="https://docs.python.org/3/library/optparse.html" target="_blank" rel="noopener">optparse</a>。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>一个最简单的例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.parse_args()     <span class="comment"># 解析参数</span></span><br></pre></td></tr></table></figure><p>执行这段代码，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python3 prog.py</span><br><span class="line">$ python3 prog.py --<span class="built_in">help</span></span><br><span class="line">usage: prog.py [-h]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>  show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">$ python3 prog.py --verbose</span><br><span class="line">usage: prog.py [-h]</span><br><span class="line">prog.py: error: unrecognized arguments: --verbose</span><br><span class="line">$ python3 prog.py foo</span><br><span class="line">usage: prog.py [-h]</span><br><span class="line">prog.py: error: unrecognized arguments: foo</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="添加参数"><a href="#添加参数" class="headerlink" title="添加参数"></a>添加参数</h2><p>参数有两种，位置参数和选项参数，区别在于位置参数前没有符号<code>-</code>，而选项参数前有符号<code>-</code>。</p><p>这两种参数的添加都使用<a href="https://docs.python.org/3/library/argparse.html#the-add-argument-method" target="_blank" rel="noopener">add_argument</a>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prog.py</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"echo"</span>, help=<span class="string">"echo the string you use here"</span>)    <span class="comment"># 添加位置参数</span></span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbosity"</span>, help=<span class="string">"increase output verbosity"</span>)  <span class="comment"># 添加选项参数</span></span><br><span class="line">args = parser.parse_args()  <span class="comment"># 解析参数</span></span><br><span class="line">print(args)</span><br><span class="line">print(args.echo, args.verbosity)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ python prog.py --<span class="built_in">help</span></span><br><span class="line">usage: prog.py [-h] [-v VERBOSITY] <span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  <span class="built_in">echo</span>                  <span class="built_in">echo</span> the string you use here</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -v VERBOSITY, --verbosity VERBOSITY</span><br><span class="line">                        increase output verbosity</span><br><span class="line">$ python prog.py echo_value</span><br><span class="line">Namespace(<span class="built_in">echo</span>=<span class="string">'echo_value'</span>, verbosity=None)</span><br><span class="line">echo_value None</span><br><span class="line">$ python prog.py -v verbosity_value echo_value</span><br><span class="line">Namespace(<span class="built_in">echo</span>=<span class="string">'echo_value'</span>, verbosity=verbosity_value)</span><br><span class="line">echo_value verbosity_value</span><br></pre></td></tr></table></figure><h2 id="add-argument函数"><a href="#add-argument函数" class="headerlink" title="add_argument函数"></a>add_argument函数</h2><p>更详细的用法参见：<a href="https://docs.python.org/3/library/argparse.html#the-add-argument-method" target="_blank" rel="noopener">add_argument</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo问题集</title>
      <link href="/2019/01/16/hexo-bugs/"/>
      <url>/2019/01/16/hexo-bugs/</url>
      
        <content type="html"><![CDATA[<p>今天在使用hexo时遇到一个问题，特在此记录一下。</p><blockquote><p>在使用<code>local_search</code>时，一直处于loading状态</p></blockquote><p>有段时间发现hexo的search插件一直处于loading状态，后来发现有一次提交的文件中带了一个不可见的特殊字符，导致search插件故障。将该字符删除即可恢复正常。</p><p>如果你使用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a>编辑文章，建议使用插件<a href="https://marketplace.visualstudio.com/items?itemName=satokaz.vscode-bs-ctrlchar-remover" target="_blank" rel="noopener">Remove backspace control character</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python获取当前工作目录</title>
      <link href="/2019/01/09/python-getdir/"/>
      <url>/2019/01/09/python-getdir/</url>
      
        <content type="html"><![CDATA[<p>使用<code>os</code>模块获取当前工作目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.getcwd())                  <span class="comment"># 获得当前工作目录</span></span><br><span class="line">print(os.path.abspath(<span class="string">'.'</span>))         <span class="comment"># 获得当前工作目录</span></span><br><span class="line">print(os.path.abspath(<span class="string">'..'</span>))        <span class="comment"># 获得当前工作目录的父目录</span></span><br><span class="line">print(os.path.abspath(os.curdir))   <span class="comment"># 获得当前工作目录</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm问题集</title>
      <link href="/2018/12/31/helm-bugs/"/>
      <url>/2018/12/31/helm-bugs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Error: Looks like “<a href="https://kubernetes-charts.storage.googleapis.com&quot;" target="_blank" rel="noopener">https://kubernetes-charts.storage.googleapis.com&quot;</a> is not a valid chart repository or cannot be reached: read tcp 10.0.2.15:51126-&gt;172.217.160.80:443: read: connection reset by peer</p></blockquote><p>执行<code>helm init</code>时失败，这个问题可以通过手动指定stable存储库为阿里云的存储库来解决。注意，要确定tiller的版本号，可以使用<code>helm version</code>命令来查看版本号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.12.0 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MicroK8s问题集</title>
      <link href="/2018/12/28/microk8s-bugs/"/>
      <url>/2018/12/28/microk8s-bugs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ContainerCreating</p></blockquote><p>当执行<code>kubectl get pod -l app=xxx</code>时，容器一直处于ContainerCreating状态，使用<code>kubectl describe pod xxx-xxx</code>查看pod信息。</p><hr><blockquote><p>kubelet does not have ClusterDNS IP configured and cannot create Pod using “ClusterFirst” policy. Falling back to “Default” policy.</p></blockquote><p>没有启动dns服务，使用命令<code>microk8s.enable dns dashboard</code>启动dns。</p><hr><blockquote><p>code = Unknown desc = failed pulling image “k8s.gcr.io/pause:3.1”: Error response from daemon: Get <a href="https://k8s.gcr.io/v2/" target="_blank" rel="noopener">https://k8s.gcr.io/v2/</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p></blockquote><p>这是由于无法连接到国外服务器造成的，可以先从国内的服务器上拉取相应的镜像，然后修改成相应的版本即可。<a id="more"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-beijing.aliyuncs.com/zhoujun/pause-amd64:3.1</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/zhoujun/kube-proxy-amd64:v1.11.3</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/zhoujun/kube-scheduler-amd64:v1.11.3</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/zhoujun/coredns:1.1.3</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/zhoujun/pause:3.1</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/zhoujun/kube-controller-manager-amd64:v1.11.3</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/zhoujun/kube-apiserver-amd64:v1.11.3</span><br><span class="line">docker pull registry.cn-beijing.aliyuncs.com/zhoujun/etcd-amd64:3.2.18</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RobotFramework问题集</title>
      <link href="/2018/12/28/robotframework-bugs/"/>
      <url>/2018/12/28/robotframework-bugs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Importing test library ‘Selenium2Library’ failed: ImportError: No module named ‘Selenium2Library’</p></blockquote><p>安装<code>seleniumlibrary</code>时需要注意有两个包，<code>robotframework-seleniumlibrary</code>和<code>robotframework-selenium2library</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install robotframework robotframework-seleniumlibrary</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pip install robotframework robotframework-selenium2library</span><br></pre></td></tr></table></figure><hr><blockquote><p>WebDriverException: Message: ‘geckodriver’ executable needs to be in PATH.</p></blockquote><p>找不到geckodriver，使用<code>brew install geckodriver</code>命令安装。<a id="more"></a></p><hr><blockquote><p>SessionNotCreatedException: Message: Unable to find a matching set of capabilities</p></blockquote><p>驱动firefox浏览器失败，可能原因是本地没有firefox浏览器，使用Chrome替代。</p><hr><blockquote><p>WebDriverException: Message: ‘chromedriver’ executable needs to be in PATH. Please see <a href="https://sites.google.com/a/chromium.org/chromedriver/home" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/home</a></p></blockquote><p>Chrome浏览器驱动失败，使用<code>brew cask install chromedriver</code>安装驱动。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> robotframework </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vagrant一键部署Ambari服务</title>
      <link href="/2018/12/25/vagrant-ambari/"/>
      <url>/2018/12/25/vagrant-ambari/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ambari.apache.org/" target="_blank" rel="noopener">Ambari</a>是创建、管理、监视 Hadoop 的集群的工具，这里的 Hadoop 是广义，指的是 Hadoop 整个生态圈（例如 Hive，Hbase，Sqoop，Zookeeper 等），而并不仅是特指 Hadoop。简单来说，Ambari 就是为了让 Hadoop 以及相关的大数据软件更容易使用的一个工具。</p><p><code>Vagrantfile</code>文件内容如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">$num_instances = <span class="number">2</span></span><br><span class="line">$instance_name_prefix = <span class="string">"ambari"</span></span><br><span class="line">$root_domain = <span class="string">"example.com"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    config.vm.box = <span class="string">"centos/7"</span></span><br><span class="line">    config.vm.box_check_update = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    config.vm.define vm_name = $instance_name_prefix <span class="keyword">do</span> <span class="params">|ser|</span></span><br><span class="line">        ser.vm.hostname = <span class="string">"<span class="subst">#&#123;$instance_name_prefix&#125;</span>.<span class="subst">#&#123;$root_domain&#125;</span>"</span></span><br><span class="line">        ser.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"192.168.56.20"</span></span><br><span class="line">        ser.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|vb|</span></span><br><span class="line">            vb.memory = <span class="string">"1024"</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        ser.vm.provision <span class="symbol">:shell</span>, <span class="symbol">inline:</span> &lt;&lt;-SHELL</span><br><span class="line">            yum install -y git vim tree cmatrix curl wget net-tools</span><br><span class="line">            wget -nv <span class="symbol">http:</span>/<span class="regexp">/public-repo-1.hortonworks.com/ambari</span><span class="regexp">/centos7/</span><span class="number">2</span>.x/updates/<span class="number">2.7</span>.<span class="number">0</span>.<span class="number">0</span>/ambari.repo -O /etc/yum.repos.d/ambari.repo</span><br><span class="line">            yum install -y ambari-server</span><br><span class="line">        SHELL</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    (<span class="number">1</span>..$num_instances).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        config.vm.define vm_name = <span class="string">"%s-%02d"</span> % [$instance_name_prefix, i] <span class="keyword">do</span> <span class="params">|agent|</span></span><br><span class="line">            agent.vm.hostname = <span class="string">"%s-%02d.%s"</span> % [$instance_name_prefix, i, $root_domain]</span><br><span class="line">            agent.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"192.168.56.<span class="subst">#&#123;<span class="number">20</span> + i&#125;</span>"</span></span><br><span class="line">            agent.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|vb|</span></span><br><span class="line">                vb.memory = <span class="string">"6144"</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>vagrant up</code>之后，使用<code>vagrant ssh ser</code>连接到ser主机，使用root身份运行<code>ambari-server setup</code>命令配置ambari服务信息，完成之后使用浏览器访问<a href>http://your-host:8080</a>，使用<code>admin/admin</code>登录。</p><p>更详细的信息可参考：<a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.7.0.0/bk_ambari-installation/content/ch_Deploy_and_Configure_a_HDP_Cluster.html" target="_blank" rel="noopener">Deploy_and_Configure_a_HDP_Cluster</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> bigdata </tag>
            
            <tag> hadoop </tag>
            
            <tag> ambari </tag>
            
            <tag> vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装Ambari服务</title>
      <link href="/2018/12/25/centos-ambari/"/>
      <url>/2018/12/25/centos-ambari/</url>
      
        <content type="html"><![CDATA[<p>Centos安装Ambari服务非常简单，执行下面命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ambari Server</span></span><br><span class="line">wget -nv http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.7.0.0/ambari.repo -O /etc/yum.repos.d/ambari.repo</span><br><span class="line">yum install -y ambari-server</span><br><span class="line"><span class="comment"># 配置初始化信息，都默认即可</span></span><br><span class="line">ambari-server setup</span><br></pre></td></tr></table></figure><p>Ambari Server安装完成之后可使用浏览器访问<a href>http://your-host:8080</a>，使用<code>admin/admin</code>登录。</p><p><strong>注意</strong>：在配置集群之前需要先设置后各主机的hostname，否则后面添加agent有可能会找不到server。</p><p>更详细的信息可参考：<a href="https://docs.hortonworks.com/HDPDocuments/Ambari-2.7.0.0/bk_ambari-installation/content/ch_Deploy_and_Configure_a_HDP_Cluster.html" target="_blank" rel="noopener">Deploy_and_Configure_a_HDP_Cluster</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> bigdata </tag>
            
            <tag> hadoop </tag>
            
            <tag> ambari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce逻辑数据流图</title>
      <link href="/2018/12/21/hadoop-mapreduce-logical-data-flow/"/>
      <url>/2018/12/21/hadoop-mapreduce-logical-data-flow/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/hadoop_mapreduce_logical_data_flow.jpg" alt="MapReduce逻辑数据流图"></p><ol><li><code>input</code>：将数据转换成<code>map</code>的输入；</li><li><code>map</code>：处理输入的数据，每一行输入处理之后得到一行输出，输出是一个<code>key-value</code>格式的数据；</li><li><code>shuffle</code>：将<code>map</code>得到的数据按<code>key</code>进行组合，最后得到一个<code>key-values</code>的数据；</li><li><code>reduce</code>：将每一个<code>key</code>对应的<code>values</code>进行处理，得到结果<code>key-value2</code>；</li><li><code>output</code>：输出结果。</li></ol><p>这里需要理解的一个事情是，value的数据类型不仅仅是int，它可以是任意类型，包括数组。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mapreduce </tag>
            
            <tag> bigdata </tag>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gogs + Drone搭建私有CI/CD平台</title>
      <link href="/2018/12/14/docker-gogs-drone/"/>
      <url>/2018/12/14/docker-gogs-drone/</url>
      
        <content type="html"><![CDATA[<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">gogs:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">gogs/gogs</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">gogs</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">    <span class="attr">drone:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">drone/drone:1.0.1</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">drone</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DRONE_GIT_ALWAYS_AUTH=false</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DRONE_GOGS_SERVER=http://gogs.xxxx.com</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DRONE_RUNNER_CAPACITY=2</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DRONE_SERVER_HOST=drone.xxxx.com</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DRONE_SERVER_PROTO=http</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DRONE_TLS_AUTOCERT=false</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> gogs </tag>
            
            <tag> git </tag>
            
            <tag> drone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL日期时间</title>
      <link href="/2018/11/29/postgresql-timestamp/"/>
      <url>/2018/11/29/postgresql-timestamp/</url>
      
        <content type="html"><![CDATA[<p><strong>查询时区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_timezone_names;</span><br></pre></td></tr></table></figure><p><strong>格式化时间</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式化当前时间</span></span><br><span class="line"><span class="keyword">select</span> to_char(<span class="keyword">now</span>() <span class="keyword">at</span> <span class="built_in">time</span> zone <span class="string">'Asia/Shanghai'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS+8:00'</span>);</span><br><span class="line"><span class="comment">-- 格式化指定时间</span></span><br><span class="line"><span class="keyword">select</span> to_char(<span class="built_in">timestamp</span> <span class="string">'2018-11-29 17:00:00'</span> <span class="keyword">at</span> <span class="built_in">time</span> zone <span class="string">'Asia/Shanghai'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS+8:00'</span>);</span><br></pre></td></tr></table></figure><p><strong>反格式化时间</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取当前时间的0点</span></span><br><span class="line"><span class="keyword">select</span> timestamptz(to_char(<span class="keyword">now</span>() <span class="keyword">at</span> <span class="built_in">time</span> zone <span class="string">'Asia/Shanghai'</span>, <span class="string">'YYYY-MM-DD 00:00:00+8:00'</span>));</span><br><span class="line"><span class="comment">-- 获取指定时间的0点</span></span><br><span class="line"><span class="keyword">select</span> timestamptz(to_char(<span class="built_in">timestamp</span> <span class="string">'2018-11-29 17:00:00'</span> <span class="keyword">at</span> <span class="built_in">time</span> zone <span class="string">'Asia/Shanghai'</span>, <span class="string">'YYYY-MM-DD 00:00:00+8:00'</span>));</span><br></pre></td></tr></table></figure><p><strong>日期计算</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>() - <span class="string">'1 month'</span>::<span class="built_in">interval</span>;     <span class="comment">-- 1月前</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>() + <span class="string">'1 hour'</span>::<span class="built_in">interval</span>;      <span class="comment">-- 1小时后</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>() + <span class="string">'1 year 1 month 1 day 1 hour 1 min 1 sec'</span>::<span class="built_in">interval</span>;     <span class="comment">-- 1年1月1日1小时1分钟1秒后</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据学习路线</title>
      <link href="/2018/11/24/big-data-learning-route/"/>
      <url>/2018/11/24/big-data-learning-route/</url>
      
        <content type="html"><![CDATA[<p>主要分为7个阶段：</p><blockquote><p><code>入门知识</code> → <code>Java基础</code> → <code>Scala基础</code> → <code>Hadoop技术模块</code> → <code>Hadoop项目实战</code> → <code>Spark技术模块</code> → <code>大数据项目实战</code></p></blockquote><h2 id="阶段一：入门知识"><a href="#阶段一：入门知识" class="headerlink" title="阶段一：入门知识"></a>阶段一：入门知识</h2><p>学习入门知识这一部分主要针对的是新手，在学习之前需要先掌握基本的数据库知识。MySQL是一个DBMS（数据库管理系统），是最流行的关系型数据库管理系统（关系数据库，是建立在关系数据库模型基础上的数据库，借助于集合代数等概念和方法来处理数据库中的数据）。MongoDB是IT行业非常流行的一种非关系型数据库（NoSQL），其灵活的数据存储方式备受当前IT从业人员的青睐。而Redis是一个开源、支持网络、基于内存、键值对存储数据库。两者都非常有必要了解。</p><ol><li>Linux基础入门</li><li>Vim编辑器</li><li>Git实战教程</li><li>MySQL基础课程</li><li>MongoDB基础教程</li><li>Redis基础教程</li></ol><a id="more"></a><h2 id="阶段二：Java基础"><a href="#阶段二：Java基础" class="headerlink" title="阶段二：Java基础"></a>阶段二：Java基础</h2><p>Java是目前使用最为广泛的编程语言，它具有的众多特性，特别适合作为大数据应用的开发语言。Java语言具有功能强大和简单易用两个特征，跨平台应用能力比C、C++更易用，更容易上手。同时还具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。最重要的一点是Hadoop是用Java编写的。</p><ol><li>Java编程语言</li><li>Java进阶之设计模式</li><li>J2SE核心开发实战</li><li>JDK核心API</li><li>JDBC入门教程</li><li>Java8新特性指南</li></ol><h2 id="阶段三：Scala基础"><a href="#阶段三：Scala基础" class="headerlink" title="阶段三：Scala基础"></a>阶段三：Scala基础</h2><p>Scala是一种多范式的编程语言，其设计的初衷是要集成面向对象编程和函数式编程的各种特性。由于Scala运行于Java平台（Java虚拟机），并兼容现有的Java程序，所以Scala可以和大数据相关的基于JVM的系统很好的集成。</p><ol><li>Scala开发教程</li><li>Scala专题教程 – Case Class和模式匹配</li><li>Scala专题教程 – 隐式变换和隐式参数</li><li>Scala专题教程 – 抽象成员</li><li>Scala专题教程 – Extractor</li><li>Scala开发二十四点游戏</li></ol><h2 id="阶段四：Hadoop技术模块"><a href="#阶段四：Hadoop技术模块" class="headerlink" title="阶段四：Hadoop技术模块"></a>阶段四：Hadoop技术模块</h2><p>Hadoop是一款支持数据密集型分布式应用并以Apache2.0许可协议发布的开源软件框架，它能搭建大型数据仓库，PB级别数据的存储、处理、分析、统计等业务。编程语言你可以选，但Hadoop一定是大数据必学内容。</p><ol><li>Hadoop入门进阶课程</li><li>Hadoop部署及管理</li><li>HBASE教程</li><li>Hadoop分布式文件系统 – 导入和导出数据</li><li>使用Flume收集数据</li></ol><h2 id="阶段五：Hadoop项目实战"><a href="#阶段五：Hadoop项目实战" class="headerlink" title="阶段五：Hadoop项目实战"></a>阶段五：Hadoop项目实战</h2><p>当然，学完理论就要进行动手实战了，Hadoop项目实战可以帮助加深对内容的理解，并锻炼动手能力。</p><ol><li>Hadoop图处理 – hadoop应用框架</li></ol><h2 id="阶段六：Spark技术模块"><a href="#阶段六：Spark技术模块" class="headerlink" title="阶段六：Spark技术模块"></a>阶段六：Spark技术模块</h2><p>Spark和Hadoop都是大数据框架。Hadoop提供了Spark所没有的功能特性，比如分布式文件系统，而Spark为需要它的那些数据集提供了实时内存处理。所以学习Spark也非常必要。</p><ol><li>Spark2.x快速入门教程</li><li>Spark大数据动手实验</li><li>Spark基础之GraphX图计算框架学习</li><li>Spark基础之DataFrame基本概念学习</li><li>Spark基础之DataFrame高阶应用技巧</li><li>Spark基础之Streaming快速上手</li><li>Spark基础之SQL快速上手</li><li>Spark基础之使用机器学习库MLlib</li><li>Spark基础之SparkR快速上手</li><li>流式实时日志分析系统 – Spark最佳实践</li><li>使用Spark和D3.js分析航班大数据</li></ol><h2 id="阶段七：大数据项目实战"><a href="#阶段七：大数据项目实战" class="headerlink" title="阶段七：大数据项目实战"></a>阶段七：大数据项目实战</h2><p>最后阶段提供了大数据实战项目，这是对常用技能的系统运用，例如使用常用的机器学习进行建模、分析和运算，这是成为大数据工程师过程中的重要一步。</p><ol><li>Ebay在线拍卖数据分析</li><li>流式实时日志分析系统 – Spark最佳实践</li><li>大数据带你挖掘打车的秘籍</li><li>Twitter数据情感分析</li><li>使用Spark进行流量日志分析</li><li>Spark流式计算电商商品关注度</li><li>Spark的模式挖掘 – FPGrowth算法</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> bigdata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么写技术文章</title>
      <link href="/2018/11/13/how-to-write-articles/"/>
      <url>/2018/11/13/how-to-write-articles/</url>
      
        <content type="html"><![CDATA[<p>互联网发展很快，以前程序员一个人能干的活现在慢慢的被细分成多人协作，常见的职位有UI、UE、产品、前端、测试、后端、DBA，PE。但是没有哪个职位是专门负责写文档的，所有文档都是各个岗位的人兼职在做，毕竟大家都识字写两篇wiki不难。程序员可能会写接口文档，PM可能会写产品文档，UE可能会写交互文档，但并不是每个人都能写好文档。</p><p>写文档这件事很重要，也是一项很有前途的技能。但是为什么没有专业的人去做这样一件专业的事情呢？我猜测是大家都不重视，好比我是程序员里文档写的最好的和我是程序员里代码写的最快的哪个更有份量？</p><p>怎样的技术文档才算好文档呢？</p><ol><li><p>结构清晰</p><p> 所谓结构清晰就是用户能马上找到自己要查找的知识点在哪，分类清晰。 有些文档爱用模棱两个的词，比如<code>1. 常见问题</code>、<code>2. 热点问题</code>、<code>3. 高频问题</code>。</p></li></ol><a id="more"></a><ol start="2"><li><p>循序渐进</p><p> 先从最简单的开始，然后慢慢深入。 比如说学一个框架，一开始<code>Hello World</code>还没有跑起来，就先说各种配置该怎么写，这种文档让人直接从想了解到放弃。</p></li><li><p>引人入胜</p><p> 把能吸引人的地方展示出来，让人一看到就有学习的兴趣。 另外提供的API应该直接能在浏览器里模拟出一个可调用的Demo， 而不是开放的API文档需要不停的尝试，不停的踩坑才能调通。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重新设计的原因</title>
      <link href="/2018/11/12/redesign/"/>
      <url>/2018/11/12/redesign/</url>
      
        <content type="html"><![CDATA[<p>下面阐述了一些导致重新设计的一般原因，以及解决这些问题所用到的设计模式：</p><ul><li><p><strong>通过显示地指定一个类来创建对象</strong></p><p>  在创建对象时指定类名将使你受特定实现的约束而不是特定接口的约束。  这会使未来的变化更复杂。要避免这种情况，应该间接地创建对象。</p><p>  设计模式：<code>Abstract Factory</code>、<code>Factory Method</code>、<code>Prototype</code>。</p></li><li><p><strong>对特殊操作的依赖</strong></p><p>  当你为请求指定一个特殊的操作时，完成该请求的方式就固定下来了。  为避免把请求代码写死，你将可以在编译时刻或运行时刻很方便地改变响应请求的方法。</p><p>  设计模式：<code>Chain of Resposibility</code>、<code>Command</code>。</p></li><li><p><strong>对硬件和软件平台的依赖</strong></p><p>  外部的操作系统接口和应用编程接口（API）在不同的软硬件平台上是不同的。  依赖于特定平台的软件将很难移植到其他平台上，甚至都很难跟上本地平台的更新。  所以设计系统时限制其平台相关性就很重要了。</p><p>  设计模式：<code>Abstract Factory</code>、<code>Bridge</code>。</p></li></ul><a id="more"></a><ul><li><p><strong>对对象表示或实现的依赖</strong></p><p>  知道对象怎样表示、保存、定位或实现的客户在对象发生变化时可能也需要变化。  对客户隐藏这些信息能阻止连锁变化。</p><p>  设计模式：<code>Abstract Factory</code>、<code>Bridge</code>、<code>Memento</code>、<code>Proxy</code>。</p></li><li><p><strong>算法依赖</strong></p><p>  算法在开发和复用时常常被扩展、优化和替代。依赖于某个特定算法的对象在算法发生变化时不得不变化。  因此有可能发生变化的算法应该被孤立起来。</p><p>  设计模式：<code>Builder</code>、<code>Iterator</code>、<code>Strategy</code>、<code>Template Method</code>、<code>Visitor</code>。</p></li><li><p><strong>紧耦合</strong></p><p>  紧耦合的类很难独立地被复用，因为它们是互相依赖的。紧耦合产生单块的系统，  要改变或删掉一个类，你必须理解和改变其他许多类。这样的系统是一个很难学习、移植和维护的密集体。</p><p>  松散耦合提高了一个类本身被复用的可能性，并且系统更易于学习、移植和扩展。  设计模式使用抽象耦合和分层技术来提高兄的松散耦合。</p><p>  设计模式：<code>Abstract Factory</code>、<code>Command</code>、<code>Facade</code>、<code>Mediator</code>、<code>Observer</code>、<code>Chain of Responsibility</code>。</p></li><li><p><strong>通过生成子类来扩充功能</strong></p><p>  通常很难通过定义子类来定制对象。每一个新类都有固定的实现开销（初始化、终止处理等）。  定义子类还需要对父类有深入的了解。如，重定义一个操作可能需要重定义其他操作。  一个被重定义的操作可能需要调用继承下来的操作。  并且子类方法会导致类爆炸，因为即使对于一个简单的扩充，你也不得不引入许多新的子类。</p><p>  一般的对象组合技术和具体的委托技术，是继承之外组合对象行为的另一种灵活方法。  新的功能可以通过以新的方式组合已有对象，而不是通过定义已存在类的子类的方式加到应用中去。  另一方面，过多使用对象组合会是设计难于理解。  许多设计模式产生的设计中，你可以定义一个子类，且将它的实例和已存在实例进行组合来引入定制的功能。</p><p>  设计模式：<code>Bridge</code>、<code>Chain of Responsibility</code>、<code>Composite</code>、<code>Decorator</code>、<code>Oberver</code>、<code>Strategy</code>。</p></li><li><p><strong>不能方便的对类进行修改</strong></p><p>  有时你不得不改变一个难以修改的类。  也需你需要源代码而又没有（对于商业类库就有这种情况），或者可能对类的任何改变会要求修改许多已存在的其他子类。  设计模式提供在这些情况下对类进行修改的方法。</p><p>  设计模式：<code>Adapter</code>、<code>Decorator</code>、<code>Visitor</code>。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题</title>
      <link href="/2018/11/10/java-interview-questions/"/>
      <url>/2018/11/10/java-interview-questions/</url>
      
        <content type="html"><![CDATA[<ol><li>面向对象的特征有哪些方面？</li><li>访问修饰符<code>public</code>、<code>private</code>、<code>protected</code>以及不写（默认）时的区别？</li><li><code>String</code>是最基本的数据类型吗？</li><li><code>float f=3.4;</code>是否正确？</li><li><code>short s1 = 1; s1 = s1 + 1;</code>有错吗?<code>short s1 = 1; s1 += 1;</code>有错吗？</li><li>Java有没有<code>goto</code>？</li><li><code>int</code>和<code>Integer</code>有什么区别？</li><li><code>&amp;</code>和<code>&amp;&amp;</code>的区别？</li><li>解释内存中的栈(stack)、堆(heap)和静态区(static area)的用法。</li><li><code>Math.round(11.5)</code> 等于多少？<code>Math.round(-11.5)</code>等于多少？</li><li><code>switch</code>是否能作用在<code>byte</code>上，是否能作用在<code>long</code>上，是否能作用在<code>String</code>上？</li><li>用最有效率的方法计算2乘以8？</li><li>数组有没有<code>length()</code>方法？<code>String</code>有没有<code>length()</code>方法？</li><li>在Java中，如何跳出当前的多重嵌套循环？</li><li>构造器（constructor）是否可被重写（override）？</li><li>两个对象值相同(<code>x.equals(y) == true</code>)，但却可有不同的hash code，这句话对不对？</li><li>是否可以继承<code>String</code>类？</li><li>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</li><li><code>String</code>和<code>StringBuilder</code>、<code>StringBuffer</code>的区别？</li><li>重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？<a id="more"></a></li><li>描述一下JVM加载class文件的原理机制？</li><li><code>char</code>型变量中能不能存贮一个中文汉字，为什么？</li><li>抽象类（abstract class）和接口（interface）有什么异同？</li><li>静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？</li><li>Java中会存在内存泄漏吗，请简单描述。</li><li>抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被<code>synchronized</code>修饰？</li><li>阐述静态变量和实例变量的区别。</li><li>是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？</li><li>如何实现对象克隆？</li><li><code>String s = new String(&quot;xyz&quot;);</code>创建了几个字符串对象？</li><li>接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？</li><li>一个<code>.java</code>源文件中是否可以包含多个类（不是内部类）？有什么限制？</li><li>Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？</li><li>内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？</li><li>Java中的<code>final</code>关键字有哪些用法？</li><li>数据类型之间的转换：</li><li>如何实现字符串的反转及替换？</li><li>怎样将<code>GB2312</code>编码的字符串转换为<code>ISO-8859-1</code>编码的字符串？</li><li>日期和时间：</li><li>打印昨天的当前时刻。</li><li>比较一下Java和JavaSciprt。</li><li>什么时候用断言（assert）？</li><li><code>Error</code>和<code>Exception</code>有什么区别？</li><li><code>try{}</code>里有一个<code>return</code>语句，那么紧跟在这个<code>try</code>后的<code>finally{}</code>里的代码会不会被执行，什么时候被执行，在<code>return</code>前还是后?</li><li>Java语言如何进行异常处理，关键字：<code>throws</code>、<code>throw</code>、<code>try</code>、<code>catch</code>、<code>finally</code>分别如何使用？</li><li>运行时异常与受检异常有何异同？</li><li>列出一些你常见的运行时异常？</li><li>阐述<code>final</code>、<code>finally</code>、<code>finalize</code>的区别。</li><li><code>List</code>、<code>Set</code>、<code>Map</code>是否继承自<code>Collection</code>接口？</li><li>阐述<code>ArrayList</code>、<code>Vector</code>、<code>LinkedList</code>的存储性能和特性。</li><li><code>Collection</code>和<code>Collections</code>的区别？</li><li><code>List</code>、<code>Map</code>、<code>Set</code>三个接口存取元素时，各有什么特点？</li><li><code>TreeMap</code>和<code>TreeSet</code>在排序时如何比较元素？<code>Collections</code>工具类中的<code>sort()</code>方法如何比较元素？</li><li><code>Thread</code>类的<code>sleep()</code>方法和对象的<code>wait()</code>方法都可以让线程暂停执行，它们有什么区别?</li><li>线程的<code>sleep()</code>方法和<code>yield()</code>方法有什么区别？</li><li>当一个线程进入一个对象的<code>synchronized</code>方法A之后，其它线程是否可进入此对象的<code>synchronized</code>方法B？</li><li>请说出与线程同步以及线程调度相关的方法。</li><li>编写多线程程序有几种实现方式？</li><li><code>synchronized</code>关键字的用法？</li><li>举例说明同步和异步。</li><li>启动一个线程是调用<code>run()</code>还是<code>start()</code>方法？</li><li>什么是线程池（thread pool）？</li><li>线程的基本状态以及状态之间的关系？</li><li>简述<code>synchronized</code>和<code>java.util.concurrent.locks.Lock</code>的异同？</li><li>Java中如何实现序列化，有什么意义？</li><li>Java中有几种类型的流？</li><li>写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。</li><li>如何用Java代码列出一个目录下所有的文件？</li><li>用Java的套接字编程实现一个多线程的回显（echo）服务器。</li><li>XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？</li><li>你在项目中哪些地方用到了XML？</li><li>阐述JDBC操作数据库的步骤。</li><li><code>Statement</code>和<code>PreparedStatement</code>有什么区别？哪个性能更好？</li><li>使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？</li><li>在进行数据库编程时，连接池有什么作用？</li><li>什么是DAO模式？</li><li>事务的ACID是指什么？</li><li>JDBC中如何进行事务处理？</li><li>JDBC能否处理Blob和Clob？</li><li>简述正则表达式及其用途。</li><li>Java中是如何支持正则表达式操作的？</li><li>获得一个类的类对象有哪些方式？</li><li>如何通过反射创建对象？</li><li>如何通过反射获取和设置对象私有字段的值？</li><li>如何通过反射调用对象的方法？</li><li>简述一下面向对象的”六原则一法则”。</li><li>简述一下你了解的设计模式。</li><li>用Java写一个单例类。</li><li>什么是UML？</li><li>UML中有哪些常用的图？</li><li>用Java写一个冒泡排序。</li><li>用Java写一个折半查找。</li><li>阐述Servlet和CGI的区别?</li><li>Servlet接口中有哪些方法？</li><li>转发（forward）和重定向（redirect）的区别？</li><li>JSP有哪些内置对象？作用分别是什么？</li><li>get和post请求的区别？</li><li>常用的Web服务器有哪些？</li><li>JSP和Servlet是什么关系？</li><li>讲解JSP中的四种作用域。</li><li>如何实现JSP或Servlet的单线程模式？</li><li>实现会话跟踪的技术有哪些？</li><li>过滤器有哪些作用和用法？</li><li>监听器有哪些作用和用法？</li><li>web.xml文件中可以配置哪些内容？</li><li>你的项目中使用过哪些JSTL标签？</li><li>使用标签库有什么好处？如何自定义JSP标签？</li><li>说一下表达式语言（EL）的隐式对象及其作用。</li><li>表达式语言（EL）支持哪些运算符？</li><li>Servlet3中的异步处理指的是什么？</li><li>如何在基于Java的Web项目中实现文件上传和下载？</li><li>服务器收到用户提交的表单数据，到底是调用Servlet的<code>doGet()</code>还是<code>doPost()</code>方法？</li><li>JSP中的静态包含和动态包含有什么区别？</li><li>Servlet中如何获取用户提交的查询参数或表单数据？</li><li>Servlet中如何获取用户配置的初始化参数以及服务器上下文参数？</li><li>如何设置请求的编码以及响应内容的类型？</li><li>解释一下网络应用的模式及其特点。</li><li>什么是Web Service（Web服务）？</li><li>概念解释：SOAP、WSDL、UDDI。</li><li>Java规范中和Web Service相关的规范有哪些？</li><li>介绍一下你了解的Java领域的Web Service框架。</li><li>什么是ORM？</li><li>持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些？</li><li>Hibernate中<code>SessionFactory</code>是线程安全的吗？<code>Session</code>是线程安全的吗（两个线程能够共享同一个<code>Session</code>吗）？</li><li>Hibernate中<code>Session</code>的<code>load</code>和<code>get</code>方法的区别是什么？</li><li><code>Session</code>的<code>save()</code>、<code>update()</code>、<code>merge()</code>、<code>lock()</code>、<code>saveOrUpdate()</code>和<code>persist()</code>方法分别是做什么的？有什么区别？</li><li>阐述<code>Session</code>加载实体对象的过程。</li><li><code>Query</code>接口的<code>list</code>方法和<code>iterate</code>方法有什么区别？</li><li>Hibernate如何实现分页查询？</li><li>锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。</li><li>阐述实体对象的三种状态以及转换关系。</li><li>如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与<code>Session</code>关闭的矛盾是如何处理的？</li><li>举一个多对多关联的例子，并说明如何实现多对多关联映射。</li><li>谈一下你对继承映射的理解。</li><li>简述Hibernate常见优化策略。</li><li>谈一谈Hibernate的一级缓存、二级缓存和查询缓存。</li><li>Hibernate中<code>DetachedCriteria</code>类是做什么的？</li><li><code>@OneToMany</code>注解的<code>mappedBy</code>属性有什么作用？</li><li>MyBatis中使用<code>#</code>和<code>$</code>书写占位符有什么区别？</li><li>解释一下MyBatis中命名空间（namespace）的作用。</li><li>MyBatis中的动态SQL是什么意思？</li><li>什么是IoC和DI？DI是如何实现的？</li><li>Spring中Bean的作用域有哪些？</li><li>解释一下什么叫AOP（面向切面编程）？</li><li>你是如何理解”横切关注”这个概念的？</li><li>你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？</li><li>Spring中自动装配的方式有哪些？</li><li>Spring中如何使用注解来配置Bean？有哪些相关的注解？</li><li>Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？</li><li>如何在Web项目中配置Spring的IoC容器？</li><li>如何在Web项目中配置Spring MVC？</li><li>Spring MVC的工作原理是怎样的？</li><li>如何在Spring IoC容器中配置数据源？</li><li>如何配置配置事务增强？</li><li>选择使用Spring框架的原因（Spring框架为企业级开发带来的好处有哪些）？</li><li>Spring IoC容器配置Bean的方式？</li><li>阐述Spring框架中Bean的生命周期？</li><li>依赖注入时如何注入集合属性？</li><li>Spring中的自动装配有哪些限制？</li><li>在Web项目中如何获得Spring的IoC容器？</li><li>大型网站在架构上应当考虑哪些问题？</li><li>你用过的网站前端优化的技术有哪些？</li><li>你使用过的应用服务器优化技术有哪些？</li><li>什么是XSS？什么是SQL注入？什么是CSRF？</li><li>什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？</li><li>谈一谈测试驱动开发（TDD）的好处以及你的理解。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论学习</title>
      <link href="/2018/11/01/talking-about-study/"/>
      <url>/2018/11/01/talking-about-study/</url>
      
        <content type="html"><![CDATA[<p>论语中有这样一句著名的评价：“以其好学之心，假之以年，则不日而化矣”。其意思就是说，倘若人能够有一颗好学的心，那么几年以后，这个人不可同日而语，必将取得大的成就。</p><p>“性相近，习相远也”。每一个人生下来是没有什么区别的，而恰恰是后天学习让他们各有所长，从而走上了不同的岗位，走上了不同的领域。学习之重，是孔圣人一直所强调的。学习是一个人由无知走上智慧的唯一之路，要想成大事业，必须具备相关的知识，否则就是白日做梦。孔子说“学而时习之，不亦乐乎？十室之邑，必有忠信如丘者焉，不如丘之好学也”。可见，学习的重要性远远大于了天资等先天条件，勤能补拙，倘若能够早点认识到学习的重要性，那么你就比别人早到终点一步。</p><p>好学首先表现为勤奋，懒惰的人天天口头上吵着要学习，但是却懒于付出行动，丝毫收获不到成果。勤奋的学习理念，端正的学习态度是好学之心不可缺少的两大元素。</p><p>勤奋的人才有可能成功。当有人问鲁迅先生为什么能在文学上取得如此大的成就时，鲁迅先生说：“我没有什么天分，我不过是把别人喝咖啡的时间用来读书、写字罢了”。这就是成功的秘籍。勤奋是大多数平庸的人懒于去做的事情，他们可以找到各种理由来安慰自己，把自己的好学之心扼杀在摇篮中：今天周末，怎么能学习呢，这么好的天气应该去公园中打牌；算了，今天太累了，看书的计划取消吧，改日再看；这书有什么好看的，看了以后也会忘，不如不看，出去玩会……长期以往，你便失去了学习的习惯，好学对于你而言就成了神话。</p><p>无论对于个人和集体，学习都是不可少的一个环节。没有好学之心，个人不能进步；没有好学的氛围，集体的发展也停滞不前。</p><a id="more"></a><p>一分耕耘，一份收获。好学的心能够让我们每天收获一点点，如果天天进步，我们数日以后或许就能达到“不可同日而语”的境界。我们或许不是天才，或许没有天赋，可是勤奋好学同样可以助我们登上成功的高峰。即使一个天才，倘若不学无术，不求进取，恐怕也难成一果。天才都是从勤奋走来的，好学的心不过是把他天才的一面展示出来。所以说，不管你本质如何，天资聪明或者笨拙，你都需要有好学的心态。好学的心能把矿石锻炼成金子，能把任何一个人都培养成一个天才。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>服务说明文件</title>
      <link href="/2018/10/30/about-service/"/>
      <url>/2018/10/30/about-service/</url>
      
        <content type="html"><![CDATA[<p>对于每一个服务而言，都应有一个清晰的服务说明，描述当前服务的信息，同时帮助团队更快地理解并快速上手。譬如，在笔者的微服务实践过程中，对于每一个代码库，其服务说明都包括如下几个部分。</p><h2 id="服务介绍"><a href="#服务介绍" class="headerlink" title="服务介绍"></a>服务介绍</h2><ul><li>服务提供什么功能，譬如产品服务主要提供产品数据的获取或者存储。</li><li>谁是服务的消费者。譬如产品服务的消费者为电商的前端网站系统或者CRM系统。</li></ul><h2 id="服务维护者"><a href="#服务维护者" class="headerlink" title="服务维护者"></a>服务维护者</h2><ul><li>挑选1~2个团队的成员，作为服务的负责人，登记其姓名、电子邮件、电话等联系方式，以便其他团队遇到问题能及时找到服务的负责人。</li></ul><h2 id="服务可用期"><a href="#服务可用期" class="headerlink" title="服务可用期"></a>服务可用期</h2><ul><li>服务可用周期，如7×24小时，或周一~周五（7:00~19:00）等。</li><li>可用率，可用率是指服务可以正常访问的时间占总时间的百分比，如99.9%或者99%。如果服务一天内都可以访问，则服务当天的可用率为100%。如果服务有3分钟访问中断，而一天共有1440分钟，那么服务的可用率为： ((1440 - 3) / 1440) * 100%，也就是99.79%。</li><li>响应时间，指服务返回数据的可接受响应时间。譬如为0.5~1秒。</li></ul><a id="more"></a><h2 id="定义环境"><a href="#定义环境" class="headerlink" title="定义环境"></a>定义环境</h2><ul><li>生产环境</li><li>类生产环境</li><li>测试环境</li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul><li>如何搭建开发环境</li><li>如何运行服务</li><li>如何定位问题</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>测试策略</li><li>如何运行测试</li><li>如何查看测试的统计结果，譬如测试覆盖率、运行时间、性能等。</li></ul><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><ul><li>持续集成访问的URL</li><li>持续集成的流程描述</li><li>构建后的部署包</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li>如何部署到不同环境</li><li>部署后的功能验证</li></ul><h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><ul><li>日志聚合的访问</li><li>告警信息的访问</li><li>监控信息的访问</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第三方账号登陆还是自主账号登录</title>
      <link href="/2018/10/30/login-with-third-account/"/>
      <url>/2018/10/30/login-with-third-account/</url>
      
        <content type="html"><![CDATA[<p>先来看一下自主账号体系与第三方账号登录体系的利弊（注：文中的“第三方”指微博、QQ、人人等平台）：</p><ul><li><p><strong>对用户</strong></p><p>  对用户而言，第三方账号登录带来最大的好处就是方便。  一方面可以省去一个注册流程，另一方面也不用费心去记各种账号密码，可以用微博等账号一号走遍天下。  另外通过微博、QQ等平台可以更容易地对好友进行分享并与好友实现互动。  这些好处让许多比较“懒”的用户会更倾向于用第三方账号体系登录。</p><p>  而第三方账号登录带来的一个巨大问题就是隐私安全问题。  虽然现在第三方账号登录普遍使用OAuth技术，可以让你无需将微博等第三方平台的用户名和密码提供给应用，  在一定程度上保证了用户名与密码的安全。  但通过授权该应用却可以访问用户的很多资源，比如评论、好友、生日等信息，  而且许多在授权时都是默认选项，用户非常容易因此就泄露了自己的信息。  许多应用在授权时还会默认在微博等第三方平台同步状态，这等于将你用了什么应用，  在应用里做了什么都公诸于众，让用户感觉毫无隐私可言（比如用了某款婚恋应用你却不想让人知道）。  所以对个人信息敏感的用户可能就不会选择用第三方账号登陆体系。</p></li><li><p><strong>对开发者</strong></p><p>  对开发者而言，第三方账号登陆的好处主要是有三点，一点是提升了用户的注册转化率，  降低了进入的门槛。另一点就是可以利用微博、人人等平台的资源，提高自己的知名度。  还有就是可以省去自主登陆体系的开发工作。提升用户注册转化率是因为给了用户更方便的路径，  减少了因嫌注册麻烦而流失的用户；连接了微博等第三方平台，  可以通过信息在该平台的同步提升自己产品的曝光率，同时可以通过授权获得用户的粉丝、好友，并进行针对性的营销。</p><p>  而对开发者不好的地方就是如果没有较多的授权，无法掌握用户的全部信息。  从某种角度而言用户还是在微博、人人等平台下，自己没有累计下用户的沉淀，  虽说开放是现在的主旋律，但总还是受制于各大平台，万一哪天开放的策略有变或平台以用户相要挟，开发者也没有什么太好的反击办法。</p></li></ul><a id="more"></a><p>利弊就如上面所言。现在有人认为可以完全放弃自主登录系统，仅用第三方账号登陆，理由是第三方账号已经十分普及，通过第三方账号登陆可以提高用户注册率，而且平台开放程度较高同时资源丰富，做自己的登录体系费时费力没必要。也有人认为还是应该自主登录与第三方登录共存以满足不同用户的需求。那么自主登录体系是否还有存在的必要呢？</p><p>我认为这个还是要根据你应用或网站的定位、功能来决定。如果你的应用重分享、重评论、重社交，并不定位于做行业的标杆，是比较轻量级的应用，那么你可以选择放弃自主账号体系，让用户无需纠结于是用第三方账号还是重新注册一个账号，让注册流程更加简洁，用户目标更加明确（如啪啪、Instagram、你画我猜等）。 而如果你的应用是重内容、轻社交，独立性较强，有可能形成一个社区或闭环，可以经过时间培养起一批有自己风格的用户，有自己的用户文化，那么还是应该保留有自己的登录体系，一来可能适应更多用户的需求，二来也容易让用户产生一种归属感。如果有信心的话甚至可以放弃第三方登录，让用户对你的产品有着更深的需求与认知，这样慢慢发展也许你也会成为另一个第三方平台，不过这毕竟是少数。另外移动端跟PC端注册的成本也不同，在移动端输入更少的应用也许让用户会更舒服一些，这也是要考虑到的。</p><p>我咨询了周围的一些朋友，看看他们平时是用第三方登录体系还是应用的自主登录体系，下面是几个发现：</p><ol><li>女性朋友为了方便更喜欢用第三方等账号登陆，而男性朋友则对隐私有着更多一些的关注，有些更倾向于自主账号登陆；</li><li>如果应用正规、名气大、口碑良好，则对隐私泄露的担忧会下降；</li><li>如果发现应用会自动在第三方平台更新用户动态，则对该应用好感度明显下降；</li><li>如果第三方登录会带来明显好处（如一些社交类游戏就是为了与好友一起玩），则更倾向于使用第三方登录。</li></ol><p>我咨询的朋友不多，而且用户模型也较为相似，所以不具有很强的代表性，不过从中也能学到一些东西，如在授权第三方时默认授权不要过多，要尊重用户，要让自己的产品更加专业与正规，给用户留下正面的印象等。</p><p>总结一下就是自主登录体系与第三方登录体系均有利弊，在要结合自己产品的形态、定位、风格以及愿景来进行选择，无论何种选择，永远要做到尊重用户。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python获取本机ip</title>
      <link href="/2018/10/27/python-get-ip/"/>
      <url>/2018/10/27/python-get-ip/</url>
      
        <content type="html"><![CDATA[<p>本方法采用UDP协议实现，先生成一个UDP包，将自己的ip地址放到UDP的协议头中，然后从UDP包中获取ip地址。</p><p>这个方法并不会发送数据，但是会申请一个UDP端口，经常调用会比较耗时。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_host_ip</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        s.connect((<span class="string">'8.8.8.8'</span>, <span class="number">80</span>))</span><br><span class="line">        ip = s.getsockname()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        s.close()</span><br><span class="line">    <span class="keyword">return</span> ip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装最新版git</title>
      <link href="/2018/10/26/centos-git/"/>
      <url>/2018/10/26/centos-git/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">GIT_VERSION=2.19.1</span><br><span class="line"></span><br><span class="line">yum groupinstall -y <span class="string">"Development Tools"</span></span><br><span class="line">yum install -y libcurl-devel zlib-devel</span><br><span class="line"></span><br><span class="line">curl -O https://mirrors.edge.kernel.org/pub/software/scm/git/git-<span class="variable">$GIT_VERSION</span>.tar.gz</span><br><span class="line">tar xvf git-<span class="variable">$GIT_VERSION</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> git-<span class="variable">$GIT_VERSION</span></span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS开启路由转发功能</title>
      <link href="/2018/10/26/osx-forwarding/"/>
      <url>/2018/10/26/osx-forwarding/</url>
      
        <content type="html"><![CDATA[<p>执行下面命令即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w net.inet.ip.forwarding=1</span><br></pre></td></tr></table></figure><p>这种做法将在机器下次重启后失效，如果想要永久保存，编辑文件<code>/etc/sysctl.conf</code>，配置下面变量：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net.inet.ip.forwarding</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> osx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip命令分卷压缩</title>
      <link href="/2018/10/25/zip/"/>
      <url>/2018/10/25/zip/</url>
      
        <content type="html"><![CDATA[<h2 id="创建分卷压缩文件"><a href="#创建分卷压缩文件" class="headerlink" title="创建分卷压缩文件"></a>创建分卷压缩文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -s 100m -r file.zip foo/</span><br></pre></td></tr></table></figure><ul><li><code>-s</code>: 创建分卷的大小</li><li><code>-r</code>: 循环压缩文件夹下面的内容</li></ul><p>切分已有的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip existing.zip --out new.zip -s 50m</span><br></pre></td></tr></table></figure><p>执行完之后会创建下面一系列文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new.zip</span><br><span class="line">new.z01</span><br><span class="line">new.z02</span><br><span class="line">new.z03</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="解压分卷文件"><a href="#解压分卷文件" class="headerlink" title="解压分卷文件"></a>解压分卷文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将分卷文件合并成一个单独的文件</span></span><br><span class="line">zip -s 0 split.zip --out single.zip</span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">unzip single.zip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高可扩展架构原则</title>
      <link href="/2018/10/25/principle-of-highly-scalable-architecture/"/>
      <url>/2018/10/25/principle-of-highly-scalable-architecture/</url>
      
        <content type="html"><![CDATA[<p><strong>四个维度</strong></p><ul><li><p><strong>性能可扩展</strong>：性能无法完全实现线性扩展，但要尽量使用具有并发性和异步性的组件。具备完成通知功能的工作队列要优于同步连接到数据库。</p></li><li><p><strong>可用性可扩展</strong>：CAP理论表明，分布式系统无法同时提供一致性、可用性和分区容错性保证。许多大规模Web应用程序都为了可用性和分区容错性而牺牲了强一致性，而后者则有赖于最终一致性来保证。</p></li><li><p><strong>维护可扩展</strong>：软件和服务器都需要维护。在使用平台&amp;工具监控和更新应用程序时，要尽可能地自动化。</p></li><li><p><strong>成本可扩展</strong>：总拥有成本包括开发、维护和运营支出。在设计一个系统时，要在重用现有组件和完全新开发组件之间进行权衡。现有组件很少能完全满足需求，但修改现有组件的成本还是可能低于开发一个完全不同的方案。另外，使用符合行业标准的技术使组织更容易聘到专家，而发布独有的开源方案则可能帮助组织从社区中挖掘人才。</p></li></ul><a id="more"></a><p><strong>10个原则</strong></p><p>以上各项，在设计应用程序时都会考虑和权衡，根据上述内容总结出的10个设计原则：</p><ol><li><p>避免单点故障：任何东西都要有两个。这增加了成本和复杂度，但却能在可用性和负载性能上获益。而且，这有助于设计者采用一种分布式优先的思维。</p></li><li><p>横向扩展，而不是纵向扩展：升级服务器（纵向）的成本是指数增长的，而增加另一台商用服务器（横向）的成本是线性增长的。</p></li><li><p>尽量减少应用程序核心所需要完成的工作。</p></li><li><p>API优先：将应用程序视为一个提供API的服务，而且，不假定服务的客户端类型（手机应用、Web站点、桌面应用程序）。</p></li><li><p>优先使用缓存。</p></li><li><p>提供尽可能新的数据：用户可能不需要立即看到最新的数据，最终一致性可以带来更高的可用性。</p></li><li><p>设计时要考虑维护和自动化：不要低估应用程序维护所需要的时间和工作量。软件首次公开发布是一个值得称赞的里程碑，但也标志着真正的工作要开始了。</p></li><li><p>宁异步，不同步。</p></li><li><p>努力实现无状态：状态信息要保存在尽可能少的地方，而且要保存在专门设计的组件中。</p></li><li><p>为故障做好准备：将故障对终端用户的影响最小化。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大规模弹性平台架构设计</title>
      <link href="/2018/10/25/large-scale-architecture-design/"/>
      <url>/2018/10/25/large-scale-architecture-design/</url>
      
        <content type="html"><![CDATA[<p>我们为了保证系统的高可用性，如果按着每天访问的峰值作为标准来设计系统，绝大数情况下访问量较低时，无论是硬件资源还是网络带宽等资源都会造成巨大的浪费。那么如何从技术上解决这个问题呢？答案是大规模弹性架构设计。</p><p>大规模弹性架构的主要设计目标是系统的高可用性和高扩展性：根据系统的实际需要，系统自动弹性分配资源。在需求量大，比如峰值的时候，系统自动调配足够的资源；在访问量小，系统自动释放出部分的资源，从而实现资源的按需分配。</p><p>那么大规模弹性架构的基本工作原理是什么？其主要是利用高性能虚拟化技术，实现了计算、存储和网络资源的统一调度和弹性分配。</p><ol><li><p><strong>实现动态部署</strong>。为了应对突发峰值访问量或者可能的网络攻击，需要在应用服务器内部部署一些监控程序，由主控程序判断当前整个集群的负载情况，自动增加或者减少服务节点，并且自动部署应用程序，从而从容应对突增的业务流量。</p></li><li><p><strong>实现故障自动恢复</strong>。当一台物理机损坏时，系统需要自动监测到硬件故障，并且在第一时间内，把云服务器迁移到新的宿主机上，同时硬盘数据需要保持最后一刻的状态。数据安全是第一位，因为数据始终面临误删文件、病毒破坏、程序写错、硬件损坏等种种可能的风险。在弹性计算平台上，需要利用快照功能自动完成数据的备份。</p></li></ol><a id="more"></a><p>最后，简单聊聊大规模弹性平台架构设计变化的趋势。</p><blockquote><p><strong>第一</strong>，弹性平台架构平台的设计将会愈发智能。系统将会自动收集愈来愈多的用户访问数据，跟据历史访问规律，自动地预测系统峰值的变化趋势，峰值的预估将愈加精准。简单设想一下，如果系统已有的全部资源都不能满足峰值的需求，弹性设计已经没有意义了，这时候需要提前做准预估，并采取相应的措施，并假设如果超过峰值，如何应对。</p></blockquote><blockquote><p><strong>第二</strong>，以容器技术为代表的轻虚拟化技术的迅猛发展，已经促进了大规模弹性平台架构设计的进步。</p></blockquote><blockquote><p><strong>第三</strong>，弹性计算平台将需要考虑更加安全的容灾方案。目前常见的单个物理位置的系统，始终会面临诸如地震、火灾等不可抗力的威胁，所以需要有更加安全的容灾方案。比如常见的有跨机房异地容灾。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Auth</title>
      <link href="/2018/10/23/basic-auth/"/>
      <url>/2018/10/23/basic-auth/</url>
      
        <content type="html"><![CDATA[<p>Basic认证是HTTP中非常简单的认证方式，因为简单，所以不是很安全，不过仍然非常常用。</p><p>当一个客户端向一个需要认证的HTTP服务器进行数据请求时，如果之前没有认证过，HTTP服务器会返回401状态码，要求客户端输入用户名和密码。用户输入用户名和密码后，用户名和密码会经过BASE64加密附加到请求信息中再次请求HTTP服务器，HTTP服务器会根据请求头携带的认证信息，决定是否认证成功及做出相应的响应。</p><p>Basic认证要求在请求时在请求头中添加<code>Authorization: Basic Base64编码串</code>，<code>Base64编码串</code>生成规则是<code>user:password</code>做Base64编码。</p><p>curl使用<code>-u, --user &lt;user:password&gt;</code>设置Basic认证。</p><p>详见：<a href="https://tools.ietf.org/html/rfc2617" target="_blank" rel="noopener">HTTP Authentication: Basic and Digest Access Authentication</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CURL命令</title>
      <link href="/2018/10/22/shell-curl/"/>
      <url>/2018/10/22/shell-curl/</url>
      
        <content type="html"><![CDATA[<p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。</p><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><table><thead><tr><th>options</th><th>description</th></tr></thead><tbody><tr><td>-d/–data &lt;data&gt;</td><td>传送数据</td></tr><tr><td>-H/–header &lt;line&gt;</td><td>自定义头信息传递给服务器</td></tr><tr><td>-i/–include</td><td>输出时包括protocol头信息</td></tr><tr><td>-I/–head</td><td>只显示请求头信息</td></tr><tr><td>-o/–output</td><td>把输出写到该文件中</td></tr><tr><td>-O/–remote-name</td><td>把输出写到该文件中，保留远程文件的文件名</td></tr><tr><td>–progress</td><td>显示进度条</td></tr><tr><td>-s/–silent</td><td>静默模式，不输出任何东西</td></tr><tr><td>-w/–write-out [format]</td><td>什么输出完成后</td></tr><tr><td>-X/–request &lt;command&gt;</td><td>指定什么命令</td></tr></tbody></table><a id="more"></a><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用<code>--silent</code>选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl URL --silent</span><br><span class="line"><span class="comment"># 将文件写入test.io文件，使用静默模式</span></span><br><span class="line">curl http://man.linuxde.net/text.iso --silent -O</span><br><span class="line"><span class="comment"># 将文件写入filename.io文件，显示进度条</span></span><br><span class="line">curl http://man.linuxde.net/test.iso -o filename.iso --progress</span><br></pre></td></tr></table></figure><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出响应同时显示响应头</span></span><br><span class="line">curl -i URL</span><br><span class="line"><span class="comment"># 只显示响应头信息</span></span><br><span class="line">curl -I URL</span><br></pre></td></tr></table></figure><h2 id="其他HTTP请求"><a href="#其他HTTP请求" class="headerlink" title="其他HTTP请求"></a>其他HTTP请求</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用POST请求</span></span><br><span class="line">curl -X POST URL</span><br><span class="line"><span class="comment"># 使用POST请求并传输数据</span></span><br><span class="line">curl -X POST -d data URL</span><br></pre></td></tr></table></figure><h2 id="常用别名"><a href="#常用别名" class="headerlink" title="常用别名"></a>常用别名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> curli=<span class="string">'curl -i'</span></span><br><span class="line"><span class="built_in">alias</span> curlI=<span class="string">'curl -I'</span></span><br><span class="line"><span class="built_in">alias</span> curlw=<span class="string">'curl -i -w "\n\n----------------\ntime_connect: %&#123;time_connect&#125;\ntime_starttransfer: %&#123;time_starttransfer&#125;\ntime_total: %&#123;time_total&#125;\n"'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Python中使用SQLite</title>
      <link href="/2018/10/21/python-sqlite/"/>
      <url>/2018/10/21/python-sqlite/</url>
      
        <content type="html"><![CDATA[<h2 id="SQLite简介"><a href="#SQLite简介" class="headerlink" title="SQLite简介"></a>SQLite简介</h2><p><a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a>是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的SQL数据库引擎。<a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite</a>是在世界上最广泛部署的SQL数据库引擎。</p><p>SQLite优点：</p><ul><li>不需要一个单独的服务器进程或操作的系统（无服务器的）。</li><li>SQLite不需要配置，这意味着不需要安装或管理。</li><li>一个完整的SQLite数据库是存储在一个单一的跨平台的磁盘文件。</li><li>SQLite是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。</li><li>SQLite是自给自足的，这意味着不需要任何外部的依赖。</li><li>SQLite事务是完全兼容ACID的，允许从多个进程或线程安全访问。</li><li>SQLite支持SQL92（SQL2）标准的大多数查询语言的功能。</li><li>SQLite使用ANSI-C编写的，并提供了简单和易于使用的 API。</li><li>SQLite可在UNIX（Linux, Mac OS-X, Android, iOS）和Windows（Win32, WinCE, WinRT）中运行。</li></ul><a id="more"></a><h2 id="Python-SQLite"><a href="#Python-SQLite" class="headerlink" title="Python - SQLite"></a>Python - SQLite</h2><p><a href="https://sqlite.org/" target="_blank" rel="noopener">SQLite3</a>可使用<a href="https://docs.python.org/3/library/sqlite3.html" target="_blank" rel="noopener">sqlite3</a>模块与Python进行集成，Python2.5.x以上版本默认自带了该模块。</p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>使用下面代码连接数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br></pre></td></tr></table></figure><p>上面代码表示连接一个<code>test.db</code>（在当前目录下）的数据库，如果不存在，则创建。数据库名也可以使用特殊的名字<strong><code>:memory:</code></strong>，它表示数据库只在内存中创建。</p><h3 id="CREATE-TABLE"><a href="#CREATE-TABLE" class="headerlink" title="CREATE TABLE"></a>CREATE TABLE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line">sql = <span class="string">'''CREATE TABLE COMPANY (</span></span><br><span class="line"><span class="string">    ID INT PRIMARY KEY     NOT NULL,</span></span><br><span class="line"><span class="string">    NAME           TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">    AGE            INT     NOT NULL,</span></span><br><span class="line"><span class="string">    ADDRESS        CHAR(50),</span></span><br><span class="line"><span class="string">    SALARY         REAL</span></span><br><span class="line"><span class="string">);'''</span></span><br><span class="line">c.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"></span><br><span class="line">c.execute(<span class="string">"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, 'Paul', 32, 'California', 20000.00);"</span>)</span><br><span class="line">c.execute(<span class="string">"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (2, 'Allen', 25, 'Texas', 15000.00);"</span>)</span><br><span class="line">c.execute(<span class="string">"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (3, 'Teddy', 23, 'Norway', 20000.00);"</span>)</span><br><span class="line">c.execute(<span class="string">"INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00);"</span>)</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"></span><br><span class="line">cursor = c.execute(<span class="string">"SELECT ID, NAME, ADDRESS, SALARY FROM COMPANY;"</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    print(&#123;</span><br><span class="line">        <span class="string">'ID'</span>: row[<span class="number">0</span>],</span><br><span class="line">        <span class="string">'NAME'</span>: row[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'ADDRESS'</span>: row[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'SALARY'</span>: row[<span class="number">3</span>],</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"></span><br><span class="line">cursor = c.execute(<span class="string">"UPDATE COMPANY SET SALARY=25000.00 WHERE ID=1;"</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cursor = c.execute(<span class="string">"SELECT ID, NAME, ADDRESS, SALARY FROM COMPANY;"</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    print(&#123;</span><br><span class="line">        <span class="string">'ID'</span>: row[<span class="number">0</span>],</span><br><span class="line">        <span class="string">'NAME'</span>: row[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'ADDRESS'</span>: row[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'SALARY'</span>: row[<span class="number">3</span>],</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"></span><br><span class="line">cursor = c.execute(<span class="string">"DELETE FROM COMPANY WHERE ID=2;"</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cursor = c.execute(<span class="string">"SELECT ID, NAME, ADDRESS, SALARY FROM COMPANY;"</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor:</span><br><span class="line">    print(&#123;</span><br><span class="line">        <span class="string">'ID'</span>: row[<span class="number">0</span>],</span><br><span class="line">        <span class="string">'NAME'</span>: row[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'ADDRESS'</span>: row[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'SALARY'</span>: row[<span class="number">3</span>],</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署thinkphp项目</title>
      <link href="/2018/10/19/docker-thinkphp/"/>
      <url>/2018/10/19/docker-thinkphp/</url>
      
        <content type="html"><![CDATA[<p>使用Docker部署thinkphp，需要注意几件事：</p><ol><li>thinkphp的入口文件在public目录下，所以需要将<code>VirtualHost</code>的<code>DocumentRoot</code>指向public目录；</li><li>thinkphp需要设置伪静态，Apache需要加载<code>mod_rewrite.so</code>模块；</li><li>下载相应版本的thinkphp放到项目根目录下。</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> THINKPHP_VERSION=<span class="number">5.0</span>.<span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">'s/AllowOverride None/AllowOverride All/g'</span> /etc/apache2/apache2.conf \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">'s/\/var\/www\/html/\/var\/www\/html\/public/g'</span> /etc/apache2/sites-enabled/000-default.conf</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://github.com/top-think/framework/archive/v<span class="variable">$THINKPHP_VERSION</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar xvf v<span class="variable">$THINKPHP_VERSION</span>.tar.gz &amp;&amp; mv framework-<span class="variable">$THINKPHP_VERSION</span> thinkphp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /var/www/html/</span></span><br></pre></td></tr></table></figure><p>如果在项目中用到了扩展，使用<code>docker-php-ext-install</code>命令安装相应的扩展：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装postgresql扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y libpq-dev \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-configure pgsql -with-pgsql=/usr/<span class="built_in">local</span>/pgsql \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-install pdo pdo_pgsql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装mysql扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> docker-php-ext-install pdo pdo_mysql</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> php </tag>
            
            <tag> thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git简明教程</title>
      <link href="/2018/10/12/git-tutorial/"/>
      <url>/2018/10/12/git-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h3 id="git-help"><a href="#git-help" class="headerlink" title="git help"></a>git help</h3><p>Git帮助命令，用来查看Git帮助，直接使用<code>git help</code>可以查看git所有相关的子命令，使用<code>git help &lt;subcommand&gt;</code>可以查看对应子命令的详细内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span>        <span class="comment"># 查看git帮助</span></span><br><span class="line">git <span class="built_in">help</span> init   <span class="comment"># 查看git初始化命令帮助</span></span><br><span class="line">git <span class="built_in">help</span> commit <span class="comment"># 查看git代码提交帮助</span></span><br></pre></td></tr></table></figure><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>Git初始化命令，直接在一个空目录下执行命令<code>git init</code>即可，当然，也可以在一个不是git项目的目录下执行。</p><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><p>Git配置命令，用来配置一些git常用的配置参数，例如用户名等。</p><p>git配置一般分为两种，一种是当前项目的配置，一种是全局的配置。如果两个位置都有同一个配置，当前项目的配置覆盖全局的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config user.name                <span class="comment"># 查看用户名设置</span></span><br><span class="line">git config user.name &lt;your_name&gt;    <span class="comment"># 设置用户名</span></span><br><span class="line">git config --global core.editor vim <span class="comment"># 全局设置git命令编辑器为vim</span></span><br><span class="line">git config credential.helper cache  <span class="comment"># 将账号密码缓存15分钟</span></span><br><span class="line">git config credential.helper store  <span class="comment"># 将账号密码永久缓存</span></span><br></pre></td></tr></table></figure><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>将待提交的文件缓存到暂存区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;  <span class="comment"># 将文件filename提交到暂存区</span></span><br><span class="line">git add &lt;folder&gt;    <span class="comment"># 将目录folder下的改动过的文件都提交到暂存区</span></span><br><span class="line">git add .           <span class="comment"># 将项目所有改动的文件提交到暂存区</span></span><br></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>将暂存区中的文件提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">'&lt;reason&gt;'</span>    <span class="comment"># 提交，并解释提交的理由</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>查看当前项目的状态，一般会有4中状态，新建状态、更新状态、已缓存状态、冲突状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>查看代码的差别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff    <span class="comment"># 查看当前代码与最后一次提交的代码的差别</span></span><br><span class="line">git diff branch1 branch2    <span class="comment"># 查看branch1分支与branch2分支的差别</span></span><br></pre></td></tr></table></figure><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>查看项目提交的历史记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> -5  <span class="comment"># 查看最近5次提交，也可以改成其他数字</span></span><br></pre></td></tr></table></figure><h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><p>Git标签命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag         <span class="comment"># 列出已有的标签</span></span><br><span class="line">git tag &lt;tagname&gt;       <span class="comment"># 新建普通标签</span></span><br><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">'tagmsg'</span>    <span class="comment"># 新建一个带tagmsg消息的tagname标签</span></span><br></pre></td></tr></table></figure><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>Git克隆代码，将远程服务器上的代码克隆到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xxx/project.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/xxx/project.git local_project  <span class="comment"># 将远程服务器上的project项目克隆到本地，并改名local_project</span></span><br></pre></td></tr></table></figure><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>当远程服务器上的代码比本地代码新时，可以使用<code>git pull</code>将远程服务器上的代码更新到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>当需要将本地已提交的代码提交到远程服务器上时，可以使用<code>git push</code>命令将本地代码提交到远程服务器上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>Git合并代码命令。</p><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p>Git分支命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch      <span class="comment"># 列出当前已有的分支</span></span><br><span class="line">git branch &lt;branch_name&gt;    <span class="comment"># 新建一个分支</span></span><br></pre></td></tr></table></figure><h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><p><code>git stash</code>命令可以将当前未提交的代码保存起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash       <span class="comment"># 将未提交的代码保存起来</span></span><br><span class="line">git stash pop   <span class="comment"># 将最后一次保存的代码pop出来</span></span><br><span class="line">git stash list  <span class="comment"># 查看所有保存的记录</span></span><br><span class="line">git stash drop &lt;stash&gt;  <span class="comment"># 删除某个保存</span></span><br><span class="line">git stash clear <span class="comment"># 清除所有保存</span></span><br></pre></td></tr></table></figure><h2 id="Git其他命令"><a href="#Git其他命令" class="headerlink" title="Git其他命令"></a>Git其他命令</h2><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><h3 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h3><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><h3 id="git-grep"><a href="#git-grep" class="headerlink" title="git grep"></a>git grep</h3><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS下brew安装软件后的位置</title>
      <link href="/2018/10/07/osx-brew/"/>
      <url>/2018/10/07/osx-brew/</url>
      
        <content type="html"><![CDATA[<p>brew安装完软件之后：</p><ul><li>配置文件位置在<code>/usr/local/etc</code>目录下</li><li>安装文件在<code>/usr/local/Cellar</code>目录下</li><li>可执行二进制文件在<code>/usr/local/bin</code>目录下</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> osx </tag>
            
            <tag> brew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moodle：使用GIFT格式导入试题</title>
      <link href="/2018/10/06/moodle-gift-format/"/>
      <url>/2018/10/06/moodle-gift-format/</url>
      
        <content type="html"><![CDATA[<p>GIFT格式是一种编写可导入试题的格式，它可用来编写选择题、判断题、简答题、填空题以及数字题。GIFT格式可是题库可导出格式的一种。这种格式是<a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>社区内开发的，其他软件或多或少支持它。</p><h2 id="格式符号"><a href="#格式符号" class="headerlink" title="格式符号"></a>格式符号</h2><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>// text</code></td><td>Comment until end of line (optional)</td></tr><tr><td><code>::title::</code></td><td>Question title (optional)</td></tr><tr><td><code>text</code></td><td>Question text (becomes title if no title specified)</td></tr><tr><td><code>[...format...]</code></td><td>The format of the following bit of text. Options are <code>[html]</code>, <code>[moodle]</code>, <code>[plain]</code> and <code>[markdown]</code>. The default is <code>[moodle]</code> for the question text, other parts of the question default to the format used for the question text.</td></tr><tr><td><code>{</code></td><td>Start answer(s) – without any answers, text is a description of following questions</td></tr><tr><td><code>{T}</code> or <code>{F}</code></td><td>True or False answer; also <code>{TRUE}</code> and <code>{FALSE}</code></td></tr><tr><td><code>{ ... =right ... }</code></td><td>Correct answer for multiple choice, (multiple answer? – see page comments) or fill-in-the-blank</td></tr><tr><td><code>{ ... ~wrong ... }</code></td><td>Incorrect answer for multiple choice or multiple answer</td></tr><tr><td><code>{ ... =item -&gt; match ... }</code></td><td>Answer for matching questions</td></tr><tr><td><code>#feedback text</code></td><td>Answer feedback for preceding multiple, fill-in-the-blank, or numeric answers</td></tr><tr><td><code>####general feedback</code></td><td>General feedback</td></tr><tr><td><code>&#123;&#35;</code></td><td>Start numeric answer(s)</td></tr><tr><td><code>answer:tolerance</code></td><td>Numeric answer accepted within ± tolerance range</td></tr><tr><td><code>low..high</code></td><td>Lower and upper range values of accepted numeric answer</td></tr><tr><td><code>=%n%answer:tolerance</code></td><td>n percent credit for one of multiple numeric ranges within tolerance from answer</td></tr><tr><td><code>}</code></td><td>End answer(s)</td></tr><tr><td><code>\character</code></td><td>Backslash escapes the special meaning of <code>~</code>, <code>=</code>, <code>#</code>, <code>{</code>, <code>}</code>, and <code>:</code></td></tr><tr><td><code>\n</code></td><td>Places a newline in question text – blank lines delimit questions</td></tr></tbody></table><a id="more"></a><h2 id="问题格式示例"><a href="#问题格式示例" class="headerlink" title="问题格式示例"></a>问题格式示例</h2><h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><p>选择题分为单选题和多选题。</p><h4 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h4><p>简单的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Who&apos;s buried in Grant&apos;s tomb? &#123;=Grant ~no one ~Napoleon ~Churchill ~Mother Teresa &#125;</span><br><span class="line"></span><br><span class="line">Moodle costs &#123;~lots of money =nothing ~a small amount&#125; to download from moodle.org.</span><br><span class="line"></span><br><span class="line">// question: 1 name: Grants tomb</span><br><span class="line">::Grants tomb::Who is buried in Grant&apos;s tomb in New York City? &#123;</span><br><span class="line">    =Grant</span><br><span class="line">    ~No one</span><br><span class="line">    #Was true for 12 years, but Grant&apos;s remains were buried in the tomb in 1897</span><br><span class="line">    ~Napoleon</span><br><span class="line">    #He was buried in France</span><br><span class="line">    ~Churchill</span><br><span class="line">    #He was buried in England</span><br><span class="line">    ~Mother Teresa</span><br><span class="line">    #She was buried in India</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mahatma Gandhi&apos;s birthday is an Indian holiday on &#123;</span><br><span class="line">    ~15th</span><br><span class="line">    ~3rd</span><br><span class="line">    =2nd</span><br><span class="line">&#125; of October.</span><br><span class="line"></span><br><span class="line">Since &#123;</span><br><span class="line">    ~495 AD</span><br><span class="line">    =1066 AD</span><br><span class="line">    ~1215 AD</span><br><span class="line">    ~ 43 AD</span><br><span class="line">&#125; the town of Hastings England has been &quot;famous with visitors&quot;.</span><br></pre></td></tr></table></figure><h4 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">What two people are entombed in Grant&apos;s tomb? &#123;</span><br><span class="line">    ~%-100%No one</span><br><span class="line">    ~%50%Grant</span><br><span class="line">    ~%50%Grant&apos;s wife</span><br><span class="line">    ~%-100%Grant&apos;s father</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// question: 0 name: TrueStatement using &#123;T&#125; style</span><br><span class="line">::TrueStatement about Grant::Grant was buried in a tomb in New York City.&#123;T&#125;</span><br><span class="line"></span><br><span class="line">// question: 0 name: FalseStatement using &#123;FALSE&#125; style</span><br><span class="line">::FalseStatement about sun::The sun rises in the West.&#123;FALSE&#125;</span><br></pre></td></tr></table></figure><h3 id="匹配题"><a href="#匹配题" class="headerlink" title="匹配题"></a>匹配题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Match the following countries with their corresponding capitals. &#123;</span><br><span class="line">    =Canada -&gt; Ottawa</span><br><span class="line">    =Italy  -&gt; Rome</span><br><span class="line">    =Japan  -&gt; Tokyo</span><br><span class="line">    =India  -&gt; New Delhi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h3><p>填空题答案都是以<code>=</code>号开头，不能使用<code>~</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Who&apos;s buried in Grant&apos;s tomb? &#123;=Grant =Ulysses S. Grant =Ulysses Grant&#125;</span><br><span class="line"></span><br><span class="line">Two plus two equals &#123;=four =4&#125;</span><br><span class="line"></span><br><span class="line">Moodle costs &#123;=nothing&#125; to download from moodle.org.</span><br></pre></td></tr></table></figure><p>如果只有一个正确的答案，可以不写<code>=</code>，只要它不被误识别为判断题即可。</p><h3 id="数字题"><a href="#数字题" class="headerlink" title="数字题"></a>数字题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// It will accept a range of 5 years.</span><br><span class="line">When was Ulysses S. Grant born?&#123;#1822:5&#125;</span><br><span class="line"></span><br><span class="line">What is the value of pi (to 3 decimal places)? &#123;#3.141..3.142&#125;.</span><br><span class="line"></span><br><span class="line">When was Ulysses S. Grant born? &#123;#</span><br><span class="line">    =1822:0</span><br><span class="line">    =%50%1822:2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write a short biography of Dag Hammarskjöld. &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="问题类别"><a href="#问题类别" class="headerlink" title="问题类别"></a>问题类别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$CATEGORY: mycategory</span><br></pre></td></tr></table></figure><p>可以在文件的任何位置设置，也可以设置多个。设置之后表示从这开始到下一个设置或文件末尾，其中包含的所有问题的类型都是这个类型。</p><p>如果这个问题类型不存在则会创建。</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">::GIFT Control Characters::</span><br><span class="line">Which of the following is NOT a control character for the GIFT import format? &#123;</span><br><span class="line">  ~ \~     # \~ is a control character.</span><br><span class="line">  ~ \=     # \= is a control character.</span><br><span class="line">  ~ \#     # \# is a control character.</span><br><span class="line">  ~ \&#123;     # \&#123; is a control character.</span><br><span class="line">  ~ \&#125;     # \&#125; is a control character.</span><br><span class="line">  = \      # Correct! \ (backslash) is not a control character. BUT,</span><br><span class="line">             it is used to escape the control characters.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> moodle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python线程之Semaphore同步</title>
      <link href="/2018/09/30/python-semaphore/"/>
      <url>/2018/09/30/python-semaphore/</url>
      
        <content type="html"><![CDATA[<p>Semaphore，是一种带计数的线程同步机制，当调用release时，增加计数，当acquire时，减少计数，当计数为0时，自动阻塞，等待release被调用。</p><p>在Python中存在两种Semaphore，一种就是纯粹的Semaphore，另一种是BoundedSemaphore。</p><ul><li><code>Semaphore</code>: 在调用<code>release()</code>函数时，不会检查，增加的计数是否超过上限（没有上限，会一直上升）</li><li><code>BoundedSemaphore</code>: 在调用<code>release()</code>函数时，会检查，增加的计数是否超过上限，这样就保证了使用的计数</li></ul><p><strong>示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">maxconnections = <span class="number">5</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">pool_sema = BoundedSemaphore(value=maxconnections)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> pool_sema:</span><br><span class="line">    <span class="comment"># 这里需要注意，使用with语句块，会自动帮你执行acquire()和release()</span></span><br><span class="line">    conn = connectdb()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># ... use connection ...</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署zabbix服务</title>
      <link href="/2018/09/26/docker-zabbix/"/>
      <url>/2018/09/26/docker-zabbix/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.zabbix.com/" target="_blank" rel="noopener">zabbix</a>是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。</p><p><a href="https://www.zabbix.com/" target="_blank" rel="noopener">zabbix</a>能监视各种网络参数，保证服务器系统的安全运营；并提供灵活的通知机制以让系统管理员快速定位以及解决存在的各种问题。</p><p>zabbix由2部分构成，zabbix server与可选组件zabbix agent。</p><p>zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器、网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上。</p><a id="more"></a><h2 id="zabbix-server部署"><a href="#zabbix-server部署" class="headerlink" title="zabbix server部署"></a>zabbix server部署</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zabbix:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zabbix/zabbix-web-nginx-mysql:alpine-3.4-latest</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zabbix</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8084</span><span class="string">:80</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=zabbix_ser</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=zabbix_db</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PHP_TZ=Asia/Shanghai</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">zabbix_db</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">zabbix_ser</span></span><br><span class="line">    <span class="attr">zabbix_ser:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zabbix/zabbix-server-mysql:alpine-3.4-latest</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zabbix_ser</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">10051</span><span class="string">:10051</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=zabbix_db</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">zabbix_db</span></span><br><span class="line">    <span class="attr">zabbix_db:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zabbix_db</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=zabbix</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/var/lib/mysql</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">        <span class="attr">ipam:</span></span><br><span class="line">            <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.27</span><span class="number">.4</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：启动服务时需要依次启动：<code>zabbix_db</code>、<code>zabbix_ser</code>、<code>zabbix</code>。</p><h2 id="zabbix-agent部署"><a href="#zabbix-agent部署" class="headerlink" title="zabbix agent部署"></a>zabbix agent部署</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zabbix_agent:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zabbix/zabbix-agent:alpine-3.4-latest</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zabbix_agent</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">10050</span><span class="string">:10050</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ZBX_HOSTNAME=10.1.50.112</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=zabbix_ser</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ZBX_PASSIVESERVERS=172.27.5.1</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">        <span class="attr">ipam:</span></span><br><span class="line">            <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.27</span><span class="number">.5</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript：模仿接口</title>
      <link href="/2018/09/26/js-interface/"/>
      <url>/2018/09/26/js-interface/</url>
      
        <content type="html"><![CDATA[<p>JavaScript中模仿接口的三种方法：注释法、属性检查法和鸭式辩型法。没有哪种技术是完整的，但三者结合使用基本上可以令人满意。</p><h2 id="用注释描述接口"><a href="#用注释描述接口" class="headerlink" title="用注释描述接口"></a>用注释描述接口</h2><p>用注释模仿接口是最简单的方法，但效果却是最差的。这种方法模仿其他面向对象语言中的做法，使用了<code>interface</code>和<code>implements</code>关键字，但把它们放在注释中，以免引起语法错误。下面的示例演示了如何把这些关键字添加到代码中以描述所要求的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    interface Composite &#123;</span></span><br><span class="line"><span class="comment">        function add(child);</span></span><br><span class="line"><span class="comment">        function remove(child);</span></span><br><span class="line"><span class="comment">        function getChild(index);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    interface FormItem &#123;</span></span><br><span class="line"><span class="comment">        function save();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// implements Composite, FormItem</span></span><br><span class="line"><span class="keyword">var</span> CompositeForm = <span class="function"><span class="keyword">function</span>(<span class="params">id, method, action</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implement the Composite interface.</span></span><br><span class="line"></span><br><span class="line">CompositeForm.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">CompositeForm.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">CompositeForm.prototype.getChild = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implement the FormItem interface.</span></span><br><span class="line"></span><br><span class="line">CompositeForm.prototype.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种模仿并不是很好。它没有为确保CompositeForm真正实现了正确的方法集而进行检查，也不会抛出错误以告知程序员程序中有错误。说到底它只要还是属于程序文档范畴。在这种做法中，对接口约定的遵守完全依靠自觉。</p><p>尽管如此。这种方法也有其优点。它易于实现，不需要额外的类或函数。它可以提高代码的课重用性，因为现在哪些类实现的接口都有说明，程序员可以把它们与实现了同样接口的类互换使用。这种方法并不影响文件尺寸或执行速度，因为它所使用的注释可以在对代码进行部署时不费吹灰之力地予以剔除。但是，由于不会提供错误信息，它对测试和调试没有什么帮助。</p><a id="more"></a><h2 id="用属性检查模仿接口"><a href="#用属性检查模仿接口" class="headerlink" title="用属性检查模仿接口"></a>用属性检查模仿接口</h2><p>第二种方法更严谨一点。所有类都明确地声明自己实现了那些接口，那些想与这些类打交道的对象可以针对这些声明进行检查。那些接口自身仍然只是注释，但现在你可以通过检查一个属性得知某个自称实现了什么借口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    interface Composite &#123;</span></span><br><span class="line"><span class="comment">        function add(child);</span></span><br><span class="line"><span class="comment">        function remove(child);</span></span><br><span class="line"><span class="comment">        function getChild(index);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    interface FormItem &#123;</span></span><br><span class="line"><span class="comment">        function save();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CompositeForm = <span class="function"><span class="keyword">function</span>(<span class="params">id, method, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.implementsInterfaces = [<span class="string">'Composite'</span>, <span class="string">'FormItem'</span>];</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addForm</span>(<span class="params">formInstance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!implements(formInstance, <span class="string">'Composite'</span>, <span class="string">'FormItem'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Object does not implement a required interface."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The implements function, which checks to see if an object declares</span></span><br><span class="line"><span class="comment">// that itimplaments the required interfaces.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">implements</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Looping through all arguments after the first one.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> interfaceName = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">var</span> interfaceFound = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; object.implementsInterfaces.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(object.implementsInterfaces[j] === interfaceName) &#123;</span><br><span class="line">                interfaceFound = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!interfaceFound) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// An interface was not found.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，CompositeForm宣称自己实现了Composite和FormItem这两个接口，其做法是把这两个接口的名称加入一个名为implementsInterfaces的数组。类显式声明自己支持什么接口。任何一个要求其参数属于特定类型的函数都可以对这个属性进行检查，并在所需要接口未在声明之列时抛出一个错误。</p><p>这种方法有几个优点。它对类所实现的接口提供了文档说明。如果需要的接口不在一个类宣称的接口之列，你会看到错误消息。通过利用这些错误，你可以强迫其他程序员声明这些接口。</p><p>这种方法的主要缺点在于它并非确保类真正实现了自称实现的接口。你只知道它是否说自己实现了接口。在创建一个类时声明它实现了一个接口，但后来在实现该接口所规定的方法时却漏掉其中某一个，这一种错误很常见。此时所有类型检查都能通过，但那个方法却并不存在，这将在代码中埋下一个隐患。另外，显式声明类所支持的接口也需要一些额外工作。</p><h2 id="用鸭式辩型法模仿接口"><a href="#用鸭式辩型法模仿接口" class="headerlink" title="用鸭式辩型法模仿接口"></a>用鸭式辩型法模仿接口</h2><p>其实，类是否声明自己支持哪些接口并不重要，只要它具有这些接口中的方法就行。鸭式辩型（这个名称来自James Whitecomb Riley的名言：“像鸭子一样走里并且嘎嘎叫的就是鸭子”）正是基于这样的认识。它把对象实现的方法集作为判断它是不是某个类的实例的唯一标准。这种技术在检查一个类是否实现了某个接口时也可大显身手。这种方法背后的观点很简单：如果对象具有与接口定义的方法同名的所以方法，那么就可以认为它实现了这个接口。你可以用一个辅助函数来确保对象具有所以必需的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interfaces</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Composite = <span class="keyword">new</span> Interface(<span class="string">'Composite'</span>, [<span class="string">'add'</span>, <span class="string">'remove'</span>, <span class="string">'getChild'</span>]);</span><br><span class="line"><span class="keyword">var</span> FormItem = <span class="keyword">new</span> Interface(<span class="string">'FormItem'</span>, [<span class="string">'save'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CompositeForm class</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CompositeForm = <span class="function"><span class="keyword">function</span>(<span class="params">id, method, action</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addForm</span>(<span class="params">formInstance</span>) </span>&#123;</span><br><span class="line">    ensureImplements(formInstance, Composite, FormItem);</span><br><span class="line">    <span class="comment">// This function will throw an error if a required method is not implemented.</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与另外两种方法不同，这种方法并不借助于注释。其各个方面都是可以强制实施的。ensureImplements函数需要至少两个参数。第一个参数是想要检查的对象。其余参数是据以对那个对象进行检查的接口。该函数检查其第一个参数代表的对象是否实现了那些接口所声明的所有方法。如果发现的漏掉了任何一个方法，它就会抛出错误，其中包含了所缺少的那个方法和未被正确实现的接口的名称等有用信息。这种检查可以用在代码中任何需要确保某个对象实现了某个接口的地方。在本例中，addForm函数仅当一个表单对象支持所有必要的方法时才会对其执行添加操作。</p><p>尽管鸭式辩型可能是上述三种方法中最有用的一种，但它也有缺点。在这种方法中，类并不声明自己实现了哪些接口，这降低了代码的可重用性，并且也缺乏其他两种方法那样的自我描述性。它需要使用一个辅助类（Interface）和一个辅助函数（ensureImplements）。而且，它只关心方法的名称，并不检查其参数的名称、数目或类型。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>一般可综合使用第一种和第三种方法。用注释声明类支持的接口，从而提高代码的可读性及其文档的完整性。用辅助类<code>Interface</code>及其类方法<code>Interface.ensureImplaments</code>来对对象实现的方法进行显式检查，如果对象未能通过检查，这个方法将返回一条有用的消息。</p><p>下面是一个Interface类的定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Contructor.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Interface = <span class="function"><span class="keyword">function</span>(<span class="params">name, methods</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Interface constructor called with "</span> + <span class="built_in">arguments</span>.length + <span class="string">" arguments, but expected exactly 2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> name !== <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Interface constructor expects name to be passed in as a string."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.methods = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> methods[i] !== <span class="string">"string"</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Interface constructor expects method names to be passed in as a string."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.methods.push(methods[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Static class method.</span></span><br><span class="line"></span><br><span class="line">Interface.ensureImplements = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Function Interface.ensureImplements called with "</span> + <span class="built_in">arguments</span>.length + <span class="string">" arguments, but expected at least 2."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> interface = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">if</span>(interface.constructor !== Interface) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Function Interface.ensureImplements expects arguments two and above to be instances of Interface."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; interface.methods.length; j ++) &#123;</span><br><span class="line">            <span class="keyword">var</span> method = interface.methods[j];</span><br><span class="line">            <span class="keyword">if</span>(!object[method] || <span class="keyword">typeof</span> object[method] !== <span class="string">"function"</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Function Interface.ensureImplements: object does not implement the "</span> + interface.name + <span class="string">" interface. Method "</span> + method + <span class="string">" was not found."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中可以看到，该类的所有方法对其参数都有严格的要求，如果参数未能通过检查，将导致错误抛出。我们特地加入这种检查的目的在于：如果没有错误被抛出，那么你可以肯定接口已经得到了正确的声明和实现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Java进阶</title>
      <link href="/2018/09/26/java-advanced/"/>
      <url>/2018/09/26/java-advanced/</url>
      
        <content type="html"><![CDATA[<p>Java虽然入门要容易, 然而要精通它, 要成为专家却很难. 主要原因是Java所涉及的技术面比较宽, 人的精力总是有限的. 有些Java方面的技术是必须要要掌握的, 钻研得越深入越好, 比如多线程技术.</p><h2 id="基础阶段"><a href="#基础阶段" class="headerlink" title="基础阶段"></a>基础阶段</h2><p>基础阶段, 可能需要经历1-2年吧. 这个时段, 应该多写一些基础的小程序(自己动手写的越多越好). 计算机是一门实践性很强的学科, 自己动手的东西, 记忆非常深刻, 效果要胜过读好多书. 当然, 学Java基础的时候, 书籍的选择也非常重要, 好的书籍事半功倍, 能让你打个非常好的基础. 而差的书籍, 很容易将你带入歧途, 多走很多弯路. 书籍不在多, 而在乎读得精(有些书, 你读十遍都不为过). 我记得我学Java的第一本书是<thinking in java>的中文版, 网上有很多人都建议不要把这本书作为第一本的入门教程来看, 太难. 我却想在此极力推荐它, 这本书确实是本经典之作. 而且书中确实讲的也是Java中的一些基础技术, 没有什么太难的东西, 只不过比较厚, 学习周期比较长, 所以很多人中途会选择放弃. 其实, 这本书是一本难得的入门教程, 对Java一些基础的东西, 讲得很全, 而且也很清晰, 更重要的是, 这本书能让你养成很多好的编程习惯, 例子也很多. 建议你把大部分的例子自己去实现一遍.  我的亲身经历, 我记得当时认真的看了2遍, 花了大概7个月的时间, 不过真的有很好的效果. 另外一个教程, 就是&lt;Java核心技术&gt;卷一, 卷二的话可以不必要买. 卷一看完, 自己再钻研一下, 就已经能达到卷二的高度了:). 到那时, 你就会觉得看卷二没啥意思, 感觉浪费钱了. 还有一个, 就是张孝祥的Java视频, 看视频有个好处, 就是比看书的记忆要深刻, 还有很多你可以跟着视频的演示同步操作. 张孝祥的Java视频对初学者来说, 确实很有作用. 总结起来: 看这些资料的时候, 一定要多写例子, 写的越多越好!</thinking></p><a id="more"></a><h2 id="中级阶段"><a href="#中级阶段" class="headerlink" title="中级阶段"></a>中级阶段</h2><p>中级阶段, 是一个更漫长的时期, 能否突破此阶段, 跟个人的努力和天资有着很大的关系. 你不得不承认, 同样一门新技术, 有些人一个月领悟到的东西, 比你一年的都多. 这就是天资, 程序员是一个需要天才的工作. 我想, 很多人听说李一男吧, 此君就是这样的人物, 三个月的时间就能解决好大一帮人几年解决不了的问题, 给华为某部门带来了很多的收益. 哦, 这是题外话了, 与此篇的主题无关, 只是本人偶尔的感慨而已:).  这个阶段, 就需要研究很多专题性的东西了, 比如: IO的实现原理, 多线程和Java的线程模型, 网络编程, swing, RMI, reflect, EJB, JDBC等等很多很多的专题技术, 钻研得越深越好. 为了更好的提高, 研究的更深入, 你需要经常到网络上搜索资料, 这个时候往往一本书起不来很大的作用. 选一个JDK版本吧, 目前建议选用1.6, 多多研究它, 尤其是源代码(尽量! 就是尽自己最大的努力, 虽然研究透是不可能滴). 比如说: util, collection, io, nio, concurrent等等包. 可能有人会反对我说, 不是有API文档吗, 为什么还要研究这么多的源代码? 错了, 有API文档, 你仅仅只是知道怎么用而已, 而认真仔细的研读这些大牛的源码, 你就会深入更高的一个阶层, 自己的编码, 设计都会有很大的提高. 如果有能力和精力, 我建议你把JDK的每一行代码都熟悉一遍, 绝对只有好处, 没有坏处! 而且你会有些意外的收获, 比如, 当你仔细地读完concurrent包的时候(不多, 好像总共是86个类吧), 你就会对Doug Lea佩服得五体投地. 这个时候最忌碰到难题就去寻找帮助, 去网上找答案! 先把自己的脑袋想破吧, 或者等你的老板拿着砍刀冲过来要把你杀了, 再去寻求帮助吧. 对于专题的学习, 英文原版的阅读是非常必要的, 看的越多越好, 多上上IBM的developer, SUN的网站吧, 当然Javaeye也很不错:), 有很多大牛, 呵呵.</p><p>这个时候, 你应该建立自己的代码库了, 你应该自己去研究很多有意思的东西了. 从一个200多M的文件中寻找一个字段, 最坏情况(在文件的末尾咯)也只需要1秒左右的时间, 你知道吗?  这个阶段, 有很多很多类似的有趣的东西可以供你去研究, 你需要更多地关注性能, 规范性, 多解决一些疑难问题. 需要学会所有的调试技术, 运用各种性能工具, 还有JDK附带的很多工具, 这些你都要熟练得跟屠夫操刀一样. 也可以看看<effective java>, 这本书总结的也不错, 对写高效稳定的Java程序有些帮助. 也可以看看模式方面的东西, 但是我建议模式不要滥用, 非得要用的时候才用, 模式往往会把问题搞复杂:). 总结起来: 这个阶段是一个由点延伸到面的过程, 经过不断的学习, 演变成全面的深入! Java技术中你没什么盲点了, 还能解决很多性能问题和疑难问题, 你就成了一个合格的程序员了! :)  [要想成为优秀程序员, 还得对数据库和操作系统很精通.</effective></p><h2 id="高级阶段"><a href="#高级阶段" class="headerlink" title="高级阶段"></a>高级阶段</h2><p>高级阶段, 我就不敢妄言了. 呵呵, 我感觉自己也是处于中级阶段吧. 也是根据自己的一些经验, 谈谈自己的理解吧:</p><p>这个阶段, 需要研究各种框架, Spring, struts, Junit, Hibernate, iBatis, Jboss, Tomcat, snmp4j等等, 我觉得这个时候, 只要是用Java实现的经典框架, 你都可以去研究. ——在此申明一下, 我的意思不是说会用. 光会用其实是远远不够的, 你可以选择自己喜欢钻研的框架, 去好好研究一下, 兴趣是最好的老师嘛.</p><p>建议开始的时候, 研究Junit和Struts吧, 小一点, 里面都采用了很多的模式, 呵呵, 可以熟悉一下, 尽量想想人家为什么这么做. 我建议主要的精力可以花在spring和jboss上, 尤其是jboss,  经典中的经典, 设计, 性能, 多线程, 资源管理等等, 你从中可以学到的东西简直是太多了. 而且它还有一本写得很好的参考书, 叫&lt;Jboss管理与开发核心技术&gt;, 英文方面的资料也是非常的多. 在工作中如果有机会参与架构的设计, 业务问题的讨论, 一定想方设法杀进去! 这对自己的设计能力, 以及对设计如何运用在业务上有很大的帮助. 毕竟, 程序都是为了更好地实现用户的业务的. 这个时候, 需要更多看看软件工程和UML方面的资料, 或者自己主持一个项目玩玩, 不一定非得出去拉项目赚钱(能赚钱当然更好), 不管成功或失败, 都是很宝贵的经验, 都能提高很多!</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx：带下划线的请求头</title>
      <link href="/2018/09/26/nginx-underscores-in-headers/"/>
      <url>/2018/09/26/nginx-underscores-in-headers/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:  underscores_in_headers on | off;</span><br><span class="line">Default: underscores_in_headers off;</span><br><span class="line">Context: http, server</span><br></pre></td></tr></table></figure><p>启用或禁用带下划线的请求头。当禁用下划线时，名称中包含下划线的请求头将被置为无效。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】10+年程序员总结的20+条经验教训</title>
      <link href="/2018/09/25/20plus-tips-programmer/"/>
      <url>/2018/09/25/20plus-tips-programmer/</url>
      
        <content type="html"><![CDATA[<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol><li><p><strong>从小事做起，然后再扩展</strong></p><p> 无论是创建一个新的系统，还是添加功能到现有的系统中，我总是从一个简单到几乎没有任何所需功能的版本启动，然后再一步一步地解决问题，直到满意为止。 我从来没有妄想过能够一步登天。相反，我一边开发一边学习，同时新掌握的信息还可以用于解决方案中。</p><p> 我很喜欢John Gall的这句话：“复杂系统总是源于简单系统的演化。”</p></li><li><p><strong>一次只改变一件事</strong></p><p> 当我们在开发时，碰到测试失败和功能无效的情况，如果你一次只研究一个问题，那将会更容易找到问题的关键。 换言之，就是使用短迭代。必须确保这个问题解决之后，再转移到另一个问题上。这适用于向下提交。如果在你添加新功能之前需要先重构代码，那么先提交重构，然后再添加新的功能。</p></li><li><p><strong>尽早地添加日志记录和错误处理</strong></p><p> 在开发新系统时，我做的第一件事就是添加日志和错误处理，因为这两者从一开始就非常有用。如果系统不能照常工作， 那么你就需要知道程序中发生了什么——这是日志的作用。错误处理也是如此——错误和异常越早处理越好。</p></li><li><p><strong>每一行新代码必须至少执行一次</strong></p><p> 在你真正完成一个功能之前，你必须对它进行测试。不然，你怎么知道它是不是按照你的想法在执行呢？ 通常情况下，最好的方法是通过自动测试，但并非总是如此。不过，不管怎么说，每一行新代码必须至少执行一次。</p></li><li><p><strong>在整体测试之前先进行模块测试</strong></p><p> 先进行部分模块测试可以节省时间。通常说来，我们在整合不同的模块时也会出现问题，例如模块之间的接口不匹配。 但是如果我们能够信任各个组件的话，那么跟踪集成问题就会变得简单得多。</p></li><li><p><strong>所有事情所花费的时间总是比你预期的要长</strong></p><p> 特别是在编程中，即使一切进展顺利，我们也很难对功能所需的时间做出正确的预算。并且，开发软件时碰到各种意想不到的问题是非常常见的。</p><p> 侯世达定律其实道出了真谛：做事所花费的时间总是比你预期的要长，即使你在预期中已经考虑了侯世达定律。</p></li><li><p><strong>先了解现有的代码</strong></p><p> 大多数的编码都需要以某种方式改变现有的代码。即使是新功能，也需要适应现有的程序。 所以，在你加进去新的内容前，首先需要了解当前的解决方案。否则，你一不小心就很有可能会打破现有的功能。 这意味着，阅读代码和编写代码都是必要的技能。这也是为什么看似微小的变化仍可能需要很长时间才能解决的原因之一——你首先必须了解上下文。</p></li><li><p><strong>阅读和运行</strong></p><p> 幸运的是，对于理解代码，我们有两种互补的方法。你可以阅读代码，也可以运行代码。运行代码的确是个非常棒的好方法。所以，请确保充分利用这两种方法。</p></li></ol><a id="more"></a><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><ol start="9"><li><p><strong>bug总是难免的</strong></p><p> 我不喜欢那些宣称软件开发可以“一蹴而就”的高谈阔论。不论你再怎么费尽心机，bug总是难免的。最好能够做成可以快速故障排除、修复bug和部署修复的系统。</p></li><li><p><strong>解决故障报告</strong></p><p>每个开发人员都应该花时间去处理来自客户的故障报告，并修复bug。这能让你更好地理解客户的意图，明白如何使用系统，知道排除故障的难易程度，了解系统的设计情况。这也是为自己的开发成果负责的好方法。</p></li><li><p><strong>重现问题</strong></p><p>修复bug的第一步就是重现问题。然后你得确保修复之后，问题能够彻彻底底地消失。这样一个简单的规则可以确保你不会误将非问题当作是问题，并确保解决方案真的能够奏效。</p></li><li><p><strong>修复已知错误，然后再看看有没有遗漏的地方</strong></p><p>有时候，可能同时存在着几个不同的问题。它们之间的互相作用，可能会让你毫无头绪，束手无策。不要纠结于搞清楚发生了什么，先去解决所有已知的问题，然后再看看还有什么不对的地方。</p></li><li><p><strong>没有巧合</strong></p><p>在测试和故障排除时，不要相信会出现什么巧合。就像你改变了定时器的值，那么就会改变系统重启的频率。所以一切都并非是巧合。添加新功能，另一个不相干的功能变慢了？这绝对不是巧合。相反，是你应该仔细调查的内容。</p></li><li><p><strong>关联时间戳</strong></p><p>在故障排除时，事件的时间戳可以作为你的好帮手。寻找偶数增量。例如，如果系统重启了，并且刚刚发出过一个3000毫秒左右的请求，那么可能是触发了某个定时器，才导致出现重启的动作。</p></li></ol><h2 id="团队合作"><a href="#团队合作" class="headerlink" title="团队合作"></a>团队合作</h2><ol start="15"><li><p><strong>面对面的交流最有效</strong></p><p>当我们需要讨论如何解决问题时，那么面对面的交流比视频、打电话和电子邮件都要好。</p></li><li><p><strong>橡皮鸭法</strong></p><p>遇到你绞尽脑汁也解决不了的问题时，不妨找一个同事，然后将问题解释给他们听。很多时候，当你在叙述时，即使你的同事一言不发，你可能也会突然灵光乍现找到问题的关键。</p></li><li><p><strong>问问题</strong></p><p>阅读和运行代码往往非常有助于指出代码的目的和它的工作原理。但是如果你有机会咨询那些更为了解的人（例如原来的程序员），那么千万不要错过。</p></li><li><p><strong>共享荣誉</strong></p><p>不要贪图荣誉，该是谁的就是谁的。例如：“Marcus想出了这个主意……”（如果真是他想的话），而不要说“我们想出的……”。</p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol start="19"><li><p><strong>尝试</strong></p><p>如果你不知道某种编程语言功能的工作原理，那么不妨写一个小程序来理解它是如何工作的。这同样适用于测试你正在开发的系统。如果我将参数设置为-1，会发生什么？当我在重启系统时，如果服务当掉，会发生什么？以此来研究它的工作原理。</p></li><li><p><strong>带着问题睡觉</strong></p><p>如果你正在解决一个很难的问题，那么不妨带着问题睡觉。有科学研究表明，这样做虽然你表明上并没有在主动思考，但你的潜意思却这么做了。其结果就是，第二天再去研究问题，解决方案已经呼之欲出了。</p></li><li><p><strong>跳槽</strong></p><p>不要害怕跳槽。和不同的人共事，开发不同的产品，感受不同的公司文化是非常有意思的。</p></li><li><p><strong>不断学习</strong></p><p>我们需要不断地学习和了解软件开发。你可以尝试不同的编程语言和工具，阅读软件开发的书籍，接受MOOC课程。相信我，量变才能达到质的飞跃，这些小小的学习积累，终有一天会大大地提高你的知识和能力。</p></li></ol><p>译文链接：<a href="http://www.codeceo.com/article/10-years-20-tips-programmer.html" target="_blank" rel="noopener">http://www.codeceo.com/article/10-years-20-tips-programmer.html</a>英文原文：<a href="http://henrikwarne.com/2015/04/16/lessons-learned-in-software-development/" target="_blank" rel="noopener">Lessons Learned in Software Development</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker：镜像构建上下文</title>
      <link href="/2018/09/25/docker-build/"/>
      <url>/2018/09/25/docker-build/</url>
      
        <content type="html"><![CDATA[<h2 id="镜像构建上下文"><a href="#镜像构建上下文" class="headerlink" title="镜像构建上下文"></a>镜像构建上下文</h2><p>我们在使用 docker build 命令去构建镜像时，经常会看到命令最后会有一个<code>.</code>号。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t xxx .</span><br></pre></td></tr></table></figure><p>这里的<code>.</code>号是在指定镜像构建过程中的上下文环境的目录。</p><p>Docker在运行时分为<code>Docker引擎</code>（服务端守护进程）以及客户端工具，我们日常使用各种docker命令，其实就是在使用客户端工具与<code>Docker引擎</code>进行交互。那么当我们使用<code>docker build</code>命令来构建镜像时，这个构建过程其实是在<code>Docker引擎</code>中完成的，而不是在本机环境。</p><p>那么如果在Dockerfile中使用了一些<code>COPY</code>等指令来操作文件，如何让<code>Docker引擎</code>获取到这些文件呢？</p><p>这里就有了一个<code>镜像构建上下文</code>的概念，当构建的时候，由用户指定构建镜像的上下文路径，而<code>docker build</code>会将这个路径下所有的文件都打包上传给<code>Docker引擎</code>，引擎内将这些内容展开后，就能获取到所有指定上下文中的文件了。</p><p>例如说dockerfile中的<code>COPY ./package.json /project</code>，其实拷贝的并不是本机目录下的<code>package.json</code>文件，而是<code>docker引擎</code>中展开的构建上下文中的文件，所以如果拷贝的文件超出了构建上下文的范围，<code>Docker引擎</code>是找不到那些文件的。</p><h2 id="dockerignore文件的作用"><a href="#dockerignore文件的作用" class="headerlink" title=".dockerignore文件的作用"></a>.dockerignore文件的作用</h2><p>同其他<code>ignore</code>文件类似，在向<code>Docker引擎</code>发送构建上下文时，Docker会忽略<code>.dockerignore</code>文件中指定的文件和目录。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署Moodle系统</title>
      <link href="/2018/09/20/docker-moodle/"/>
      <url>/2018/09/20/docker-moodle/</url>
      
        <content type="html"><![CDATA[<h2 id="Moodle简介"><a href="#Moodle简介" class="headerlink" title="Moodle简介"></a>Moodle简介</h2><p><a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>是一个开源课程管理系统（CMS），也被称为学习管理系统（LMS）或虚拟学习环境（VLE）。</p><p><a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>平台界面简单、精巧。使用者可以根据需要随时调整界面，增减内容。课程列表显示了服务器上每门课程的描述，包括是否允许访客使用，访问者可以对课程进行分类和搜索，按自己的需要学习课程。</p><p><a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>平台还具有兼容和易用性。可以几乎在任何支持PHP的平台上安装，安装过程简单。只需要一个数据库（并且可以共享）。它具有全面的数据库抽象层，几乎支持所有的主流数据库（除了初始表定义）。利用<a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>，现今主要的媒体文件都可以进行传送，这使可以利用的资源极大丰富。在对媒体资源进行编辑时，利用的是用所见即所得的编辑器，这使得使用者无需经过专业培训，就能掌握Moodle的基本操作与编辑。<a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>注重全面的安全性，所有的表单都被检查，数据都被校验，cookie是被加密的。用户注册时，通过电子邮件进行首次登陆，且同一个邮件地址不能在同一门课程中进行重复注册，所有这些，都使得<a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>的安全性得到了加强。目前，<a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>项目仍然在不断的开发与完善中。</p><p><a href="https://moodle.org/" target="_blank" rel="noopener">Moodle</a>是B/S模式的应用程序，但是一般而言，只适合于中小型学校。</p><a id="more"></a><h2 id="docker-compose配置文件"><a href="#docker-compose配置文件" class="headerlink" title="docker-compose配置文件"></a>docker-compose配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">moodle:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">jhardison/moodle:v3.5</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">moodle</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8082</span><span class="string">:80</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MOODLE_URL=http://10.1.50.112:8082</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DB_PORT_3306_TCP_ADDR=moodle_db</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DB_ENV_MYSQL_DATABASE=moodle</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DB_ENV_MYSQL_USER=moodle</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DB_ENV_MYSQL_PASSWORD=moodle</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data:/var/moodledata</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">moodle_db</span></span><br><span class="line">    <span class="attr">moodle_db:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">moodle_db</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=moodle</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=moodle</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_USER=moodle</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=moodle</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">        <span class="attr">ipam:</span></span><br><span class="line">            <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                 <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.27</span><span class="number">.3</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：需要先启动数据库，并等数据库初始化完成之后再启动moodle服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> moodle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>alpine设置时区</title>
      <link href="/2018/09/19/alpine-timezone/"/>
      <url>/2018/09/19/alpine-timezone/</url>
      
        <content type="html"><![CDATA[<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk add ca-certificates \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add tzdata \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose网络配置</title>
      <link href="/2018/09/18/docker-compose-network-1/"/>
      <url>/2018/09/18/docker-compose-network-1/</url>
      
        <content type="html"><![CDATA[<p>配置默认网络并设置子网：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.17</span><span class="number">.2</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure><p>使用已存在的网络：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">other-existing-network</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节序</title>
      <link href="/2018/09/17/endian/"/>
      <url>/2018/09/17/endian/</url>
      
        <content type="html"><![CDATA[<p>字节序，顾名思义就是字节的顺序。说详细点，就是大于一个字节类型的数据在内存中存放的顺序。通常情况下，开发时不会直接和字节序打交道，只有在跨平台或网络传输字节数据时会使用到。</p><p>字节序按类型分为两种：<code>Little-Endian</code>和<code>Big-Endian</code>：</p><ul><li><strong>Little-Endian</strong>：低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</li><li><strong>Big-Endian</strong>：高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</li><li><strong>网络字节序</strong>：TCP/IP各层协议将字节序定义为<code>Big-Endian</code>，因此TCP/IP协议中使用的字节序通常称之为网络字节序。</li></ul><p>例：如果将<code>0x1234abcd</code>写入到以<code>0x0000</code>开始的内存中，则结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">         BE    LE</span><br><span class="line">0x0000  0x12  0xcd</span><br><span class="line">0x0001  0x34  0xab</span><br><span class="line">0x0002  0xab  0x34</span><br><span class="line">0x0003  0xcd  0x12</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JUnit多线程参数化测试</title>
      <link href="/2018/09/16/java-junit-muti-thread-parameterized/"/>
      <url>/2018/09/16/java-junit-muti-thread-parameterized/</url>
      
        <content type="html"><![CDATA[<p>参数化测试本身是不支持多线程测试的，对于一些测试结果没有依赖的测试来说，单线程的测试执行效率相当低下。</p><p>通过在测试用例中添加线程租，开启多个线程同时执行测试用例，并且在线程租中线程都执行完的时候结束测试，来达到优化测试效率的目的。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.huyp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.AfterClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ThreadParameterizeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor POOL;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String[][] params = &#123; &#123; <span class="string">"A"</span>, <span class="string">"A"</span> &#125;, &#123; <span class="string">"B"</span>, <span class="string">"B"</span> &#125;, &#123; <span class="string">"C"</span>, <span class="string">"C"</span> &#125; &#125;;</span><br><span class="line">    <span class="keyword">private</span> String expected;</span><br><span class="line">    <span class="keyword">private</span> String target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---- start test ----"</span>);</span><br><span class="line">        POOL = (ThreadPoolExecutor) Executors.newFixedThreadPool(params.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (POOL.getActiveCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            POOL.shutdown();</span><br><span class="line">            System.out.println(<span class="string">"---- end test ----"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadParameterizeTest</span><span class="params">(String expected, String target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection&lt;String[]&gt; initParams() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        POOL.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(expected + <span class="string">": "</span> + target);</span><br><span class="line">                Assert.assertEquals(expected, target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>这个类与普通参数化测试类多了几个不同的地方：</p><ol><li><p>在类里面多了一个静态的线程池；</p></li><li><p>在<code>@BeforeClass</code>里面初始化了这个线程池；</p></li><li><p>在<code>@AfterClass</code>里面监听线程池活动的线程数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (POOL.getActiveCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在没有活动的线程时关闭线程池：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POOL.shutdown();</span><br></pre></td></tr></table></figure></li><li><p>在<code>@Test</code>方法里面创建线程，并用线程池进行管理，而具体的逻辑处理在<code>run()</code>方法里面。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUnit参数化测试</title>
      <link href="/2018/09/16/java-junit-parameterized/"/>
      <url>/2018/09/16/java-junit-parameterized/</url>
      
        <content type="html"><![CDATA[<p>参数化测试的编写稍微有点麻烦（当然这是相对于<code>JUnit</code>中其它特性而言）：</p><ol><li>为准备使用参数化测试的测试类指定特殊的运行器<code>org.junit.runners.Parameterized</code>。</li><li>为测试类声明几个变量，分别用于存放期望值和测试所用数据。</li><li>为测试类声明一个使用注解<code>org.junit.runners.Parameterized.Parameters</code>修饰的， 返回值为<code>java.util.Collection</code>的公共静态方法，并在此方法中初始化所有需要测试的参数对。</li><li>为测试类声明一个带有参数的公共构造函数，并在其中为第二个环节中声明的几个变量赋值。</li><li>编写测试方法，使用定义的变量作为参数进行测试。</li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hypc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ParameterizeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String expected;</span><br><span class="line">    <span class="keyword">private</span> String target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collection <span class="title">words</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][] &#123;</span><br><span class="line">            &#123; <span class="string">"employee_info"</span>, <span class="string">"employeeInfo"</span> &#125;,    <span class="comment">// 测试一般的处理情况</span></span><br><span class="line">            &#123; <span class="keyword">null</span>, <span class="keyword">null</span> &#125;,                         <span class="comment">// 测试 null 时的处理情况</span></span><br><span class="line">            &#123; <span class="string">""</span>, <span class="string">""</span> &#125;,                             <span class="comment">// 测试空字符串时的处理情况</span></span><br><span class="line">            &#123; <span class="string">"employee_info"</span>, <span class="string">"EmployeeInfo"</span> &#125;,    <span class="comment">// 测试当首字母大写时的情况</span></span><br><span class="line">            &#123; <span class="string">"employee_info_a"</span>, <span class="string">"employeeInfoA"</span> &#125;, <span class="comment">// 测试当尾字母为大写时的情况</span></span><br><span class="line">            &#123; <span class="string">"employee_a_info"</span>, <span class="string">"employeeAInfo"</span> &#125;  <span class="comment">// 测试多个相连字母大写时的情况</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数化测试必须的构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expected</span></span><br><span class="line"><span class="comment">     *            期望的测试结果，对应参数集中的第一个参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     *            测试数据，对应参数集中的第二个参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterizeTest</span><span class="params">(String expected, String target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expected = expected;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wordFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(expected, WordDealUtil.wordFormat(target));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：运行时是运行类，即<code>ParameterizeTest</code>，而不是方法<code>wordFormat</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件需求规格说明模板目录</title>
      <link href="/2018/09/15/volere-software-requirements-specification/"/>
      <url>/2018/09/15/volere-software-requirements-specification/</url>
      
        <content type="html"><![CDATA[<p><strong>项目驱动</strong>——描述了项目的理由和动机</p><ol><li><strong>项目的目标</strong>——投资构建产品的理由以及这样做我们希望取得的业务上的好处</li><li><strong>客户、顾客和其他的利益相关者</strong>——产品涉及他们的利益或对他们产生影响</li><li><strong>产品的用户</strong>——预期的最终用户，以及他们对产品可用性的影响</li></ol><p><strong>项目限制条件</strong>——加在项目和产品上的约束条件</p><ol start="4"><li><strong>需求限制条件</strong>——项目的局限性和产品设计的约束条件</li><li><strong>命名标准和定义</strong>——项目的词汇表</li><li><strong>相关事实和假定</strong>——对产品产生一定影响的外部因素，或开发者所作的假定</li></ol><p><strong>功能需求</strong>——产品的功能</p><ol start="7"><li><strong>工作的范围</strong>——针对的业务领域</li><li><strong>产品的范围</strong>——定义预期产品的边界，以及它与相邻系统的连接情况</li><li><strong>功能与数据需求</strong>——产品必须做的事情以及功能所操作的数据</li></ol><a id="more"></a><p><strong>非功能需求</strong>——产品的品质</p><ol start="10"><li>观感需求——预期的外观</li><li><strong>易用性和人性化需求</strong>——如果产品要让预期用户成功地使用，它必须是怎样的</li><li><strong>执行需求</strong>——速度、大小、精度、人身安全性、可靠性、健壮性、可伸缩性、持久性和容量等需求</li><li><strong>操作和环境需求</strong>——产品预期的操作环境</li><li><strong>可维护性和支持需求</strong>——产品的可改动性必须达到什么水平，以及需要怎样的支持</li><li><strong>安全性需求</strong>——产品的信息安全性、保密性和完整性</li><li><strong>文化与政策需求</strong>——人和社会因素</li><li><strong>法律需求</strong>——满足适用的法律</li></ol><p><strong>项目问题</strong>——这些适用于构建产品的项目</p><ol start="18"><li><strong>开放式问题</strong>——那些尚未解决的问题，可能对项目的成功有影响</li><li><strong>立即可用的解决方案</strong>——利用已有的组件而不是从头开发</li><li><strong>新问题</strong>——引入新产品而带来的问题</li><li><strong>任务</strong>——将产品投入使用必须要做的一些事情</li><li><strong>迁移到新产品</strong>——从现存系统转换的任务</li><li><strong>风险</strong>——项目最有可能面对的风险</li><li><strong>费用</strong>——早期对构建产品的成本或工作量的估计</li><li><strong>用户文档</strong>——创建用户指南和文档的计划</li><li><strong>后续版本需求</strong>——可能在产品将来的发行版本中包括的需求</li><li><strong>解决方案的想法</strong>——我们不想错失的设计想法</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git常用别名</title>
      <link href="/2018/09/12/git-alias/"/>
      <url>/2018/09/12/git-alias/</url>
      
        <content type="html"><![CDATA[<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias.s</span>=status</span><br><span class="line"><span class="attr">alias.a</span>=!git add . &amp;&amp; git status</span><br><span class="line"><span class="attr">alias.au</span>=!git add -u . &amp;&amp; git status</span><br><span class="line"><span class="attr">alias.aa</span>=!git add . &amp;&amp; git add -u . &amp;&amp; git status</span><br><span class="line"><span class="attr">alias.c</span>=commit</span><br><span class="line"><span class="attr">alias.cm</span>=commit -m</span><br><span class="line"><span class="attr">alias.ca</span>=commit --amend</span><br><span class="line"><span class="attr">alias.ac</span>=!git add . &amp;&amp; git commit</span><br><span class="line"><span class="attr">alias.acm</span>=!git add . &amp;&amp; git commit -m</span><br><span class="line"><span class="attr">alias.l</span>=log --graph --all --pretty=format:<span class="string">'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'</span></span><br><span class="line"><span class="attr">alias.ll</span>=log --stat --abbrev-commit</span><br><span class="line"><span class="attr">alias.lg</span>=log --color --graph --pretty=format:<span class="string">'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative</span><br><span class="line"><span class="attr">alias.llg</span>=log --color --graph --pretty=format:<span class="string">'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)'</span> --abbrev-commit</span><br><span class="line"><span class="attr">alias.last</span>=log --stat --abbrev-commit -<span class="number">1</span></span><br><span class="line"><span class="attr">alias.d</span>=diff</span><br><span class="line"><span class="attr">alias.master</span>=checkout master</span><br></pre></td></tr></table></figure><a id="more"></a><p>可以使用以下命令添加别名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.s <span class="string">"status"</span></span><br><span class="line">git config --global alias.a <span class="string">"!git add . &amp;&amp; git status"</span></span><br><span class="line">git config --global alias.au <span class="string">"!git add -u . &amp;&amp; git status"</span></span><br><span class="line">git config --global alias.aa <span class="string">"!git add . &amp;&amp; git add -u . &amp;&amp; git status"</span></span><br><span class="line">git config --global alias.c <span class="string">"commit"</span></span><br><span class="line">git config --global alias.cm <span class="string">"commit -m"</span></span><br><span class="line">git config --global alias.ca <span class="string">"commit --amend"</span></span><br><span class="line">git config --global alias.ac <span class="string">"!git add . &amp;&amp; git commit"</span></span><br><span class="line">git config --global alias.acm <span class="string">"!git add . &amp;&amp; git commit -m"</span></span><br><span class="line">git config --global alias.l <span class="string">"log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'"</span></span><br><span class="line">git config --global alias.ll <span class="string">"log --stat --abbrev-commit"</span></span><br><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span></span><br><span class="line">git config --global alias.last <span class="string">'log --stat --abbrev-commit -1'</span></span><br><span class="line">git config --global alias.llg <span class="string">"log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)' --abbrev-commit"</span></span><br><span class="line">git config --global alias.d <span class="string">"diff"</span></span><br><span class="line">git config --global alias.master <span class="string">"checkout master"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Git默认编辑器</title>
      <link href="/2018/09/11/git-editor/"/>
      <url>/2018/09/11/git-editor/</url>
      
        <content type="html"><![CDATA[<ol><li><p>使用<code>git config</code>设置：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor vim     <span class="comment"># 全局设置</span></span><br><span class="line">git config core.editor vim              <span class="comment"># 当前项目设置</span></span><br></pre></td></tr></table></figure></li><li><p>使用环境变量<code>GIT_EDITOR</code>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GIT_EDITOR=vim</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH隧道</title>
      <link href="/2018/09/05/ssh-tunnel/"/>
      <url>/2018/09/05/ssh-tunnel/</url>
      
        <content type="html"><![CDATA[<p>通过使用SSH连接来建立的通道，它被称之为SSH隧道。</p><h2 id="本地SSH隧道"><a href="#本地SSH隧道" class="headerlink" title="本地SSH隧道"></a>本地SSH隧道</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -N -f -L 8080:234.234.234.234:80 123.123.123.123    <span class="comment"># 通过SSH服务器（123.123.123.123）将远程机器（234.234.234.234）的80端口映射到本地8080端口</span></span><br><span class="line">curl -i http://localhost:8080   <span class="comment"># 访问本地8080端口相当于访问远程机器（234.234.234.234）的80端口</span></span><br></pre></td></tr></table></figure><p>参数介绍：</p><ul><li><code>-N</code>: 不执行远程指令</li><li><code>-f</code>: 后台执行ssh指令</li><li><code>-L</code>: 做本地端口转发，冒号（:）分隔的三个参数分别是<ul><li>本地端口号</li><li>目标机器IP地址</li><li>目标机器端口号</li></ul></li><li>最后一个参数是远程SSH服务器地址</li></ul><h2 id="远程SSH隧道"><a href="#远程SSH隧道" class="headerlink" title="远程SSH隧道"></a>远程SSH隧道</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -N -f -C -R 8080:234.234.234.234:80 123.123.123.123      <span class="comment"># 将本地的80端口映射到远程服务器（123.123.123.123）的8080端口</span></span><br><span class="line"><span class="comment"># 切换到机器123.123.123.123上</span></span><br><span class="line">curl -i http://127.0.0.1:8080     <span class="comment"># 访问127.0.0.1的8080端口相当于访问机器234.234.234.234的80端口</span></span><br></pre></td></tr></table></figure><p>参数介绍：</p><ul><li><code>-N</code>: 不执行远程指令</li><li><code>-f</code>: 后台执行ssh指令</li><li><code>-C</code>: 压缩请求数据</li><li><code>-R</code>: 做远程端口转发，冒号（:）分隔的三个参数分别是：<ul><li>目标机器端口号</li><li>需要映射内部机器的IP地址</li><li>本地端口号</li></ul></li><li>最后一个参数是远程SSH服务器地址</li></ul><h2 id="Socks代理"><a href="#Socks代理" class="headerlink" title="Socks代理"></a>Socks代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -qtfnNC -D 0.0.0.0:7070 123.123.123.123  <span class="comment"># 通过123.123.123.123建立socks代理，并绑定到0.0.0.0的7070端口上</span></span><br></pre></td></tr></table></figure><p>参数介绍：</p><ul><li><code>-q</code>: 静默模式</li><li><code>-t</code>: 为远程系统上的ssh进程分配一个伪tty（终端）</li><li><code>-f</code>: 后台执行ssh指令</li><li><code>-n</code>: 将标准输出重定向到<code>/dev/null</code></li><li><code>-N</code>: 不执行远程指令</li><li><code>-C</code>: 压缩请求数据</li><li><code>-D</code>: 绑定地址</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>如果经常发现过一段时间SSH连接自动断开，可能原因是SSH客户端的<code>TCPKeepAlive</code>被关闭了，可以使用参数<code>-o TCPKeepAlive=yes</code>来开启。</li><li>自动检查连接，<code>-o ServerAliveInterval=30</code>，表示每30s检查一次连接，<code>-o ServerAliveCountMax=3</code>表示服务器没有响应次数达到3次，则断开连接。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python：获取两个日期中间的日期、月份或年</title>
      <link href="/2018/09/04/python-date-range/"/>
      <url>/2018/09/04/python-date-range/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date_range</span><span class="params">(start_dt, end_dt)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type start_dt: date | datetime</span></span><br><span class="line"><span class="string">    :type end_dt: date | datetime</span></span><br><span class="line"><span class="string">    :rtype:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    start_date = start_dt.strftime(<span class="string">'%Y%m%d'</span>)</span><br><span class="line">    end_date = end_dt.strftime(<span class="string">'%Y%m%d'</span>)</span><br><span class="line">    <span class="keyword">while</span> start_date &lt;= end_date:</span><br><span class="line">        <span class="keyword">yield</span> start_date</span><br><span class="line">        start_dt += timedelta(days=<span class="number">1</span>)</span><br><span class="line">        start_date = start_dt.strftime(<span class="string">'%Y%m%d'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">month_range</span><span class="params">(start_dt, end_dt)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type start_dt: date | datetime</span></span><br><span class="line"><span class="string">    :type end_dt: date | datetime</span></span><br><span class="line"><span class="string">    :rtype:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    start_month = start_month2 = start_dt.strftime(<span class="string">'%Y%m'</span>)</span><br><span class="line">    end_month = end_dt.strftime(<span class="string">'%Y%m'</span>)</span><br><span class="line">    <span class="keyword">while</span> start_month &lt;= end_month:</span><br><span class="line">        <span class="keyword">yield</span> start_month</span><br><span class="line">        <span class="keyword">while</span> start_month == start_month2:</span><br><span class="line">            start_dt += timedelta(days=<span class="number">28</span>)</span><br><span class="line">            start_month2 = start_dt.strftime(<span class="string">'%Y%m'</span>)</span><br><span class="line">        start_month = start_month2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">year_range</span><span class="params">(start_dt, end_dt)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type start_dt: date | datetime</span></span><br><span class="line"><span class="string">    :type end_dt: date | datetime</span></span><br><span class="line"><span class="string">    :rtype:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    start_year = start_year2 = start_dt.strftime(<span class="string">'%Y'</span>)</span><br><span class="line">    end_year = end_dt.strftime(<span class="string">'%Y'</span>)</span><br><span class="line">    <span class="keyword">while</span> start_year &lt;= end_year:</span><br><span class="line">        <span class="keyword">yield</span> start_year</span><br><span class="line">        <span class="keyword">while</span> start_year == start_year2:</span><br><span class="line">            start_dt += timedelta(days=<span class="number">365</span>)</span><br><span class="line">            start_year2 = start_dt.strftime(<span class="string">'%Y'</span>)</span><br><span class="line">        start_year = start_year2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码</title>
      <link href="/2018/08/31/http-status/"/>
      <url>/2018/08/31/http-status/</url>
      
        <content type="html"><![CDATA[<p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位数字代码。它由<a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">RFC2616</a>规范定义的，并得到<a href="https://tools.ietf.org/html/rfc2518" target="_blank" rel="noopener">RFC2518</a>、<a href="https://tools.ietf.org/html/rfc2817" target="_blank" rel="noopener">RFC2817</a>、<a href="https://tools.ietf.org/html/rfc2295" target="_blank" rel="noopener">RFC2295</a>、<a href="https://tools.ietf.org/html/rfc2774" target="_blank" rel="noopener">RFC2774</a>、<a href="https://tools.ietf.org/html/rfc4918" target="_blank" rel="noopener">RFC4918</a>等规范扩展。</p><h2 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h2><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>100 Continue</td><td>服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td>101 Switching Protocols</td><td>服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr><tr><td>102 Processing</td><td>由WebDAV（<a href="https://tools.ietf.org/html/rfc2518" target="_blank" rel="noopener">RFC2518</a>）扩展的状态码，代表处理将被继续执行。</td></tr></tbody></table><h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h2><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>200 OK</td><td>请求成功（其后是对GET和POST请求的应答文档。）</td></tr><tr><td>201 Created</td><td>请求被创建完成，同时新的资源被创建。</td></tr><tr><td>202 Accepted</td><td>供处理的请求已被接受，但是处理未完成。</td></tr><tr><td>203 Non-authoritative Information</td><td>文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td></tr><tr><td>204 No Content</td><td>没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td>205 Reset Content</td><td>没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td>206 Partial Content</td><td>客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr><tr><td>207 Multi-Status</td><td>由WebDAV(<a href="https://tools.ietf.org/html/rfc2518" target="_blank" rel="noopener">RFC2518</a>)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td></tr></tbody></table><a id="more"></a><h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h2><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>300 Multiple Choices</td><td>多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td>301 Moved Permanently</td><td>所请求的页面已经转移至新的url。</td></tr><tr><td>302 Found</td><td>所请求的页面已经临时转移至新的url。</td></tr><tr><td>303 See Other</td><td>所请求的页面可在别的url下被找到。</td></tr><tr><td>304 Not Modified</td><td>未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td>305 Use Proxy</td><td>客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td>306 Unused</td><td>此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td></tr><tr><td>307 Temporary Redirect</td><td>被请求的页面已经临时移至新的url。</td></tr></tbody></table><h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h2><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>400 Bad Request</td><td>服务器未能理解请求。</td></tr><tr><td>401 Unauthorized</td><td>被请求的页面需要用户名和密码。</td></tr><tr><td>402 Payment Required</td><td>此代码尚无法使用。</td></tr><tr><td>403 Forbidden</td><td>对被请求页面的访问被禁止。</td></tr><tr><td>404 Not Found</td><td>服务器无法找到被请求的页面。</td></tr><tr><td>405 Method Not Allowed</td><td>请求中指定的方法不被允许。</td></tr><tr><td>406 Not Acceptable</td><td>服务器生成的响应无法被客户端所接受。</td></tr><tr><td>407 Proxy Authentication Required</td><td>用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td>408 Request Timeout</td><td>请求超出了服务器的等待时间。</td></tr><tr><td>409 Conflict</td><td>由于冲突，请求无法被完成。</td></tr><tr><td>410 Gone</td><td>被请求的页面不可用。</td></tr><tr><td>411 Length Required</td><td>“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td>412 Precondition Failed</td><td>请求中的前提条件被服务器评估为失败。</td></tr><tr><td>413 Request Entity Too Large</td><td>由于所请求的实体的太大，服务器不会接受请求。</td></tr><tr><td>414 Request-url Too Long</td><td>由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td></tr><tr><td>415 Unsupported Media Type</td><td>由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td>416 Requested Range Not Satisfiable</td><td>服务器不能满足客户在请求中指定的Range头。</td></tr><tr><td>417 Expectation Failed</td><td>在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td></tr><tr><td>421 too many connections</td><td>从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td></tr><tr><td>422 Unprocessable Entity</td><td>请求格式正确，但是由于含有语义错误，无法响应。（<a href="https://tools.ietf.org/html/rfc4918" target="_blank" rel="noopener">RFC4918</a> WebDAV）</td></tr><tr><td>423 Locked</td><td>当前资源被锁定。（<a href="https://tools.ietf.org/html/rfc4918" target="_blank" rel="noopener">RFC4918</a> WebDAV）</td></tr><tr><td>424 Failed Dependency</td><td>由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（<a href="https://tools.ietf.org/html/rfc4918" target="_blank" rel="noopener">RFC4918</a> WebDAV）</td></tr><tr><td>425 Unordered Collection</td><td>在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（<a href="https://tools.ietf.org/html/rfc3658" target="_blank" rel="noopener">RFC3658</a>）中。</td></tr><tr><td>426 Upgrade Required</td><td>客户端应当切换到TLS/1.0。（<a href="https://tools.ietf.org/html/rfc2817" target="_blank" rel="noopener">RFC2817</a>）</td></tr><tr><td>449 Retry With</td><td>由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td></tr><tr><td>451 Unavailable For Legal Reasons</td><td>该请求因法律原因不可用。（<a href="https://tools.ietf.org/html/rfc7725" target="_blank" rel="noopener">RFC7725</a>）</td></tr></tbody></table><h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h2><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>500 Internal Server Error</td><td>请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td>501 Not Implemented</td><td>请求未完成。服务器不支持所请求的功能。</td></tr><tr><td>502 Bad Gateway</td><td>请求未完成。服务器从上游服务器收到一个无效的响应。</td></tr><tr><td>503 Service Unavailable</td><td>请求未完成。服务器临时过载或当机。</td></tr><tr><td>504 Gateway Timeout</td><td>网关超时。</td></tr><tr><td>505 HTTP Version Not Supported</td><td>服务器不支持请求中指明的HTTP协议版本。</td></tr><tr><td>506 Variant Also Negotiates</td><td>由《透明内容协商协议》（<a href="https://tools.ietf.org/html/rfc2295" target="_blank" rel="noopener">RFC2295</a>）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td></tr><tr><td>507 Insufficient Storage</td><td>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV（<a href="https://tools.ietf.org/html/rfc4918" target="_blank" rel="noopener">RFC4918</a>）</td></tr><tr><td>509 Bandwidth Limit Exceeded</td><td>服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</td></tr><tr><td>510 Not Extended</td><td>获取资源所需要的策略并没有被满足。（<a href="https://tools.ietf.org/html/rfc2774" target="_blank" rel="noopener">RFC2774</a>）</td></tr></tbody></table><h2 id="6xx-服务器错误"><a href="#6xx-服务器错误" class="headerlink" title="6xx: 服务器错误"></a>6xx: 服务器错误</h2><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>600 Unparseable Response Headers</td><td>源站没有返回响应头部，只返回实体内容</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装并使用新内核</title>
      <link href="/2018/08/19/centos-update-kernel/"/>
      <url>/2018/08/19/centos-update-kernel/</url>
      
        <content type="html"><![CDATA[<h2 id="安装最新稳定内核"><a href="#安装最新稳定内核" class="headerlink" title="安装最新稳定内核"></a>安装最新稳定内核</h2><p>首先通过命令<code>uname -r</code>查看当前系统的内核版本号，我的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.10.0-123.4.2.el7.x86_64</span><br></pre></td></tr></table></figure><p>安装<code>ELRepo</code>仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装最新稳定的内核版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum --enablerepo=elrepo-kernel install -y kernel-ml</span><br></pre></td></tr></table></figure><p>使用命令<code>rpm -qa | grep kernel</code>查看是否安装成功，我的系统显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kernel-ml-4.16.2-1.el7.elrepo.x86_64</span><br><span class="line">kernel-tools-libs-3.10.0-514.26.2.el7.x86_64</span><br><span class="line">kernel-tools-3.10.0-514.26.2.el7.x86_64</span><br><span class="line">kernel-3.10.0-123.4.2.el7.x86_64</span><br><span class="line">kernel-3.10.0-123.el7.x86_64</span><br><span class="line">kernel-3.10.0-514.26.2.el7.x86_64</span><br></pre></td></tr></table></figure><p>可以看到里面的kernel-ml-4.*，证明安装成功。</p><a id="more"></a><h2 id="设置启动顺序"><a href="#设置启动顺序" class="headerlink" title="设置启动顺序"></a>设置启动顺序</h2><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \<span class="string">'</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CentOS Linux (4.16.2-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux 7 Rescue 6f1c5ebde1e74d999138a767abf2ef2b (3.10.0-514.26.2.el7.x86_64)</span><br><span class="line">CentOS Linux (3.10.0-514.26.2.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-123.4.2.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux, with Linux 3.10.0-123.el7.x86_64</span><br><span class="line">CentOS Linux, with Linux 0-rescue-11264912be38456483e63dfd21d402f4</span><br></pre></td></tr></table></figure><p>可以看到排在最上面的就是最新的<code>4.*</code>的内核，从上往下序号依次是：0、1、2、3、4、5，看最新版本是在什么位置，然后通过下面命令设置启动顺序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub2-set-default 0</span><br></pre></td></tr></table></figure><p>最后重新系统，通过命令<code>uname -r</code>查看当前系统的内核版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.16.2-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码检查错误列表</title>
      <link href="/2018/08/14/test-checklist/"/>
      <url>/2018/08/14/test-checklist/</url>
      
        <content type="html"><![CDATA[<h2 id="数据引用错误"><a href="#数据引用错误" class="headerlink" title="数据引用错误"></a>数据引用错误</h2><ol><li>是否有引用的变量未赋值或未初始化？</li><li>下标的值是否在范围之内？</li><li>是否存在非整数下标？</li><li>是否存在虚调用？</li><li>当使用别名时属性是否正确？</li><li>记录和结构的属性是否匹配？</li><li>是否计算位串的地址？是否传递位串参数？</li><li>基础的存储属性是否正确？</li><li>跨过程的结构定义是否匹配？</li><li>索引或下标操作是否有“仅差一个”的错误？</li><li>继承需求是否得到满足？</li></ol><h2 id="运算错误"><a href="#运算错误" class="headerlink" title="运算错误"></a>运算错误</h2><ol><li>是否存在非算术变量间的运算？</li><li>是否存在混合模式的运算？</li><li>是否存在不同字长变量间的运算？</li><li>目标变量的大小是否小于赋值大小？</li><li>中间结果是否上溢或下溢？</li><li>是否存在被0除？</li><li>是否存在二进制的不精确度？</li><li>变量的值是否超过了有意义的范围？</li><li>操作符的优先顺序是否被正确理解？</li><li>整数除法是否正确？</li></ol><a id="more"></a><h2 id="数据声明错误"><a href="#数据声明错误" class="headerlink" title="数据声明错误"></a>数据声明错误</h2><ol><li>是否所有的变量都已声明？</li><li>默认的属性是否被正确理解？</li><li>数组和字符串的初始化是否正确？</li><li>变量是否赋予了正确的长度、类型和存储类？</li><li>初始化是否与存储类相一致？</li><li>是否有相似的变量名？</li></ol><h2 id="比较错误"><a href="#比较错误" class="headerlink" title="比较错误"></a>比较错误</h2><ol><li>是否存在不同类型变量间的比较？</li><li>是否存在混合模式的比较运算？</li><li>比较运算符是否正确？</li><li>布尔表达式是否正确？</li><li>比较运算是否与布尔表达式相混合？</li><li>是否存在二进制小数的比较？</li><li>操作符的优先顺序是否被正确理解？</li><li>编译器对布尔表达式的计算方式是否被正确理解？</li></ol><h2 id="控制流程错误"><a href="#控制流程错误" class="headerlink" title="控制流程错误"></a>控制流程错误</h2><ol><li>是否超出了多条分支路径？</li><li>是否每个循环都终止了？</li><li>是否每个程序都终止了？</li><li>是否存在由于入口条件不满足而跳过循环体？</li><li>可能的循环越界是否正确？</li><li>是否存在“仅差一个”的迭代错误？</li><li>DO/END语句是否匹配？</li><li>是否存在不能穷尽的判断？</li><li>输出信息中是否有文字或语法错误？</li></ol><h2 id="输入-输出错误"><a href="#输入-输出错误" class="headerlink" title="输入/输出错误"></a>输入/输出错误</h2><ol><li>文件属性是否正确？</li><li>OPEN语句是否正确？</li><li>I/O语句是否符合格式规范？</li><li>缓冲大小与记录大小是否匹配？</li><li>文件在使用前是否打开？</li><li>文件在使用后是否关闭？</li><li>文件结束条件是否被正确处理？</li><li>是否处理了I/O错误？</li></ol><h2 id="接口错误"><a href="#接口错误" class="headerlink" title="接口错误"></a>接口错误</h2><ol><li>形参的数量是否等于实参的数量？</li><li>形参的属性是否与实参的属性相匹配？</li><li>形参的量纲是否与实参的量纲相匹配？</li><li>传递给被调用模块的实参个数是否等于其形参个数？</li><li>传递给被调用模块的实参属性是否与其形参属性匹配？</li><li>传递给被调用模块的实参量纲是否与其形参量纲匹配？</li><li>调用内部函数的实参的数量、属性、顺序是否正确？</li><li>是否引用了与当前入口点无关的形参？</li><li>是否改变了某个原本仅为输入值的形参？</li><li>全局变量的定义在模块间是否一致？</li><li>常数是否以实参形式传递过？</li></ol><h2 id="其他检查"><a href="#其他检查" class="headerlink" title="其他检查"></a>其他检查</h2><ol><li>在交叉引用列表中是否存在未引用过的变量？</li><li>属性列表是否与预期的相一致？</li><li>是否存在“警告”或“提示”信息？</li><li>是否对输入的合法性进行了检查？</li><li>是否遗漏了某个功能？</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试的原则</title>
      <link href="/2018/08/14/test-principle/"/>
      <url>/2018/08/14/test-principle/</url>
      
        <content type="html"><![CDATA[<ol><li>测试用例中一个必需部分是对预期输出或结果进行定义</li><li>程序员应当避免测试自己编写的程序</li><li>编写软件的组织不应当测试自己编写的软件</li><li>应当彻底检查每个测试的执行结果</li><li>测试用例的编写不仅应当根据有效和预料到的输入情况，而且也应当根据无效和未预料到的输入情况</li><li>检查程序是否『未做其应该做的』仅是测试的一半，测试的另一半是检查程序是否『做了其不应该做的』</li><li>应避免测试用例用后即弃，除非软件本身就是一个一次性的软件</li><li>计划测试工作时不应默许假定不会发现错误</li><li>程序某部分存在更多错误的可能性，与该部分已发现错误的数量成正比</li><li>软件测试是一项极富创造性、极具智力挑战性的工作</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python rsa</title>
      <link href="/2018/08/11/python-rsa/"/>
      <url>/2018/08/11/python-rsa/</url>
      
        <content type="html"><![CDATA[<h2 id="生成RSA公钥、私钥"><a href="#生成RSA公钥、私钥" class="headerlink" title="生成RSA公钥、私钥"></a>生成RSA公钥、私钥</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">private_key = key.exportKey().decode()</span><br><span class="line">public_key = key.publickey().exportKey().decode()</span><br></pre></td></tr></table></figure><h2 id="签名与验签"><a href="#签名与验签" class="headerlink" title="签名与验签"></a>签名与验签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 签名</span></span><br><span class="line">h = SHA.new(message)</span><br><span class="line">signer = Signature.new(RSA.importKey(private_key))</span><br><span class="line">sign = base64.b64encode(signer.sign(h)).decode()</span><br><span class="line"><span class="comment"># 验签</span></span><br><span class="line">sign = base64.b64decode(sign)</span><br><span class="line">h = SHA.new(message)</span><br><span class="line">verifier = Signature.new(RSA.importKey(public_key))</span><br><span class="line">verify = verifier.verify(h, sign)</span><br></pre></td></tr></table></figure><h2 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加密</span></span><br><span class="line">cipher = Cipher.new(RSA.importKey(public_key))</span><br><span class="line">ciphertext = base64.b64encode(cipher.encrypt(message)).decode()</span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">ciphertext = base64.b64decode(ciphertext)</span><br><span class="line">sentinel = Random.new().read(SHA.digest_size)</span><br><span class="line">cipher = Cipher.new(RSA.importKey(private_key))</span><br><span class="line">message = cipher.decrypt(ciphertext, sentinel).decode()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下"></a>完整代码如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Cipher</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Signature</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RSAUtils</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_keys</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :return: private_key and public_key</span></span><br><span class="line"><span class="string">        :rtype: (str, str)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">        private_key = key.exportKey().decode()</span><br><span class="line">        public_key = key.publickey().exportKey().decode()</span><br><span class="line">        <span class="keyword">return</span> private_key, public_key</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(cls, message, private_key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type message: str | bytes</span></span><br><span class="line"><span class="string">        :type private_key: str | bytes</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(message, str):</span><br><span class="line">            message = message.encode()</span><br><span class="line">        h = SHA.new(message)</span><br><span class="line">        signer = Signature.new(RSA.importKey(private_key))</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(signer.sign(h)).decode()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(cls, message, sign, public_key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type message: str | bytes</span></span><br><span class="line"><span class="string">        :type sign: str | bytes</span></span><br><span class="line"><span class="string">        :type public_key: str | bytes</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(message, str):</span><br><span class="line">            message = message.encode()</span><br><span class="line">        sign = base64.b64decode(sign)</span><br><span class="line">        h = SHA.new(message)</span><br><span class="line">        verifier = Signature.new(RSA.importKey(public_key))</span><br><span class="line">        <span class="keyword">return</span> verifier.verify(h, sign)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(cls, message, public_key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type message: str | bytes</span></span><br><span class="line"><span class="string">        :type public_key: str | bytes</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(message, str):</span><br><span class="line">            message = message.encode()</span><br><span class="line">        cipher = Cipher.new(RSA.importKey(public_key))</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(cipher.encrypt(message)).decode()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cls, ciphertext, private_key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type ciphertext: str | bytes</span></span><br><span class="line"><span class="string">        :type private_key: str | bytes</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ciphertext = base64.b64decode(ciphertext)</span><br><span class="line">        sentinel = Random.new().read(SHA.digest_size)</span><br><span class="line">        cipher = Cipher.new(RSA.importKey(private_key))</span><br><span class="line">        <span class="keyword">return</span> cipher.decrypt(ciphertext, sentinel).decode()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置maven源</title>
      <link href="/2018/08/11/maven-mirror/"/>
      <url>/2018/08/11/maven-mirror/</url>
      
        <content type="html"><![CDATA[<p>打开<code>setting.xml</code>，在其中添加以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.aliyun.com<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven.aliyun.com<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行导出postgresql数据</title>
      <link href="/2018/08/11/postgresql-dump/"/>
      <url>/2018/08/11/postgresql-dump/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将your_db_name.table_name数据导出到文件db.backup.sql中</span></span><br><span class="line"><span class="comment"># pg_dump -U &lt;your_db_username&gt; -t &lt;table_name&gt; --inserts -f &lt;db.backup.sql&gt; -d &lt;your_db_name&gt;</span></span><br><span class="line">pg_dump -U postgres -t user --inserts -f user.sql -d demo</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>pg_dump详细参数如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">pg_dump dumps a database as a text file or to other formats.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  pg_dump [OPTION]... [DBNAME]</span><br><span class="line"></span><br><span class="line">General options:</span><br><span class="line">  -f, --file=FILENAME          output file or directory name</span><br><span class="line">  -F, --format=c|d|t|p         output file format (custom, directory, tar,</span><br><span class="line">                               plain text (default))</span><br><span class="line">  -j, --jobs=NUM               use this many parallel jobs to dump</span><br><span class="line">  -v, --verbose                verbose mode</span><br><span class="line">  -V, --version                output version information, then exit</span><br><span class="line">  -Z, --compress=0-9           compression level for compressed formats</span><br><span class="line">  --lock-wait-timeout=TIMEOUT  fail after waiting TIMEOUT for a table lock</span><br><span class="line">  -?, --help                   show this help, then exit</span><br><span class="line"></span><br><span class="line">Options controlling the output content:</span><br><span class="line">  -a, --data-only              dump only the data, not the schema</span><br><span class="line">  -b, --blobs                  include large objects in dump</span><br><span class="line">  -c, --clean                  clean (drop) database objects before recreating</span><br><span class="line">  -C, --create                 include commands to create database in dump</span><br><span class="line">  -E, --encoding=ENCODING      dump the data in encoding ENCODING</span><br><span class="line">  -n, --schema=SCHEMA          dump the named schema(s) only</span><br><span class="line">  -N, --exclude-schema=SCHEMA  do NOT dump the named schema(s)</span><br><span class="line">  -o, --oids                   include OIDs in dump</span><br><span class="line">  -O, --no-owner               skip restoration of object ownership in</span><br><span class="line">                               plain-text format</span><br><span class="line">  -s, --schema-only            dump only the schema, no data</span><br><span class="line">  -S, --superuser=NAME         superuser user name to use in plain-text format</span><br><span class="line">  -t, --table=TABLE            dump the named table(s) only</span><br><span class="line">  -T, --exclude-table=TABLE    do NOT dump the named table(s)</span><br><span class="line">  -x, --no-privileges          do not dump privileges (grant/revoke)</span><br><span class="line">  --binary-upgrade             for use by upgrade utilities only</span><br><span class="line">  --column-inserts             dump data as INSERT commands with column names</span><br><span class="line">  --disable-dollar-quoting     disable dollar quoting, use SQL standard quoting</span><br><span class="line">  --disable-triggers           disable triggers during data-only restore</span><br><span class="line">  --enable-row-security        enable row security (dump only content user has</span><br><span class="line">                               access to)</span><br><span class="line">  --exclude-table-data=TABLE   do NOT dump data for the named table(s)</span><br><span class="line">  --if-exists                  use IF EXISTS when dropping objects</span><br><span class="line">  --inserts                    dump data as INSERT commands, rather than COPY</span><br><span class="line">  --no-security-labels         do not dump security label assignments</span><br><span class="line">  --no-synchronized-snapshots  do not use synchronized snapshots in parallel jobs</span><br><span class="line">  --no-tablespaces             do not dump tablespace assignments</span><br><span class="line">  --no-unlogged-table-data     do not dump unlogged table data</span><br><span class="line">  --quote-all-identifiers      quote all identifiers, even if not key words</span><br><span class="line">  --section=SECTION            dump named section (pre-data, data, or post-data)</span><br><span class="line">  --serializable-deferrable    wait until the dump can run without anomalies</span><br><span class="line">  --snapshot=SNAPSHOT          use given snapshot for the dump</span><br><span class="line">  --strict-names               require table and/or schema include patterns to</span><br><span class="line">                               match at least one entity each</span><br><span class="line">  --use-set-session-authorization</span><br><span class="line">                               use SET SESSION AUTHORIZATION commands instead of</span><br><span class="line">                               ALTER OWNER commands to set ownership</span><br><span class="line"></span><br><span class="line">Connection options:</span><br><span class="line">  -d, --dbname=DBNAME      database to dump</span><br><span class="line">  -h, --host=HOSTNAME      database server host or socket directory</span><br><span class="line">  -p, --port=PORT          database server port number</span><br><span class="line">  -U, --username=NAME      connect as specified database user</span><br><span class="line">  -w, --no-password        never prompt for password</span><br><span class="line">  -W, --password           force password prompt (should happen automatically)</span><br><span class="line">  --role=ROLENAME          do SET ROLE before dump</span><br><span class="line"></span><br><span class="line">If no database name is supplied, then the PGDATABASE environment</span><br><span class="line">variable value is used.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular2多环境开发</title>
      <link href="/2018/08/11/amgular2-multi-envs/"/>
      <url>/2018/08/11/amgular2-multi-envs/</url>
      
        <content type="html"><![CDATA[<h2 id="配置环境变量文件"><a href="#配置环境变量文件" class="headerlink" title="配置环境变量文件"></a>配置环境变量文件</h2><p>假设需要配置一个新的环境<code>NAME</code>。</p><p>首先配置一个新环境的配置文件，配置文件是：<code>./src/environments/environment.NAME.ts</code>。</p><h2 id="设置-angular-cli-json文件"><a href="#设置-angular-cli-json文件" class="headerlink" title="设置.angular-cli.json文件"></a>设置<code>.angular-cli.json</code>文件</h2><p>在<code>.angular-cli.json</code>中的<code>apps[0].environments</code>下配置新的环境：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"NAME"</span>: <span class="string">"environment.NAME.ts"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h2><p>开发调试可以使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve --target=development --environment=NAME</span><br></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>开发完可以使用下面命令部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --target=production --environment=NAME</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>为了简化开发调试的命令，可以在<code>package.json</code>文件中的<code>scripts</code>下添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"NAME"</span>: <span class="string">"ng serve --target=development --environment=NAME"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在开发调试时可以使用命令：<code>npm run NAME</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Python中__all__的作用</title>
      <link href="/2018/08/05/python-all/"/>
      <url>/2018/08/05/python-all/</url>
      
        <content type="html"><![CDATA[<p>它是一个string元素组成的list变量，定义了当你使用<code>from &lt;module&gt; import *</code>导入某个模块的时候能导出的符号（这里代表变量，函数，类等）。</p><p>举个例子，下面的代码在 foo.py 中，明确的导出了符号 bar, baz：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">'bar'</span>, <span class="string">'baz'</span>]</span><br><span class="line"></span><br><span class="line">waz = <span class="number">5</span></span><br><span class="line">bar = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baz</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'baz'</span></span><br></pre></td></tr></table></figure><p>导入实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bar</span><br><span class="line"><span class="keyword">print</span> baz</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following will trigger an exception, as "waz" is not exported by the module</span></span><br><span class="line"><span class="comment"># 下面的代码就会抛出异常，因为 "waz"并没有从模块中导出，因为 __all__ 没有定义</span></span><br><span class="line"><span class="keyword">print</span> waz</span><br></pre></td></tr></table></figure><p>如果把<code>foo.py</code>中<code>__all__</code>给注释掉，那么上面的代码执行起来就不会有问题，<code>import *</code>默认的行为是从给定的命名空间导出所有的符号（当然下划线开头的私有变量除外）。</p><p>参考：<a href="https://docs.python.org/3.5/tutorial/modules.html#importing-from-a-package" target="_blank" rel="noopener">https://docs.python.org/3.5/tutorial/modules.html#importing-from-a-package</a></p><p><strong>注意：</strong>需要注意的是<code>__all__</code>只影响到了<code>from &lt;module&gt; import *</code>这种导入方式，对于<code>from &lt;module&gt; import &lt;member&gt;</code>导入方式并没有影响，仍然可以从外部导入。</p><p>转载自：<a href="https://stackoverflow.com/questions/44834/can-someone-explain-all-in-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/44834/can-someone-explain-all-in-python</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualenv</title>
      <link href="/2018/08/05/virtualenv/"/>
      <url>/2018/08/05/virtualenv/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-virtualenv</span><br></pre></td></tr></table></figure><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv my-env</span><br></pre></td></tr></table></figure><p>默认情况下，虚拟环境会依赖系统环境中的<code>site packages</code>，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数<code>--no-site-packages</code>建立虚拟环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages my-env</span><br></pre></td></tr></table></figure><h2 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> my-env/bin/activate</span><br></pre></td></tr></table></figure><h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyenv</title>
      <link href="/2018/08/05/pyenv/"/>
      <url>/2018/08/05/pyenv/</url>
      
        <content type="html"><![CDATA[<h2 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h2><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><p>然后在<code>~/.bashrc</code>或<code>~/.bash_profile</code>或<code>~/.profile</code>文件中添加以下文本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"~/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><p>执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv install 版本号</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="pyenv加速"><a href="#pyenv加速" class="headerlink" title="pyenv加速"></a>pyenv加速</h2><ol><li>先下载需要安装的版本到<code>~/.pyenv/cache/</code>目录下；</li><li>然后执行<code>pyenv install 版本号</code>安装对应的版本。</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="patch-command-not-found"><a href="#patch-command-not-found" class="headerlink" title="patch: command not found"></a>patch: command not found</h3><p><strong>详细情况如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv install 3.5.2</span><br><span class="line">Installing Python-3.5.2...</span><br><span class="line">/root/.pyenv/plugins/python-build/bin/python-build: line 1477: patch: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">BUILD FAILED (CentOS Linux 7 using python-build 20160602)</span><br><span class="line"></span><br><span class="line">Inspect or clean up the working tree at /tmp/python-build.20161126141738.1062</span><br><span class="line">Results logged to /tmp/python-build.20161126141738.1062.log</span><br><span class="line"></span><br><span class="line">Last 10 <span class="built_in">log</span> lines:</span><br><span class="line">/tmp/python-build.20161126141738.1062 ~</span><br><span class="line">/tmp/python-build.20161126141738.1062/Python-3.5.2 /tmp/python-build.20161126141738.1062 ~</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install -y patch  <span class="comment"># ubuntu</span></span><br><span class="line">$ yum install -y patch      <span class="comment"># centos/redhat</span></span><br></pre></td></tr></table></figure><h3 id="pip-8-1-1-requires-SSL-TLS"><a href="#pip-8-1-1-requires-SSL-TLS" class="headerlink" title="pip 8.1.1 requires SSL/TLS"></a>pip 8.1.1 requires SSL/TLS</h3><p><strong>详细情况如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv install 3.5.2</span><br><span class="line">Installing Python-3.5.2...</span><br><span class="line">patching file Lib/venv/scripts/posix/activate.fish</span><br><span class="line">WARNING: The Python bz2 extension was not compiled. Missing the bzip2 lib?</span><br><span class="line">WARNING: The Python readline extension was not compiled. Missing the GNU readline lib?</span><br><span class="line">ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?</span><br><span class="line"></span><br><span class="line">Please consult to the Wiki page to fix the problem.</span><br><span class="line">https://github.com/yyuu/pyenv/wiki/Common-build-problems</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BUILD FAILED (CentOS Linux 7 using python-build 20160602)</span><br><span class="line"></span><br><span class="line">Inspect or clean up the working tree at /tmp/python-build.20161126142627.2850</span><br><span class="line">Results logged to /tmp/python-build.20161126142627.2850.log</span><br><span class="line"></span><br><span class="line">Last 10 <span class="built_in">log</span> lines:</span><br><span class="line">(<span class="built_in">cd</span> /root/.pyenv/versions/3.5.2/share/man/man1; ln -s python3.5.1 python3.1)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="string">"xupgrade"</span> != <span class="string">"xno"</span>  ; <span class="keyword">then</span> \</span><br><span class="line">    <span class="keyword">case</span> upgrade <span class="keyword">in</span> \</span><br><span class="line">        upgrade) ensurepip=<span class="string">"--upgrade"</span> ;; \</span><br><span class="line">        install|*) ensurepip=<span class="string">""</span> ;; \</span><br><span class="line">    <span class="keyword">esac</span>; \</span><br><span class="line">     ./python -E -m ensurepip \</span><br><span class="line">        <span class="variable">$ensurepip</span> --root=/ ; \</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">Ignoring ensurepip failure: pip 8.1.1 requires SSL/TLS</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openssl-devel  <span class="comment"># centos/redhat</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python分发包</title>
      <link href="/2018/08/05/python-packages/"/>
      <url>/2018/08/05/python-packages/</url>
      
        <content type="html"><![CDATA[<h2 id="创建Python项目"><a href="#创建Python项目" class="headerlink" title="创建Python项目"></a>创建Python项目</h2><p>创建一个简单Python项目，在项目中添加文件<code>setup.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"><span class="keyword">from</span> setuptools.command.install <span class="keyword">import</span> install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2.0.dev1  # Development release</span></span><br><span class="line"><span class="comment"># 1.2.0a1     # Alpha Release</span></span><br><span class="line"><span class="comment"># 1.2.0b1     # Beta Release</span></span><br><span class="line"><span class="comment"># 1.2.0rc1    # Release Candidate</span></span><br><span class="line"><span class="comment"># 1.2.0       # Final Release</span></span><br><span class="line"><span class="comment"># 1.2.0.post1 # Post Release</span></span><br><span class="line"><span class="comment"># 15.10       # Date based release</span></span><br><span class="line"><span class="comment"># 23          # Serial release</span></span><br><span class="line">VERSION = <span class="string">'0.0.1a1'</span></span><br><span class="line">PATH = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># When the project is installed by pip, this is the specification that is used to install its dependencies.</span></span><br><span class="line">install_requires = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(fname)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(os.path.join(PATH, fname)).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInstallCommand</span><span class="params">(install)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    <span class="comment"># This is the name of your project, determining how your project is listed on PyPI.</span></span><br><span class="line">    name=<span class="string">'sample'</span>,</span><br><span class="line">    version=VERSION,</span><br><span class="line">    <span class="comment"># Give a short and long description for your project. These values will be displayed on PyPI if you publish your project.</span></span><br><span class="line">    description=<span class="string">''</span>,</span><br><span class="line">    long_description=read(<span class="string">'README.md'</span>),</span><br><span class="line">    <span class="comment"># Give a homepage URL for your project.</span></span><br><span class="line">    url=<span class="string">''</span>,</span><br><span class="line">    <span class="comment"># Provide details about the author.</span></span><br><span class="line">    author=<span class="string">''</span>,</span><br><span class="line">    author_email=<span class="string">''</span>,</span><br><span class="line">    license=<span class="string">'MIT'</span>,</span><br><span class="line">    <span class="comment"># List keywords that describe your project.</span></span><br><span class="line">    keywords=<span class="string">''</span>,</span><br><span class="line">    <span class="comment"># List additional relevant URLs about your project.</span></span><br><span class="line">    project_urls=[],</span><br><span class="line">    packages=find_packages(exclude=[<span class="string">'docs'</span>, <span class="string">'tests*'</span>, <span class="string">'example'</span>]),</span><br><span class="line">    install_requires=install_requires,</span><br><span class="line">    <span class="comment"># If your project only runs on certain Python versions, setting the `python_requires` argument.</span></span><br><span class="line">    python_requires=<span class="string">'&gt;=3'</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="comment"># How mature is this project? Common values are</span></span><br><span class="line">        <span class="comment">#   3 - Alpha</span></span><br><span class="line">        <span class="comment">#   4 - Beta</span></span><br><span class="line">        <span class="comment">#   5 - Production/Stable</span></span><br><span class="line">        <span class="string">'Development Status :: 3 - Alpha'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Indicate who your project is intended for</span></span><br><span class="line">        <span class="string">'Intended Audience :: Developers'</span>,</span><br><span class="line">        <span class="string">'Topic :: Software Development :: Build Tools'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pick your license as you wish (should match "license" above)</span></span><br><span class="line">        <span class="string">'License :: OSI Approved :: MIT License'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Specify the Python versions you support here. In particular, ensure</span></span><br><span class="line">        <span class="comment"># that you indicate whether you support Python 2, Python 3 or both.</span></span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.2'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.3'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.4'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.5'</span>,</span><br><span class="line">    ],</span><br><span class="line">    entry_points=&#123;</span><br><span class="line">        <span class="comment"># You can then let the toolchain handle the work of turning these interfaces into actual scripts.</span></span><br><span class="line">        <span class="string">'console_scripts'</span>: [</span><br><span class="line">            <span class="string">'sample=sample:main'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    cmd_class=&#123;</span><br><span class="line">        <span class="string">'install'</span>: PostInstallCommand,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其中<code>setup()</code>的具体参数详见：<a href="https://packaging.python.org/tutorials/distributing-packages/#setup-args" target="_blank" rel="noopener">setup-args</a>和<a href="https://setuptools.readthedocs.io/en/latest/setuptools.html" target="_blank" rel="noopener">setuptools</a>。</p><a id="more"></a><h2 id="创建-pypirc文件"><a href="#创建-pypirc文件" class="headerlink" title="创建~/.pypirc文件"></a>创建<code>~/.pypirc</code>文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers =</span><br><span class="line">    pypi</span><br><span class="line">    myrepo</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">username: username</span><br><span class="line">password: password</span><br><span class="line"></span><br><span class="line">[myrepo]</span><br><span class="line">repository: https://pypi.myrepo.com/</span><br><span class="line">username: username</span><br><span class="line">password: password</span><br></pre></td></tr></table></figure><p><code>.pypirc</code>文件的具体配置参数详见：<a href="https://docs.python.org/3.5/distutils/packageindex.html#the-pypirc-file" target="_blank" rel="noopener">pypirc-file</a>。</p><h2 id="打包并上传"><a href="#打包并上传" class="headerlink" title="打包并上传"></a>打包并上传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install -U setuptools twine wheel</span><br><span class="line">python setup.py sdist bdist_wheel</span><br><span class="line">twine upload dist/*     <span class="comment"># 将分发包上传到默认服务器上，默认是`pypi`</span></span><br><span class="line">twine upload -r myrepo dist/*   <span class="comment"># 将分发包上传到指定服务器上</span></span><br></pre></td></tr></table></figure><p>其中<code>twine</code>的具体参数详见：<a href="https://pypi.python.org/pypi/twine" target="_blank" rel="noopener">twine</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展JSONEncoder</title>
      <link href="/2018/08/02/python-jsonencoder/"/>
      <url>/2018/08/02/python-jsonencoder/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.uid = uuid.uuid1()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'uid'</span>: self.uid.hex,</span><br><span class="line">            <span class="string">'name'</span>: self.name,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJSONEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, o)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(o, MyClass):</span><br><span class="line">            <span class="comment"># 返回一个可json化的数据，可以是任何类型的数据，只要它最终能转化为基础类型即可</span></span><br><span class="line">            <span class="keyword">return</span> o.info()</span><br><span class="line">        <span class="comment"># 最后调用父类的default函数，最终会调用基类的default函数</span></span><br><span class="line">        <span class="keyword">return</span> super(MyJSONEncoder, self).default(o)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code自定义代码片段</title>
      <link href="/2018/08/02/vscode-snippets/"/>
      <url>/2018/08/02/vscode-snippets/</url>
      
        <content type="html"><![CDATA[<h2 id="打开代码片段的设置文件"><a href="#打开代码片段的设置文件" class="headerlink" title="打开代码片段的设置文件"></a>打开代码片段的设置文件</h2><ol><li>打开命令面板</li><li>输入<code>Snippets</code>，选择<code>Preferences: Open User Snippets</code></li><li>选择想要自定义代码片段的语言</li></ol><h2 id="设置代码片段"><a href="#设置代码片段" class="headerlink" title="设置代码片段"></a>设置代码片段</h2><p>具体设置可以参考以下说明：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // Place your snippets for Batch here. Each snippet is defined under a snippet name and has a prefix, body and</span></span><br><span class="line"><span class="comment">    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line"><span class="comment">    // $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the</span></span><br><span class="line"><span class="comment">    // same ids are connected.</span></span><br><span class="line"><span class="comment">    // Example:</span></span><br><span class="line"><span class="comment">    "Print to console": &#123;</span></span><br><span class="line"><span class="comment">        "prefix": "log",</span></span><br><span class="line"><span class="comment">        "body": [</span></span><br><span class="line"><span class="comment">            "console.log('$1');",</span></span><br><span class="line"><span class="comment">            "$2"</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        "description": "Log output to console"</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以其他用户身份运行shell命令的几种方式</title>
      <link href="/2018/08/02/shell-execute/"/>
      <url>/2018/08/02/shell-execute/</url>
      
        <content type="html"><![CDATA[<h2 id="以ROOT用户身份运行"><a href="#以ROOT用户身份运行" class="headerlink" title="以ROOT用户身份运行"></a>以ROOT用户身份运行</h2><p>使用<code>sudo</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">command</span></span><br></pre></td></tr></table></figure><h2 id="以命令所有者的身份运行"><a href="#以命令所有者的身份运行" class="headerlink" title="以命令所有者的身份运行"></a>以命令所有者的身份运行</h2><p><strong>首先以命令所有者的身份修改命令的权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+s <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p><strong>当其他用户执行<code>command</code>命令时，会以命令所有者的身份运行该命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="comment"># 查看运行状态</span></span><br><span class="line">ps aux | grep <span class="built_in">command</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vi-Vim快捷键键位图</title>
      <link href="/2018/08/02/vi-vim-tutorial/"/>
      <url>/2018/08/02/vi-vim-tutorial/</url>
      
        <content type="html"><![CDATA[<h2 id="完整键位图"><a href="#完整键位图" class="headerlink" title="完整键位图"></a>完整键位图</h2><p><img src="/images/vi-vim-cheat-sheet.svg" alt></p><a id="more"></a><h2 id="分步键位图"><a href="#分步键位图" class="headerlink" title="分步键位图"></a>分步键位图</h2><p><img src="/images/vi-vim-tutorial-1.svg" alt></p><p><img src="/images/vi-vim-tutorial-2.svg" alt></p><p><img src="/images/vi-vim-tutorial-3.svg" alt></p><p><img src="/images/vi-vim-tutorial-4.svg" alt></p><p><img src="/images/vi-vim-tutorial-5.svg" alt></p><p><img src="/images/vi-vim-tutorial-6.svg" alt></p><p><img src="/images/vi-vim-tutorial-7.svg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装PostgreSQL</title>
      <link href="/2018/07/28/postgresql-install/"/>
      <url>/2018/07/28/postgresql-install/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu14-04上安装"><a href="#Ubuntu14-04上安装" class="headerlink" title="Ubuntu14.04上安装"></a>Ubuntu14.04上安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main'</span> &gt; /etc/apt/sources.list.d/pgdg.list</span><br><span class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y postgresql-9.4</span><br></pre></td></tr></table></figure><h3 id="修改为远程登录"><a href="#修改为远程登录" class="headerlink" title="修改为远程登录"></a>修改为远程登录</h3><p>修改文件<code>/etc/postgresql/9.4/main/postgresql.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-#listen_addresses = &apos;localhost&apos;</span><br><span class="line">+listen_addresses = &apos;*&apos;</span><br><span class="line">-#password_encryption = on</span><br><span class="line">+password_encryption = on</span><br></pre></td></tr></table></figure><h3 id="修改访问地址"><a href="#修改访问地址" class="headerlink" title="修改访问地址"></a>修改访问地址</h3><p>修改文件<code>/etc/postgresql/9.4/main/pg_hba.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+host    all             all             10.0.0.0/8              trust</span><br><span class="line">+host    all             all             172.16.0.0/12           trust</span><br><span class="line">+host    all             all             192.168.0.0/16          trust</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="CentOS7上安装"><a href="#CentOS7上安装" class="headerlink" title="CentOS7上安装"></a>CentOS7上安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install http://yum.postgresql.org/9.5/redhat/rhel-7-x86_64/pgdg-redhat95-9.5-2.noarch.rpm</span><br><span class="line">yum install -y postgresql95 postgresql95-server postgresql95-libs postgresql95-contrib postgresql95-devel</span><br><span class="line">/usr/pgsql-9.5/bin/postgresql95-setup initdb</span><br><span class="line">systemctl <span class="built_in">enable</span> postgresql-9.5.service</span><br><span class="line">systemctl start postgresql-9.5.service</span><br></pre></td></tr></table></figure><p>如果需要postgis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y postgis2_95 postgis2_95-client</span><br></pre></td></tr></table></figure><h3 id="修改为远程登录-1"><a href="#修改为远程登录-1" class="headerlink" title="修改为远程登录"></a>修改为远程登录</h3><p>修改文件<code>/var/lib/pgsql/9.4/data/postgresql.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-#listen_addresses = &apos;localhost&apos;</span><br><span class="line">+listen_addresses = &apos;*&apos;</span><br><span class="line">-#password_encryption = on</span><br><span class="line">+password_encryption = on</span><br></pre></td></tr></table></figure><h3 id="修改访问地址-1"><a href="#修改访问地址-1" class="headerlink" title="修改访问地址"></a>修改访问地址</h3><p>修改文件<code>/var/lib/pgsql/9.4/data/pg_hba.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+host    all             all             10.0.0.0/8              trust</span><br><span class="line">+host    all             all             172.16.0.0/12           trust</span><br><span class="line">+host    all             all             192.168.0.0/16          trust</span><br></pre></td></tr></table></figure><h2 id="DebianJessie上安装"><a href="#DebianJessie上安装" class="headerlink" title="DebianJessie上安装"></a>DebianJessie上安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main'</span> &gt; /etc/apt/sources.list.d/pgdg.list</span><br><span class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y postgresql-9.4</span><br></pre></td></tr></table></figure><h3 id="修改为远程登录-2"><a href="#修改为远程登录-2" class="headerlink" title="修改为远程登录"></a>修改为远程登录</h3><p>修改文件<code>/etc/postgresql/9.4/main/postgresql.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-#listen_addresses = &apos;localhost&apos;</span><br><span class="line">+listen_addresses = &apos;*&apos;</span><br><span class="line">-#password_encryption = on</span><br><span class="line">+password_encryption = on</span><br></pre></td></tr></table></figure><h3 id="修改访问地址-2"><a href="#修改访问地址-2" class="headerlink" title="修改访问地址"></a>修改访问地址</h3><p>修改文件<code>/etc/postgresql/9.4/main/pg_hba.conf</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+host    all             all             10.0.0.0/8              trust</span><br><span class="line">+host    all             all             172.16.0.0/12           trust</span><br><span class="line">+host    all             all             192.168.0.0/16          trust</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Angular2 Project in Docker</title>
      <link href="/2018/07/28/docker-angular2/"/>
      <url>/2018/07/28/docker-angular2/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>本文主要讲解怎么在Docker中部署<a href="https://angular.io/" target="_blank" rel="noopener">Angular2</a>项目，当然，该Angular2项目是由<a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">angular-cli</a>创建的项目。</p><ol><li>安装<code>docker</code>服务，参考<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Install Docker</a>；</li><li>安装<code>docker-compose</code>工具，参考<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Install Docker Compose</a>；</li><li>拉取镜像<code>node:6-alpine</code>。</li></ol><h2 id="部署Angular2项目"><a href="#部署Angular2项目" class="headerlink" title="部署Angular2项目"></a>部署Angular2项目</h2><h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写<code>Dockerfile</code>文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">6</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g @angular/cli http-server \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ng build -prod \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp dist/index.html dist/404.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"http-server"</span>, <span class="string">"/app/dist"</span>, <span class="string">"-p"</span>, <span class="string">"80"</span>]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="编写docker-compose-yaml文件"><a href="#编写docker-compose-yaml文件" class="headerlink" title="编写docker-compose.yaml文件"></a>编写<code>docker-compose.yaml</code>文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">        <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br></pre></td></tr></table></figure><h3 id="编译并运行项目"><a href="#编译并运行项目" class="headerlink" title="编译并运行项目"></a>编译并运行项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Vue Project in Docker</title>
      <link href="/2018/07/28/docker-vuejs/"/>
      <url>/2018/07/28/docker-vuejs/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>本文讲述怎么在Docker中部署<a href="https://vuejs.org/" target="_blank" rel="noopener">vuejs</a>项目，该项目使用<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vue-cli</a>创建项目。</p><ol><li>安装docker服务，参考<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Install Docker</a>；</li><li>安装docker-compose工具，参考<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Install Docker Compose</a>；</li><li>拉取镜像node:6-alpine。</li></ol><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line">vue init webpack myproject</span><br></pre></td></tr></table></figure><h2 id="部署vuejs项目"><a href="#部署vuejs项目" class="headerlink" title="部署vuejs项目"></a>部署vuejs项目</h2><h3 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写<code>Dockerfile</code>文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">6</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g http-server \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ng build \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp dist/index.html dist/404.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"http-server"</span>, <span class="string">"/app/dist"</span>, <span class="string">"-p"</span>, <span class="string">"80"</span>]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="编写docker-compose-yaml文件"><a href="#编写docker-compose-yaml文件" class="headerlink" title="编写docker-compose.yaml文件"></a>编写<code>docker-compose.yaml</code>文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">        <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在alpine容器中使用定时任务</title>
      <link href="/2018/07/25/alpine-crond/"/>
      <url>/2018/07/25/alpine-crond/</url>
      
        <content type="html"><![CDATA[<p>首先alpine内嵌的是BusyBox，使用alpine的crontab实际就是使用BusyBox的crond服务。</p><p>配置文件的位置：<code>/var/spool/cron/crontabs/root</code>，原始内容是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># do daily/weekly/monthly maintenance</span><br><span class="line"># min   hour    day     month   weekday command</span><br><span class="line">*/15    *       *       *       *       run-parts /etc/periodic/15min</span><br><span class="line">0       *       *       *       *       run-parts /etc/periodic/hourly</span><br><span class="line">0       2       *       *       *       run-parts /etc/periodic/daily</span><br><span class="line">0       3       *       *       6       run-parts /etc/periodic/weekly</span><br><span class="line">0       5       1       *       *       run-parts /etc/periodic/monthly</span><br></pre></td></tr></table></figure><p>可以在后面添加自己的定时任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># do daily/weekly/monthly maintenance</span><br><span class="line"># min   hour    day     month   weekday command</span><br><span class="line">*/15    *       *       *       *       run-parts /etc/periodic/15min</span><br><span class="line">0       *       *       *       *       run-parts /etc/periodic/hourly</span><br><span class="line">0       2       *       *       *       run-parts /etc/periodic/daily</span><br><span class="line">0       3       *       *       6       run-parts /etc/periodic/weekly</span><br><span class="line">0       5       1       *       *       run-parts /etc/periodic/monthly</span><br><span class="line">*       *       *       *       *       echo &apos;test&apos;</span><br></pre></td></tr></table></figure><p><strong>使用docker-compose部署定时任务</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">crond:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">alpine:3.4</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./crontabs/root:/var/spool/cron/crontabs/root</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">crond</span> <span class="string">-f</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker部署项目</title>
      <link href="/2018/07/25/docker-deploy-project/"/>
      <url>/2018/07/25/docker-deploy-project/</url>
      
        <content type="html"><![CDATA[<h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proj/</span><br><span class="line">    |-.docker/</span><br><span class="line">        |-Dockerfile</span><br><span class="line">        |-docker-compose.yaml</span><br><span class="line">    |-.env</span><br></pre></td></tr></table></figure><h2 id="Dockerfile文件编写"><a href="#Dockerfile文件编写" class="headerlink" title="Dockerfile文件编写"></a>Dockerfile文件编写</h2><ol><li><p>【必须】选择一个合适的镜像，参考<code>FROM</code>命令。</p></li><li><p>【可选】安装项目依赖，<strong>项目依赖一定要在前面进行安装</strong>。</p><ol><li><p>【必须】将配置依赖的配置文件拷贝到响应目录下，参考<code>COPY</code>命令。</p></li><li><p>【必须】设置工作目录，参考<code>WORKDIR</code>命令。</p></li><li><p>【必须】安装项目依赖，参考<code>RUN</code>命令。</p></li></ol></li><li><p>【可选】设置docker build参数，参考<code>ARG</code>命令。</p></li><li><p>【必须】将项目代码拷贝到响应目录，参考<code>ADD</code>命令。</p></li><li><p>【必须】设置工作目录，如果2没有执行的话，参考<code>WORKDIR</code>命令。</p></li><li><p>【可选】编译项目，如果必须的话，参考<code>RUN</code>命令。</p></li><li><p>【可选】设置挂载目录，如果必须的话，参考<code>VOLUME</code>命令。</p></li><li><p>【必须】设置需要暴露的端口号，参考<code>EXPOSE</code>命令。</p></li><li><p>【必须】设置服务启动时运行的命令，参考<code>CMD</code>命令。</p></li></ol><a id="more"></a><p><strong>示例1：一个Python项目的示例</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.5</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /app/requirements.txt</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python"</span>, <span class="string">"manage.py"</span>, <span class="string">"runserver"</span>, <span class="string">"0.0.0.0:8000"</span>]</span></span><br></pre></td></tr></table></figure><p><strong>示例2：一个Angular2项目的示例</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">6</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json /app/package.json</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g @angular/cli http-server \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ng build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"http-server"</span>, <span class="string">"/app/dist"</span>, <span class="string">"-p"</span>, <span class="string">"80"</span>]</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose-yaml文件编写"><a href="#docker-compose-yaml文件编写" class="headerlink" title="docker-compose.yaml文件编写"></a>docker-compose.yaml文件编写</h2><ol><li><p>【必须】设置compose文件的版本，参数<code>version</code>。</p></li><li><p>【必须】设置服务列表，下面可以有多个服务，参数<code>services</code>。</p></li><li><p>【必须】设置服务名，服务名即是参数名。</p></li><li><p>【必须】设置build相关参数，参数<code>build</code>。</p><ol><li><p>【必须】设置Dockerfile文件的位置，参数<code>context</code>。</p></li><li><p>【可选】设置Dockerfile的文件名，如果文件就是<code>Dockerfile</code>可不设置，参数<code>dockerfile</code>。</p></li><li><p>【可选】设置编译时需要的参数列表，至少设置一个参数，否则不设置，参数<code>args</code>。</p><p> 冒号分隔，冒号前是参数名，后面是参数值。</p></li></ol></li><li><p>【必须】设置镜像名称，参数<code>image</code>。</p></li><li><p>【可选】设置依赖的服务列表，服务名参考第3步设置。参数<code>depends_on</code>。</p></li><li><p>【必须】设置绑定的端口号，参数<code>ports</code>。</p><p> 冒号分隔，冒号前面是宿主机的端口，冒号后面是docker容器的端口。 容器的端口后面也可以指定协议，如：<code>8000:8000</code>、<code>53:53/tcp</code>、<code>53:53/udp</code>。</p></li><li><p>【必须】设置服务意外停止时重启设置，参数<code>restart</code>。</p></li><li><p>【可选】如果不实用镜像自带命令，可在这设置启动服务运行的命令，参数<code>command</code>。</p></li><li><p>【可选】设置服务运行时需要环境变量配置文件，参数<code>env_file</code>。</p></li><li><p>【可选】设置挂载列表，可以将文件或文件夹挂载到容器中，参数<code>volumes</code>。</p><p>冒号分隔，前面是宿主机文件/文件夹，后面是容器里面的文件/文件夹。</p></li></ol><p><strong>示例</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">build:</span></span><br><span class="line">            <span class="attr">context:</span> <span class="string">..</span></span><br><span class="line">            <span class="attr">dockerfile:</span> <span class="string">.docker/Dockerfile</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">                <span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">cloud</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8000</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">env_file:</span> <span class="string">./environment-d</span></span><br><span class="line">    <span class="attr">memcached:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">memcached:latest</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h2 id="env文件编写"><a href="#env文件编写" class="headerlink" title=".env文件编写"></a>.env文件编写</h2><ol><li>【必须】设置COMPOSE_PROJECT_NAME。</li></ol><p><strong>示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMPOSE_PROJECT_NAME=cloud</span><br></pre></td></tr></table></figure><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署时执行</span></span><br><span class="line">docker-compose -f .docker/docker-compose.yaml up -d --build</span><br><span class="line"><span class="comment"># 重启时执行</span></span><br><span class="line">docker-compose -f .docker/docker-compose.yaml restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying pypiserver in Docker</title>
      <link href="/2018/07/25/docker-pypiserver/"/>
      <url>/2018/07/25/docker-pypiserver/</url>
      
        <content type="html"><![CDATA[<p><strong>配置<code>docker-compose.yaml</code>文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">pypi:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hypc/pypi:1.3.1-alpine</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/srv/pypi:/srv/pypi</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PYPI_PORT=80</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">FALLBACK_URL=https://mirrors.aliyun.com/pypi/simple/</span></span><br></pre></td></tr></table></figure><p><strong>运行服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js添加月份</title>
      <link href="/2018/07/25/js-add-month/"/>
      <url>/2018/07/25/js-add-month/</url>
      
        <content type="html"><![CDATA[<h2 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isLeapYear = <span class="function"><span class="keyword">function</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addMonths = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> DAYS_IN_MONTH = [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">date, m</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n = date.getFullYear() * <span class="number">12</span> + date.getMonth();</span><br><span class="line">        n += m;</span><br><span class="line">        <span class="keyword">var</span> ryear = <span class="built_in">parseInt</span>(n / <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">var</span> rmonth = n % <span class="number">12</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> rday = date.getDate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> days_in_month = DAYS_IN_MONTH[isLeapYear(date.getFullYear()) ? <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (rday &gt; days_in_month[rmonth])&#123;</span><br><span class="line">            rday = days_in_month[rmonth];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(ryear, rmonth - <span class="number">1</span>, rday);</span><br><span class="line">        d.setHours(date.getHours());</span><br><span class="line">        d.setMinutes(date.getMinutes());</span><br><span class="line">        d.setSeconds(date.getSeconds());</span><br><span class="line">        d.setMilliseconds(date.getMilliseconds());</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.isLeapYear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="keyword">this</span>.getFullYear();</span><br><span class="line">    <span class="keyword">return</span> (year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.addMonths = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> DAYS_IN_MONTH = [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> n = self.getFullYear() * <span class="number">12</span> + self.getMonth();</span><br><span class="line">        n += m;</span><br><span class="line">        <span class="keyword">var</span> ryear = <span class="built_in">parseInt</span>(n / <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">var</span> rmonth = n % <span class="number">12</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> rday = self.getDate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> days_in_month = DAYS_IN_MONTH[self.isLeapYear() ? <span class="number">1</span> : <span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (rday &gt; days_in_month[rmonth])&#123;</span><br><span class="line">            rday = days_in_month[rmonth];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(ryear, rmonth - <span class="number">1</span>, rday);</span><br><span class="line">        d.setHours(self.getHours());</span><br><span class="line">        d.setMinutes(self.getMinutes());</span><br><span class="line">        d.setSeconds(self.getSeconds());</span><br><span class="line">        d.setMilliseconds(self.getMilliseconds());</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery的建议</title>
      <link href="/2018/07/25/python-celery-tips/"/>
      <url>/2018/07/25/python-celery-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="按业务场景划分队列"><a href="#按业务场景划分队列" class="headerlink" title="按业务场景划分队列"></a>按业务场景划分队列</h2><p>一定一定要更具业务特点来划分出不同的队列，不能将所有的任务都让同一队列消费。在实际使用异步任务的场景中，一定会有优先级不高的任务（如统计类）和优先级特别高的任务（如微信红包）。若不划分队列，那么当统计类的异步任务很多很多的时候，发送红包给微信用户的异步任务就要等待一段时间才能被执行到（任务多可能会等待十几分钟甚至一两个小时），这对用户体验来说是非常不友好的。此时就可以将队列划分为<code>low</code>，<code>middle</code>，<code>high</code>这几种队列，对于统计类的这些任务可以扔去<code>low</code>的队列中，而对于发送红包这种重要的任务就扔去<code>high</code>队列中，确保尽可能快的被执行到。具体划分，需要更加业务场景来划分。</p><p>通过<code>-Q</code>参数来指定队列名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A proj worker -l info -Q low,middle,high</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line"><span class="meta">@app.task(bind=True, queue='middle', name='send_wx_text')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_wx_text</span><span class="params">(self, target_origin_id, to_user, txt)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">send_wx_text.apply_async((target_origin_id, to_user, txt), queue=<span class="string">'middle'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="对任务返回结果的处理"><a href="#对任务返回结果的处理" class="headerlink" title="对任务返回结果的处理"></a>对任务返回结果的处理</h2><p>大部分异步任务都是不需要关心处理结果的，此时不需要将处理结果返回。由于返回处理结果，需要存储，这意味着有IO操作，会降低性能，若将结果存储在redis或者RabbitMQ中，随着任务数的增加，消耗的内存也会增加（曾经因为这个原因爆过内存…..）。若非要存储结果，也要设置好结果的保存时间，以免内存泄漏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置结果的保存时间</span></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">10</span>*<span class="number">60</span></span><br><span class="line"><span class="comment"># 设置默认不存结果</span></span><br><span class="line">CELERY_IGNORE_RESULT = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务单独指定, 会覆盖全局配置</span></span><br><span class="line"><span class="meta">@app.task(bind=True, ignore_result=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_wx_text</span><span class="params">(self, target_origin_id, to_user, txt)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="小心使用gevent"><a href="#小心使用gevent" class="headerlink" title="小心使用gevent"></a>小心使用gevent</h2><p>利用gevent来部署worker，若task使用了那些不支持gevent的库（例如requests的普通模式），会使异步变同步，极其影响性能。这一点对于其它的协程库也是一样的例如eventlet。</p><h2 id="对失败进行重试处理"><a href="#对失败进行重试处理" class="headerlink" title="对失败进行重试处理"></a>对失败进行重试处理</h2><ul><li>明确哪些失败或错误是需要重试的，不要无条件的重试</li><li>设定最大重试次数(<code>max_retries</code>)，避免无限重试</li><li>重试的延时最好是更具重试次数进行增量延时，给更多的时间让等待服务恢复正常，以提高成功率</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backoff</span><span class="params">(attempts)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    1, 2, 4, 8, 16, 32, ...</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> ** attempts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置max_retries， 限定重试次数</span></span><br><span class="line"><span class="meta">@app.task(bind=True, max_retries=3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_wx_text</span><span class="params">(self, target_origin_id, to_user, txt)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r, err = wx_api.send_text(to_user, txt)</span><br><span class="line">        <span class="keyword">if</span> err <span class="keyword">and</span> int(err.code) <span class="keyword">in</span> (<span class="number">45047</span>):</span><br><span class="line">            <span class="comment"># 更具重试次数增加重试的延时的时间</span></span><br><span class="line">            <span class="keyword">raise</span> self.retry(args=[target_origin_id, to_user, txt],</span><br><span class="line">                             countdown=backoff(self.request.tretries))</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><h2 id="尽快失败而不阻塞"><a href="#尽快失败而不阻塞" class="headerlink" title="尽快失败而不阻塞"></a>尽快失败而不阻塞</h2><p>对于一些爬虫类的异步任务，我们常常是使用代理去爬，一般来说代理服务商提供的代理能用的概率比较低，容易导致timeout，对于这些可能会失败的任务应该尽快让它失败而不是在等待它失败，避免做无畏的等待，进而提高性能。预估一下任务的正常处理时间，根据这个时间来规定一个任务的最大执行时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.task(bind=True, max_retries=3, soft_time_limit=5)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_wx_text</span><span class="params">(self, target_origin_id, to_user, txt)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="对任务进行通用处理"><a href="#对任务进行通用处理" class="headerlink" title="对任务进行通用处理"></a>对任务进行通用处理</h2><p>任务失败或者重试，一般来说是需要进行记录，若每一个任务都写一遍相关的代码，这非常麻烦。此时，通过执行任务的base参数对任务进行统一处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myproject.tasks <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体的可以看看Task类中的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseTask</span><span class="params">(app.Task)</span>:</span></span><br><span class="line">    abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_retry</span><span class="params">(self, exc, task_id, args, kwargs, einfo)</span>:</span></span><br><span class="line">        sentrycli.captureException(exc)</span><br><span class="line">        super(BaseTask, self).on_retry(exc, task_id, args, kwargs, einfo)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_failure</span><span class="params">(self, exc, task_id, args, kwargs, einfo)</span>:</span></span><br><span class="line">        sentrycli.captureException(exc)</span><br><span class="line">        super(BaseTask, self).on_failure(exc, task_id, args, kwargs, einfo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(bind=True, max_retries=3, soft_time_limit=5, ignore_result=True, base=BaseTask)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_wx_text</span><span class="params">(self, target_origin_id, to_user, txt)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="使用RabbitMQ作为Broker"><a href="#使用RabbitMQ作为Broker" class="headerlink" title="使用RabbitMQ作为Broker"></a>使用RabbitMQ作为Broker</h2><ul><li>更稳定</li><li>消耗内存比redis要小，用redis做broker当任务量很多时，内存极剧上升，估计有内存泄漏问题</li><li>rabbitmq-plugins这监控工具非常好用(用flower作为监控工具，  在测试服务器部署跑，内存会随着时间的推移而不断增加，估计有内存泄漏问题)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs实现网站截图</title>
      <link href="/2018/07/24/node-pageres/"/>
      <url>/2018/07/24/node-pageres/</url>
      
        <content type="html"><![CDATA[<p>这里介绍使用<a href="https://github.com/sindresorhus/pageres" target="_blank" rel="noopener">pageres</a>来进行网站截图。</p><h2 id="pageres"><a href="#pageres" class="headerlink" title="pageres"></a>pageres</h2><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pageres</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pageres = <span class="built_in">require</span>(<span class="string">'pageres'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pageres = <span class="keyword">new</span> Pageres(&#123;<span class="attr">delay</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    .src(<span class="string">'yeoman.io'</span>, [<span class="string">'480x320'</span>, <span class="string">'1024x768'</span>, <span class="string">'iphone 5s'</span>], &#123;<span class="attr">crop</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    .src(<span class="string">'todomvc.com'</span>, [<span class="string">'1280x1024'</span>, <span class="string">'1920x1080'</span>])</span><br><span class="line">    .src(<span class="string">'data:text/html;base64,PGgxPkZPTzwvaDE+'</span>, [<span class="string">'1024x768'</span>])</span><br><span class="line">    .dest(__dirname)</span><br><span class="line">    .run()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'done'</span>));</span><br></pre></td></tr></table></figure><p>具体使用参考：<a href="https://github.com/sindresorhus/pageres" target="_blank" rel="noopener">pageres</a></p><h2 id="pageres-cli"><a href="#pageres-cli" class="headerlink" title="pageres-cli"></a>pageres-cli</h2><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global pageres-cli</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pageres &lt;url&gt; &lt;resolution&gt;</span></span><br><span class="line">pageres todomvc.com 1024x768 1366x768 <span class="comment"># 2 screenshots</span></span><br><span class="line">pageres todomvc.com yeoman.io 1024x768 <span class="comment"># 2 screenshots</span></span><br><span class="line">pageres todomvc.com yeoman.io 1024x768 1366x768 <span class="comment"># 4 screenshots</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pageres [ &lt;url&gt; &lt;resolution&gt; ] [ &lt;url&gt; &lt;resolution&gt; ]</span></span><br><span class="line">pageres [ yeoman.io 1024x768 1600x900 ] todomvc.com 1366x768</span><br><span class="line">pageres [ yeoman.io 1024x768 --no-crop ] todomvc.com 1366x768 --crop</span><br></pre></td></tr></table></figure><p>具体使用参考：<a href="https://github.com/sindresorhus/pageres-cli" target="_blank" rel="noopener">pageres-cli</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BUG】docker中安装node-sass失败解决办法</title>
      <link href="/2018/07/24/docker-node-sass/"/>
      <url>/2018/07/24/docker-node-sass/</url>
      
        <content type="html"><![CDATA[<p>最近发现在使用<code>node:8.9-alpine</code>全局安装<a href="mailto:`node-sass@4.8" target="_blank" rel="noopener">`node-sass@4.8</a>`时，安装总是失败：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-sass@4.8 --sass-binary-site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/node-sass -&gt; /usr/local/lib/node_modules/node-sass/bin/node-sass</span><br><span class="line"></span><br><span class="line">&gt; node-sass@4.8.3 install /usr/local/lib/node_modules/node-sass</span><br><span class="line">&gt; node scripts/install.js</span><br><span class="line"></span><br><span class="line">Unable to save binary /usr/local/lib/node_modules/node-sass/vendor/linux_musl-x64-57 : &#123; Error: EACCES: permission denied, mkdir &apos;/usr/local/lib/node_modules/node-sass/vendor&apos;</span><br><span class="line">    at Object.fs.mkdirSync (fs.js:885:18)</span><br><span class="line">    at sync (/usr/local/lib/node_modules/node-sass/node_modules/mkdirp/index.js:71:13)</span><br><span class="line">    at Function.sync (/usr/local/lib/node_modules/node-sass/node_modules/mkdirp/index.js:77:24)</span><br><span class="line">    at checkAndDownloadBinary (/usr/local/lib/node_modules/node-sass/scripts/install.js:114:11)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/node-sass/scripts/install.js:157:1)</span><br><span class="line">    at Module._compile (module.js:643:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:654:10)</span><br><span class="line">    at Module.load (module.js:556:32)</span><br><span class="line">    at tryModuleLoad (module.js:499:12)</span><br><span class="line">    at Function.Module._load (module.js:491:3)</span><br><span class="line">  errno: -13,</span><br><span class="line">  code: &apos;EACCES&apos;,</span><br><span class="line">  syscall: &apos;mkdir&apos;,</span><br><span class="line">  path: &apos;/usr/local/lib/node_modules/node-sass/vendor&apos; &#125;</span><br><span class="line"></span><br><span class="line">&gt; node-sass@4.8.3 postinstall /usr/local/lib/node_modules/node-sass</span><br><span class="line">&gt; node scripts/build.js</span><br><span class="line">......</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! node-sass@4.8.3 postinstall: `node scripts/build.js`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the node-sass@4.8.3 postinstall script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /root/.npm/_logs/2018-04-02T05_17_18_651Z-debug.log</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>解决办法是在安装时添加参数：<code>--unsafe-perm</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g --unsafe-perm node-sass@4.8 --sass-binary-site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/node-sass -&gt; /usr/local/lib/node_modules/node-sass/bin/node-sass</span><br><span class="line"></span><br><span class="line">&gt; node-sass@4.8.3 install /usr/local/lib/node_modules/node-sass</span><br><span class="line">&gt; node scripts/install.js</span><br><span class="line"></span><br><span class="line">Downloading binary from https://npm.taobao.org/mirrors/node-sass//v4.8.3/linux_musl-x64-57_binding.node</span><br><span class="line">Download complete  ] - :</span><br><span class="line">Binary saved to /usr/local/lib/node_modules/node-sass/vendor/linux_musl-x64-57/binding.node</span><br><span class="line">Caching binary to /root/.npm/node-sass/4.8.3/linux_musl-x64-57_binding.node</span><br><span class="line"></span><br><span class="line">&gt; node-sass@4.8.3 postinstall /usr/local/lib/node_modules/node-sass</span><br><span class="line">&gt; node scripts/build.js</span><br><span class="line"></span><br><span class="line">Binary found at /usr/local/lib/node_modules/node-sass/vendor/linux_musl-x64-57/binding.node</span><br><span class="line">Testing binary</span><br><span class="line">Binary is fine</span><br><span class="line">+ node-sass@4.8.3</span><br><span class="line">added 187 packages in 15.667s</span><br></pre></td></tr></table></figure><p><strong>错误详情如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/node-sass -&gt; /usr/local/lib/node_modules/node-sass/bin/node-sass</span><br><span class="line"></span><br><span class="line">&gt; node-sass@4.8.3 install /usr/local/lib/node_modules/node-sass</span><br><span class="line">&gt; node scripts/install.js</span><br><span class="line"></span><br><span class="line">Unable to save binary /usr/local/lib/node_modules/node-sass/vendor/linux_musl-x64-57 : &#123; Error: EACCES: permission denied, mkdir &apos;/usr/local/lib/node_modules/node-sass/vendor&apos;</span><br><span class="line">    at Object.fs.mkdirSync (fs.js:885:18)</span><br><span class="line">    at sync (/usr/local/lib/node_modules/node-sass/node_modules/mkdirp/index.js:71:13)</span><br><span class="line">    at Function.sync (/usr/local/lib/node_modules/node-sass/node_modules/mkdirp/index.js:77:24)</span><br><span class="line">    at checkAndDownloadBinary (/usr/local/lib/node_modules/node-sass/scripts/install.js:114:11)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/node-sass/scripts/install.js:157:1)</span><br><span class="line">    at Module._compile (module.js:643:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:654:10)</span><br><span class="line">    at Module.load (module.js:556:32)</span><br><span class="line">    at tryModuleLoad (module.js:499:12)</span><br><span class="line">    at Function.Module._load (module.js:491:3)</span><br><span class="line">  errno: -13,</span><br><span class="line">  code: &apos;EACCES&apos;,</span><br><span class="line">  syscall: &apos;mkdir&apos;,</span><br><span class="line">  path: &apos;/usr/local/lib/node_modules/node-sass/vendor&apos; &#125;</span><br><span class="line"></span><br><span class="line">&gt; node-sass@4.8.3 postinstall /usr/local/lib/node_modules/node-sass</span><br><span class="line">&gt; node scripts/build.js</span><br><span class="line"></span><br><span class="line">Building: /usr/local/bin/node /usr/local/lib/node_modules/node-sass/node_modules/node-gyp/bin/node-gyp.js rebuild --verbose --libsass_ext= --libsass_cflags= --libsass_ldflags= --libsass_library=</span><br><span class="line">gyp info it worked if it ends with ok</span><br><span class="line">gyp verb cli [ &apos;/usr/local/bin/node&apos;,</span><br><span class="line">gyp verb cli   &apos;/usr/local/lib/node_modules/node-sass/node_modules/node-gyp/bin/node-gyp.js&apos;,</span><br><span class="line">gyp verb cli   &apos;rebuild&apos;,</span><br><span class="line">gyp verb cli   &apos;--verbose&apos;,</span><br><span class="line">gyp verb cli   &apos;--libsass_ext=&apos;,</span><br><span class="line">gyp verb cli   &apos;--libsass_cflags=&apos;,</span><br><span class="line">gyp verb cli   &apos;--libsass_ldflags=&apos;,</span><br><span class="line">gyp verb cli   &apos;--libsass_library=&apos; ]</span><br><span class="line">gyp info using node-gyp@3.6.2</span><br><span class="line">gyp info using node@8.9.4 | linux | x64</span><br><span class="line">gyp verb command rebuild []</span><br><span class="line">gyp verb command clean []</span><br><span class="line">gyp verb clean removing &quot;build&quot; directory</span><br><span class="line">gyp verb command configure []</span><br><span class="line">gyp verb check python checking for Python executable &quot;python2&quot; in the PATH</span><br><span class="line">gyp verb `which` failed Error: not found: python2</span><br><span class="line">gyp verb `which` failed     at getNotFoundError (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:13:12)</span><br><span class="line">gyp verb `which` failed     at F (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:68:19)</span><br><span class="line">gyp verb `which` failed     at E (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:80:29)</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/which/which.js:89:16</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/index.js:42:5</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/mode.js:8:5</span><br><span class="line">gyp verb `which` failed     at FSReqWrap.oncomplete (fs.js:152:21)</span><br><span class="line">gyp verb `which` failed  python2 &#123; Error: not found: python2</span><br><span class="line">gyp verb `which` failed     at getNotFoundError (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:13:12)</span><br><span class="line">gyp verb `which` failed     at F (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:68:19)</span><br><span class="line">gyp verb `which` failed     at E (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:80:29)</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/which/which.js:89:16</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/index.js:42:5</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/mode.js:8:5</span><br><span class="line">gyp verb `which` failed     at FSReqWrap.oncomplete (fs.js:152:21)</span><br><span class="line">gyp verb `which` failed   stack: &apos;Error: not found: python2\n    at getNotFoundError (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:13:12)\n    at F (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:68:19)\n    at E (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:80:29)\n    at /usr/local/lib/node_modules/node-sass/node_modules/which/which.js:89:16\n    at /usr/local/lib/node_modules/node-sass/node_modules/isexe/index.js:42:5\n    at /usr/local/lib/node_modules/node-sass/node_modules/isexe/mode.js:8:5\n    at FSReqWrap.oncomplete (fs.js:152:21)&apos;,</span><br><span class="line">gyp verb `which` failed   code: &apos;ENOENT&apos; &#125;</span><br><span class="line">gyp verb check python checking for Python executable &quot;python&quot; in the PATH</span><br><span class="line">gyp verb `which` failed Error: not found: python</span><br><span class="line">gyp verb `which` failed     at getNotFoundError (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:13:12)</span><br><span class="line">gyp verb `which` failed     at F (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:68:19)</span><br><span class="line">gyp verb `which` failed     at E (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:80:29)</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/which/which.js:89:16</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/index.js:42:5</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/mode.js:8:5</span><br><span class="line">gyp verb `which` failed     at FSReqWrap.oncomplete (fs.js:152:21)</span><br><span class="line">gyp verb `which` failed  python &#123; Error: not found: python</span><br><span class="line">gyp verb `which` failed     at getNotFoundError (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:13:12)</span><br><span class="line">gyp verb `which` failed     at F (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:68:19)</span><br><span class="line">gyp verb `which` failed     at E (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:80:29)</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/which/which.js:89:16</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/index.js:42:5</span><br><span class="line">gyp verb `which` failed     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/mode.js:8:5</span><br><span class="line">gyp verb `which` failed     at FSReqWrap.oncomplete (fs.js:152:21)</span><br><span class="line">gyp verb `which` failed   stack: &apos;Error: not found: python\n    at getNotFoundError (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:13:12)\n    at F (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:68:19)\n    at E (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:80:29)\n    at /usr/local/lib/node_modules/node-sass/node_modules/which/which.js:89:16\n    at /usr/local/lib/node_modules/node-sass/node_modules/isexe/index.js:42:5\n    at /usr/local/lib/node_modules/node-sass/node_modules/isexe/mode.js:8:5\n    at FSReqWrap.oncomplete (fs.js:152:21)&apos;,</span><br><span class="line">gyp verb `which` failed   code: &apos;ENOENT&apos; &#125;</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: Can&apos;t find Python executable &quot;python&quot;, you can set the PYTHON env variable.</span><br><span class="line">gyp ERR! stack     at PythonFinder.failNoPython (/usr/local/lib/node_modules/node-sass/node_modules/node-gyp/lib/configure.js:483:19)</span><br><span class="line">gyp ERR! stack     at PythonFinder.&lt;anonymous&gt; (/usr/local/lib/node_modules/node-sass/node_modules/node-gyp/lib/configure.js:397:16)</span><br><span class="line">gyp ERR! stack     at F (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:68:16)</span><br><span class="line">gyp ERR! stack     at E (/usr/local/lib/node_modules/node-sass/node_modules/which/which.js:80:29)</span><br><span class="line">gyp ERR! stack     at /usr/local/lib/node_modules/node-sass/node_modules/which/which.js:89:16</span><br><span class="line">gyp ERR! stack     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/index.js:42:5</span><br><span class="line">gyp ERR! stack     at /usr/local/lib/node_modules/node-sass/node_modules/isexe/mode.js:8:5</span><br><span class="line">gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:152:21)</span><br><span class="line">gyp ERR! System Linux 3.10.0-514.10.2.el7.x86_64</span><br><span class="line">gyp ERR! command &quot;/usr/local/bin/node&quot; &quot;/usr/local/lib/node_modules/node-sass/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot; &quot;--verbose&quot; &quot;--libsass_ext=&quot; &quot;--libsass_cflags=&quot; &quot;--libsass_ldflags=&quot; &quot;--libsass_library=&quot;</span><br><span class="line">gyp ERR! cwd /usr/local/lib/node_modules/node-sass</span><br><span class="line">gyp ERR! node -v v8.9.4</span><br><span class="line">gyp ERR! node-gyp -v v3.6.2</span><br><span class="line">gyp ERR! not ok</span><br><span class="line">Build failed with error code: 1</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! node-sass@4.8.3 postinstall: `node scripts/build.js`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the node-sass@4.8.3 postinstall script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /root/.npm/_logs/2018-04-02T05_17_18_651Z-debug.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BUG】NGINX+GUNICORN+DJANGO出现400错误</title>
      <link href="/2018/07/24/nginx-400/"/>
      <url>/2018/07/24/nginx-400/</url>
      
        <content type="html"><![CDATA[<p>配置Nginx+Gunicorn+Django时，发现所有请求都是返回<code>Bad Request (400)</code>。</p><ol><li><p>django的<code>settings.py</code>配置<code>ALLOWED_HOSTS = [*]</code></p></li><li><p>配置nginx反向代理<code>proxy_set_header Host $host;</code></p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">20m</span>;</span><br><span class="line"><span class="attribute">client_body_buffer_size</span> <span class="number">256k</span>;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>;</span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line"><span class="attribute">proxy_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">proxy_temp_file_write_size</span> <span class="number">128k</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> nginx </tag>
            
            <tag> gunicorn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx反向代理重定向</title>
      <link href="/2018/07/24/nginx-proxy-pass/"/>
      <url>/2018/07/24/nginx-proxy-pass/</url>
      
        <content type="html"><![CDATA[<p>当访问<code>http://example.com/a/abc.html</code>，实际上方向代理到后端服务器<code>http://10.0.x.x:8080/b/abc.html</code>，那么可以按照以下方式进行配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">rewrite</span>  /a$  /a/  <span class="literal">permanent</span>;   <span class="comment"># 防止访问`/a`时返回404</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ /a/(?&lt;section&gt;.*)</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  http://10.0.x.x:8080/b/<span class="variable">$section</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git保存帐号密码</title>
      <link href="/2018/07/23/git-credential-store/"/>
      <url>/2018/07/23/git-credential-store/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存15分钟，也就是15分钟内不用重复输入帐号密码</span></span><br><span class="line">git config credential.helper cache</span><br><span class="line">git config --global credential.helper cache</span><br><span class="line"><span class="comment"># 可以自定义缓存时间，以下是缓存1小时</span></span><br><span class="line">git config credential.helper <span class="string">'cache --timeout=3600'</span></span><br><span class="line">git config --global credential.helper <span class="string">'cache --timeout=3600'</span></span><br><span class="line"><span class="comment"># 也可以永久缓存</span></span><br><span class="line">git config credential.helper store</span><br><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git tag按时间顺序排列</title>
      <link href="/2018/07/23/git-tag-sort/"/>
      <url>/2018/07/23/git-tag-sort/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按时间正序排列</span></span><br><span class="line">git tag --sort=v:refname</span><br><span class="line"><span class="comment"># 按时间倒序排列</span></span><br><span class="line">git tag --sort=-v:refname</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Git中已提交的用户名和邮箱</title>
      <link href="/2018/07/23/git-change-username/"/>
      <url>/2018/07/23/git-change-username/</url>
      
        <content type="html"><![CDATA[<p>为修改已经存在的commit中的用户名和邮箱，必须重写整个git repo的提交历史。</p><blockquote><p>警告：这种行为对提交历史具有破坏性，在无必要的情况下，不建议对其修改。</p><p>注意：完成重写后，任何fork或clone的人必须重新获取重写后的历史并把所有本地修改<code>rebase</code>入重写后的历史中。</p></blockquote><ol><li><p>复制以下脚本，并根据自己的需要修改以下变量：</p><ul><li><code>OLD_EMAIL</code>: 要修改的邮箱</li><li><code>CORRECT_NAME</code>: 修改之后的用户名</li><li><p><code>CORRECT_EMAIL</code>: 修改之后的邮箱</p><p>脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">OLD_EMAIL=<span class="string">"your-old-email@example.com"</span> CORRECT_NAME=<span class="string">"Your Correct Name"</span> CORRECT_EMAIL=<span class="string">"your-correct-email@example.com"</span> git filter-branch --env-filter <span class="string">'</span></span><br><span class="line"><span class="string">if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]; then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]; then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME="$CORRECT_NAME"</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">'</span> --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure></li></ul></li><li><p>执行脚本</p></li><li><p>常看历史有没有错误</p></li><li><p>将重写后的历史提交到Git远程仓库中：<code>git push --force --tags origin &#39;refs/heads/*&#39;</code></p></li></ol><blockquote><p>建议以上操作在一个新clone的仓库中进行，这样的话可以减少一些误操作。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js缓存化技术</title>
      <link href="/2018/07/23/js-memoization/"/>
      <url>/2018/07/23/js-memoization/</url>
      
        <content type="html"><![CDATA[<p><code>Memoization</code>是一种将函数返回值缓存起来的方法。</p><p><code>Memoization</code>原理非常简单，就是把函数的每次执行结果都放入一个散列表（或数组）中，在接下来的执行中，在散列表中查找是否已经有相应执行过的值，如果有，直接返回该值，没有才真正执行函数体的求值部分。很明显，找值，尤其是在散列中找值，比执行函数快多了。现代JavaScript的开发也已经大量使用这种技术。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fib = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = [</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Num not less than 1."</span>);</span><br><span class="line">        <span class="keyword">if</span> (num &gt;= cache.length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = cache.length; i &lt;= num; i++) &#123;</span><br><span class="line">                cache[i] = cache[i - <span class="number">2</span>] + cache[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[num - <span class="number">1</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js函数节流和函数去抖</title>
      <link href="/2018/07/23/js-throttle-debounce/"/>
      <url>/2018/07/23/js-throttle-debounce/</url>
      
        <content type="html"><![CDATA[<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p><strong>函数节流</strong>：就是函数按照一个周期执行，例如给window绑定一个resize事件之后，只要window大小改变就打印1，如果不采用函数节流，当我们将窗口调节的时候发现控制台一直打印1，但是使用了函数节流后我们会发现调节的过程中，每隔一段时间才打印1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">delay, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span> (currTime - startTime &gt; delay) &#123;</span><br><span class="line">            cb();</span><br><span class="line">            startTime = currTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数去抖"><a href="#函数去抖" class="headerlink" title="函数去抖"></a>函数去抖</h2><p><strong>函数去抖</strong>：就是当事件触发之后，必须等待某一个时间之后，回调函数才会执行，假若再等待的时间内，事件又触发了则等待时间刷新。还是上面那个例子，如果我们一直改变窗口大小，则不会打印1，只有当我们停止改变窗口大小并等待一段时间后，才会打印1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">delay, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            cb();</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js日期格式化</title>
      <link href="/2018/07/23/js-date-format/"/>
      <url>/2018/07/23/js-date-format/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间对象的格式化;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">format</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * eg:format="yyyy-MM-dd hh:mm:ss";</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">// month</span></span><br><span class="line">        <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(), <span class="comment">// day</span></span><br><span class="line">        <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours(), <span class="comment">// hour</span></span><br><span class="line">        <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">// minute</span></span><br><span class="line">        <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">// second</span></span><br><span class="line">        <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">// quarter</span></span><br><span class="line">        <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds()</span><br><span class="line">        <span class="comment">// millisecond</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(format)) &#123;</span><br><span class="line">        format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(format)) &#123;</span><br><span class="line">            format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, <span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span> ? o[k] : (<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js将arguments对象转换为数组</title>
      <link href="/2018/07/23/js-arguments-to-array/"/>
      <url>/2018/07/23/js-arguments-to-array/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Base64</title>
      <link href="/2018/07/21/base64/"/>
      <url>/2018/07/21/base64/</url>
      
        <content type="html"><![CDATA[<p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。</p><p>标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的<code>/</code>和<code>+</code>字符变为形如<code>%XX</code>的形式，而这些<code>%</code>号在存入数据库时还需要再进行转换，因为ANSI SQL中已将<code>%</code>号用作通配符。</p><p>为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充’=’号，并将标准Base64中的<code>+</code>和<code>/</code>分别改成了<code>-</code>和<code>_</code>，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p><p>另有一种用于正则表达式的改进Base64变种，它将<code>+</code>和<code>/</code>改成了<code>!</code>和<code>-</code>，因为<code>+</code>,<code>*</code>以及前面在IRCu中用到的<code>[</code>和<code>]</code>在正则表达式中都可能具有特殊含义。</p><p>此外还有一些变种，它们将<code>+/</code>改为<code>_-</code>或<code>._</code>（用作编程语言中的标识符名称）或<code>.-</code>（用于XML中的Nmtoken）甚至<code>_:</code>（用于XML中的Name）。</p><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（<code>3*8 = 4*6 = 24</code>），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。</p><a id="more"></a><p><strong>Base64索引表</strong></p><table><thead><tr><th>数值</th><th>字符</th><th>数值</th><th>字符</th><th>数值</th><th>字符</th><th>数值</th><th>字符</th></tr></thead><tbody><tr><td>  0</td><td>A</td><td>16</td><td>Q</td><td>32</td><td>g</td><td>48</td><td>w</td></tr><tr><td>  1</td><td>B</td><td>17</td><td>R</td><td>33</td><td>h</td><td>49</td><td>x</td></tr><tr><td>  2</td><td>C</td><td>18</td><td>S</td><td>34</td><td>i</td><td>50</td><td>y</td></tr><tr><td>  3</td><td>D</td><td>19</td><td>T</td><td>35</td><td>j</td><td>51</td><td>z</td></tr><tr><td>  4</td><td>E</td><td>20</td><td>U</td><td>36</td><td>k</td><td>52</td><td>0</td></tr><tr><td>  5</td><td>F</td><td>21</td><td>V</td><td>37</td><td>l</td><td>53</td><td>1</td></tr><tr><td>  6</td><td>G</td><td>22</td><td>W</td><td>38</td><td>m</td><td>54</td><td>2</td></tr><tr><td>  7</td><td>H</td><td>23</td><td>X</td><td>39</td><td>n</td><td>55</td><td>3</td></tr><tr><td>  8</td><td>I</td><td>24</td><td>Y</td><td>40</td><td>o</td><td>56</td><td>4</td></tr><tr><td>  9</td><td>J</td><td>25</td><td>Z</td><td>41</td><td>p</td><td>57</td><td>5</td></tr><tr><td> 10</td><td>K</td><td>26</td><td>a</td><td>42</td><td>q</td><td>58</td><td>6</td></tr><tr><td> 11</td><td>L</td><td>27</td><td>b</td><td>43</td><td>r</td><td>59</td><td>7</td></tr><tr><td> 12</td><td>M</td><td>28</td><td>c</td><td>44</td><td>s</td><td>60</td><td>8</td></tr><tr><td> 13</td><td>N</td><td>29</td><td>d</td><td>45</td><td>t</td><td>61</td><td>9</td></tr><tr><td> 14</td><td>O</td><td>30</td><td>e</td><td>46</td><td>u</td><td>62</td><td>+</td></tr><tr><td> 15</td><td>P</td><td>31</td><td>f</td><td>47</td><td>v</td><td>63</td><td>/</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】字符编码</title>
      <link href="/2018/07/21/character-encoding/"/>
      <url>/2018/07/21/character-encoding/</url>
      
        <content type="html"><![CDATA[<p>最近有一些朋友常问我一些乱码的问题，和他们交流过程中，发现这个编码的相关知识还真是杂乱不堪，不少人对一些知识理解似乎也有些偏差，网上百度，google的内容，也有不少以讹传讹，根本就是错误的（例如说 unicode编码是两个字节），各种软件让你选择编码的时候，常常是很长的一个选单，让用户不知道该如何选。基于这样的问题，我就写下我的理解吧，一方面帮助一些需要帮助的人纠正认识，一方面作为自己以后备查的资料。</p><h2 id="ASCII（American-Standard-Code-for-Information-Interchange）"><a href="#ASCII（American-Standard-Code-for-Information-Interchange）" class="headerlink" title="ASCII（American Standard Code for Information Interchange）"></a>ASCII（American Standard Code for Information Interchange）</h2><p>美国信息交换标准代码，这是计算机上最早使用的通用的编码方案。那个时候计算机还只是拉丁文字的专利，根本没有想到现在计算机的发展势头，如果想到了，可能一开始就会使用unicode了。当时绝大部分专家都认为，要用计算机，必须熟练掌握英文。这种编码占用7个Bit，在计算机中占用一个字节，8位，最高位没用，通讯的时候有时用作奇偶校验位。因此ASCII编码的取值范围实际上是：<code>0x00-0x7f</code>，只能表示128个字符。后来发现128个不太够用，做了扩展，叫做ASCII扩展编码，用足八位，取值范围变成：<code>0x00-0xff</code>，能表示256个字符。其实这种扩展意义不大，因为256个字符表示一些非拉丁文字远远不够，但是表示拉丁文字，又用不完。所以扩展的意义还是为了下面的ANSI编码服务。</p><h2 id="ANSI（American-National-Standard-Institite）"><a href="#ANSI（American-National-Standard-Institite）" class="headerlink" title="ANSI（American National Standard Institite）"></a>ANSI（American National Standard Institite）</h2><p>美国国家标准协会，也就是说，每个国家（非拉丁语系国家）自己制定自己的文字的编码规则，并得到了ANSI认可，符合ANSI的标准，全世界在表示对应国家文字的时候都通用这种编码就叫ANSI编码。换句话说，中国的ANSI编码和在日本的ANSI的意思是不一样的，因为都代表自己国家的文字编码标准。比如中国的ANSI对应就是GB2312标准，日本就是JIT标准，香港，台湾对应的是BIG5标准等等。当然这个问题也比较复杂，微软从95开始，用就是自己搞的一个标准GBK。GB2312里面只有6763个汉字，682个符号，所以确实有时候不是很够用。GBK一直能和GB2312相互混淆并且相安无事的一个重要原因是GBK全面兼容GB2312，所以没有出现任何冲突，你用GB2312编码的文件通过GBK去解释一定能获得相同的显示效果，换句话说：GBK对GB2312就是，你有的，我也有，你没得的，我还有！</p><a id="more"></a><p>好了，ANSI的标准是什么呢，首先是ASCII的代码你不能用！也就是说ASCII码在任何ANSI中应该都是相同的。其他的，你们自己扩展。所以呢，中国人就把ASCII码变成8位，<code>0x7f</code>之前我不动你的，我从<code>0xa0</code>开始编，<code>0xa0-0xff</code>才95个码位，对于中国字那简直是杯水车薪，因此，就用两个字节吧，因此编码范围就从<code>0xA1A1-0xFEFE</code>，这个范围可以表示23901个汉字。基本够用了吧，GB2312才7000多个呢！GBK更猛，编码范围是从<code>0x8140-0xFEFE</code>，可以表示3万多个汉字。可以看出，这两种方案，都能保证汉字头一个字节在0x7f以上，从而和ASCII不会发生冲突。能够实现英文和汉字同时显示。</p><p>BIG5，香港和台湾用的比较多，繁体，范围：<code>0xA140-0xF9FE</code>，<code>0xA1A1-0xF9FE</code>，每个字由两个字节组成，其第一字节编码范围为<code>0xA1-0xF9</code>，第二字节编码范围为<code>0x40-0x7E</code>与<code>0xA1-0xFE</code>，总计收入13868个字（包括5401个常用字、7652个次常用字、7个扩充字、以及808个各式符号）。</p><p>那么到底ANSI是多少位呢？这个不一定！比如在GB2312和GBK，BIG5中，是两位！但是其他标准或者其他语言如果不够用，就完全可能不止两位！</p><p>例如：GB18030:GB18030-2000（GBK2K）在GBK的基础上进一步扩展了汉字，增加了藏、蒙等少数民族的字形。GBK2K从根本上解决了字位不够，字形不足的问题。它有几个特点：它并没有确定所有的字形，只是规定了编码范围，留待以后扩充。编码是变长的，其二字节部分与GBK兼容；四字节部分是扩充的字形、字位，其编码范围是首字节<code>0x81-0xfe</code>、二字节<code>0x30-0x39</code>、三字节<code>0x81-0xfe</code>、四字节<code>0x30-0x39</code>。它的推广是分阶段的，首先要求实现的是能够完全映射到Unicode3.0标准的所有字形。它是国家标准，是强制性的。</p><p>搞懂了ANSI的含义，我们发现ANSI有个致命的缺陷，就是每个标准是各自为阵的，不保证能兼容。换句话说，要同时显示中文和日本文或者阿拉伯文，就完全可能会出现一个编码两个字符集里面都有对应，不知道该显示哪一个的问题，也就是编码重叠的问题。显然这样的方案不好，所以Unicode才会出现！</p><h2 id="MBCS（Multi-Byte-Chactacter-System（Set））"><a href="#MBCS（Multi-Byte-Chactacter-System（Set））" class="headerlink" title="MBCS（Multi-Byte Chactacter System（Set））"></a>MBCS（Multi-Byte Chactacter System（Set））</h2><p>多字节字符系统或者字符集，基于ANSI编码的原理上，对一个字符的表示实际上无法确定他需要占用几个字节的，只能从编码本身来区分和解释。因此计算机在存储的时候，就是采用多字节存储的形式。也就是你需要几个字节我给你放几个字节，比如A我给你放一个字节，比如”中“，我就给你放两个字节，这样的字符表示形式就是MBCS。在基于GBK的windows中，不会超过2个字节，所以windows这种表示形式有叫做DBCS（Double-Byte Chactacter System），其实算是MBCS的一个特例。C语言默认存放字符串就是用的MBCS格式。从原理上来说，这样是非常经济的一种方式。</p><h2 id="CodePage"><a href="#CodePage" class="headerlink" title="CodePage"></a>CodePage</h2><p>代码页，最早来自IBM，后来被微软，oracle，SAP等广泛采用。因为ANSI编码每个国家都不统一，不兼容，可能导致冲突，所以一个系统在处理文字的时候，必须要告诉计算机你的ANSI是哪个国家和地区的标准，这种国家和标准的代号（其实就是字符编码格式的代号），微软称为Codepage代码页，其实这个代码页和字符集编码的意思是一样的。告诉你代码页，本质就是告诉了你编码格式。但是不同厂家的代码页可能是完全不同，哪怕是同样的编码，比如，UTF-8字符编码在IBM对应的代码页是1208，在微软对应的是65001，在德国的SAP公司对应的是4110。所以啊，其实本来就是一个东西，大家各自为政，搞那么多新名词，实在没必要！所以标准还是很重要的！！！</p><p>比如GBK的在微软的代码页是936，告诉你代码页是936其实和告诉你我编码格式是GBK效果完全相同。那么处理文本的时候就不会有问题，不会去考虑某个代码是显示的韩文还是中文，同样，日文和韩文的代码页就和中文不同，这样就可以避免编码冲突导致计算机不知如何处理的问题。当然用这个也可以很容易的切换语言版本。但是这都是治标不治本的方法，还是无法解决同时显示多种语言的问题，所以最后还是都用unicode吧，永远不会有冲突了。</p><h2 id="Unicode（Universal-Code）"><a href="#Unicode（Universal-Code）" class="headerlink" title="Unicode（Universal Code）"></a>Unicode（Universal Code）</h2><p>这是一个编码方案，说白了就是一张包含全世界所有文字的一个编码表，不管你用的上，用不上，不管是现在用的，还是以前用过的，只要这个世界上存在的文字符号，统统给你一个唯一的编码，这样就不可能有任何冲突了。不管你要同时显示任何文字，都没有问题。</p><p>因此在这样的方案下，Unicode出现了。Unicode编码范围是：<code>0-0x10FFFF</code>，可以容纳1114112个字符，100多万啊。全世界的字符根本用不完了，Unicode5.0版本中，才用了238605个码位。所以足够了。因此从码位范围看，严格的unicode需要3个字节来存储。但是考虑到理解性和计算机处理的方便性，理论上还是用4个字节来描述。</p><p>Unicode采用的汉字相关编码用的是《CJK统一汉字编码字符集》—国家标准GB13000.1是完全等同于国际标准《通用多八位编码字符集（UCS）》ISO10646.1。《GB13000.1》中最重要的也经常被采用的是其双字节形式的基本多文种平面。在这65536个码位的空间中，定义了几乎所有国家或地区的语言文字和符号。其中从<code>0x4E00-0x9FA5</code>的连续区域包含了20902个来自中国（包括台湾）、日本、韩国的汉字，称为CJK（Chinese、Japanese、Korean）汉字。CJK是《GB2312-80》、《BIG5》等字符集的超集。</p><p>CJK包含了中国，日本，韩国，越南，香港，也就是CJKVH。这个在UNICODE的Charset chart中可以明显看到。unicode的相关标准可以从unicode.org上面获得，目前已经进行到了6.0版本。</p><p>下面这段描述来自百度百科：</p><blockquote><p>Unicode字符集可以简写为UCS（Unicode Character Set）。早期的Unicode标准有UCS-2、UCS-4的说法。UCS-2用两个字节编码，UCS-4用4个字节编码。UCS-4根据最高位为0的最高字节分成2^7=128个group。每个group再根据次高字节分为256个平面（plane）。每个平面根据第3个字节分为256行（row），每行有256个码位（cell）。group0的平面0被称作BMP（Basic Multilingual Plane）。将UCS-4的BMP去掉前面的两个零字节就得到了UCS-2。　　</p><p>每个平面有2^16=65536个码位。Unicode计划使用了17个平面，一共有17*65536=1114112个码位。在Unicode5.0.0版本中，已定义的码位只有238605个，分布在平面0、平面1、平面2、平面14、平面15、平面16。其中平面15和平面16上只是定义了两个各占65534个码位的专用区（Private Use Area），分别是<code>0xF0000-0xFFFFD</code>和<code>0x100000-0x10FFFD</code>。</p><p>所谓专用区，就是保留给大家放自定义字符的区域，可以简写为PUA。</p><p>平面0也有一个专用区：<code>0xE000-0xF8FF</code>，有6400个码位。平面0的<code>0xD800-0xDFFF</code>，共2048个码位，是一个被称作代理区（Surrogate）的特殊区域。代理区的目的用两个UTF-16字符表示BMP以外的字符。在介绍UTF-16编码时会介绍。　　</p><p>如前所述在Unicode5.0.0版本中，<code>238605-65534*2-6400-2408=99089</code>。余下的99089个已定义码位分布在平面0、平面1、平面2和平面14上，它们对应着Unicode目前定义的99089个字符，其中包括71226个汉字。平面0、平面1、平面2和平面14上分别定义了52080、3419、43253和337个字符。</p><p>平面2的43253个字符都是汉字。平面0上定义了27973个汉字。</p></blockquote><h2 id="Unicode的实现方案"><a href="#Unicode的实现方案" class="headerlink" title="Unicode的实现方案"></a>Unicode的实现方案</h2><p>Unicode其实只是一张巨大的编码表。要在计算机里面实现，也出现了几种不同的方案。也就是说如何表示unicode编码的问题。</p><h3 id="UTF-8（UCS-Transformation-Format-8bit）"><a href="#UTF-8（UCS-Transformation-Format-8bit）" class="headerlink" title="UTF-8（UCS Transformation Format 8bit）"></a>UTF-8（UCS Transformation Format 8bit）</h3><p>这个方案的意思以8位为单位来标识文字，注意并不是说一个文字用8位标识。他其实是一种MBCS方案，可变字节的。到底需要几个字节表示一个符号，这个要根据这个符号的unicode编码来决定，最多4个字节。</p><p>编码规则如下：</p><table><thead><tr><th>Unicode编码（16进制）</th><th>UTF-8字节流（二进制）</th></tr></thead><tbody><tr><td>000000-00007F</td><td>0xxxxxxx</td></tr><tr><td>000080-0007FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>000800-00FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>010000-10FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>UTF-8的特点是对不同范围的字符使用不同长度的编码。对于<code>0x00-0x7F</code>之间的字符，UTF-8编码与ASCII编码完全相同。</p><p>UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位<code>0x10FFFF</code>也只有21位。</p><p><strong>例1：</strong>「汉」字的Unicode编码是<code>0x6C49</code>。<code>0x6C49</code>在<code>0x0800-0xFFFF</code>之间，使用用3字节模板了：<code>1110xxxx 10xxxxxx 10xxxxxx</code>。将0x6C49写成二进制是：<code>0110 1100 0100 1001</code>，用这个比特流依次代替模板中的x，得到：<code>11100110 10110001 10001001</code>，即<code>E6 B1 89</code>。</p><p><strong>例2：</strong>Unicode编码<code>0x20C30</code>在<code>0x010000-0x10FFFF</code>之间，使用用4字节模板了：<code>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</code>。将<code>0x20C30</code>写成21位二进制数字（不足21位就在前面补0）：<code>0 0010 0000 1100 0011 0000</code>，用这个比特流依次代替模板中的x，得到：<code>11110000 10100000 10110000 10110000</code>，即<code>F0 A0 B0 B0</code>。</p><h3 id="UTF-16（UCS-Transformation-Format-16bit）"><a href="#UTF-16（UCS-Transformation-Format-16bit）" class="headerlink" title="UTF-16（UCS Transformation Format 16bit）"></a>UTF-16（UCS Transformation Format 16bit）</h3><p>UTF-16编码以16位无符号整数为单位。注意是16位为一个单位，不表示一个字符就只有16位。现在机器上的unicode编码一般指的就是UTF-16。绝大部分2个字节就够了，但是不能绝对的说所有字符都是2个字节。这个要看字符的unicode编码处于什么范围而定，有可能是2个字节，也可能是4个字节。这点请注意！</p><h3 id="UTF-32（UCS-Transformation-Format-32bit）"><a href="#UTF-32（UCS-Transformation-Format-32bit）" class="headerlink" title="UTF-32（UCS Transformation Format 32bit）"></a>UTF-32（UCS Transformation Format 32bit）</h3><p>这个就简单了，和Unicode码表基本一一对应，固定四个字节。</p><p>为什么不采用UTF-32呢，因为unicode定义的范围太大了，其实99%的人使用的字符编码不会超过2个字节，所以如同统一用4个字节，简单倒是简单了，但是数据冗余确实太大了，不好，所以16位是最好的。就算遇到超过16位能表示的字符，我们也可以通过上面讲到的代理技术，采用32位标识，这样的方案是最好的。所以现在绝大部分机器实现unicode还是采用的utf-16的方案。当然也有UTF-8的方案。比如windows用的就是UTF16方案，不少linux用的就是utf8方案。</p><h2 id="编码存储差异"><a href="#编码存储差异" class="headerlink" title="编码存储差异"></a>编码存储差异</h2><p>这里就要引出两个名词：</p><ul><li><p>LE（little endian）：小字节字节序，意思就是一个单元在计算机中的存放时按照低位在前（低地址），高位在后（高地址）的模式存放。</p></li><li><p>BE（big endian）：大字节字节序，和LE相反，是高位在前，低位在后。</p></li></ul><p>比如一个unicode编码为：<code>0x006C49</code>，如果是LE，那么在文件中的存放顺序应该是：<code>49 6c 00</code>如果是BE，那么顺序应该是：<code>00 6c 49</code>。</p><h2 id="编码格式的检测"><a href="#编码格式的检测" class="headerlink" title="编码格式的检测"></a>编码格式的检测</h2><p>到底采用什么编码，如果能检测就好了。专家们也是这么想的，所以专家给每种格式和字节序规定了一些特殊的编码，这些编码在unicode中是没有使用的，所以不用担心会冲突。这个叫做BOM（Byte Order Mark）头。意思是字节序标志头。通过它基本能确定编码格式和字节序。</p><table><thead><tr><th>UTF编码</th><th>Byte Order Mark</th></tr></thead><tbody><tr><td>UTF-8</td><td>EF BB BF</td></tr><tr><td>UTF-16LE</td><td>FF FE</td></tr><tr><td>UTF-16BE</td><td>FE FF</td></tr><tr><td>UTF-32LE</td><td>FF FE 00 00</td></tr><tr><td>UTF-32BE</td><td>00 00 FE FF</td></tr></tbody></table><p>所以通过检测文件前面的BOM头，基本能确定编码格式和字节序。但是这个BOM头只是建议添加，不是强制的，所以不少软件和系统没有添加这个BOM头（所以有些软件格式中有带BOM头和NoBOM头的选择），这个时候要检测什么格式，就比较麻烦了当然可以检测，但是不能保证100%准确，只能通过编码范围从概率上来检查，虽然准确度还是比较高，但是不能保证100%。所以，时常看到检测错误的软件，也不奇怪了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>终于写完了，其实这些问题都是不统一导致的，属于历史问题，所以才会有这些困惑，这里也呼吁所有的软件开发人员自觉的采用Unicode标准进行文字处理，我相信在不久的将来，这些困扰都不会存在了，因为所有软件都是unicoded，只要有字库，任何文字都能同时显示，也可以到任何语言的平台上的去运行，不再有乱码的困惑！</p><p>其实现在绝大部分软件已经是这么做的了！</p><p>另外也不要被很多名词属于所迷惑，其实这些只是标准的问题，根本没有什么新的东西，更没有什么复杂的东西。</p><p>转载自：<a href="http://blog.sina.com.cn/s/blog_4aa887440101arks.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_4aa887440101arks.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Nginx and Letsencrypt in Docker</title>
      <link href="/2018/07/16/docker-letsencrypt/"/>
      <url>/2018/07/16/docker-letsencrypt/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>安装Docker</li><li>安装Docker-compose</li><li>拉取镜像：<code>nginx</code>、<code>certbot/certbot</code></li><li>域名<code>your.domain.com</code></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="从nginx镜像中复制nginx-conf文件"><a href="#从nginx镜像中复制nginx-conf文件" class="headerlink" title="从nginx镜像中复制nginx.conf文件"></a>从nginx镜像中复制<code>nginx.conf</code>文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name tmp-nginx-container -d nginx</span><br><span class="line">docker cp tmp-nginx-container:/etc/nginx/nginx.conf `<span class="built_in">pwd</span>`/nginx.conf</span><br><span class="line">docker rm -f tmp-nginx-container</span><br></pre></td></tr></table></figure><h3 id="配置your-domain-com的http服务"><a href="#配置your-domain-com的http服务" class="headerlink" title="配置your.domain.com的http服务"></a>配置your.domain.com的http服务</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>     your.domain.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class="line">        <span class="attribute">root</span>        /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">rewrite</span>    <span class="regexp"> ^/(.*)$</span>      https://<span class="variable">$server_name</span>/<span class="variable">$1</span>     <span class="literal">permanent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置docker-compose-yaml文件"><a href="#配置docker-compose-yaml文件" class="headerlink" title="配置docker-compose.yaml文件"></a>配置docker-compose.yaml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">nginx:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./conf.d:/etc/nginx/conf.d</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./html:/usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><h3 id="启动nginx服务"><a href="#启动nginx服务" class="headerlink" title="启动nginx服务"></a>启动nginx服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="生成Letsencrypt证书"><a href="#生成Letsencrypt证书" class="headerlink" title="生成Letsencrypt证书"></a>生成Letsencrypt证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">    -v `<span class="built_in">pwd</span>`/letsencrypt:/etc/letsencrypt \</span><br><span class="line">    -v `<span class="built_in">pwd</span>`/html:/usr/share/nginx/html \</span><br><span class="line">    certbot/certbot \</span><br><span class="line">    certonly --webroot -w /usr/share/nginx/html/ \</span><br><span class="line">    -d your.domain.com</span><br></pre></td></tr></table></figure><h3 id="配置your-domain-com的https服务"><a href="#配置your-domain-com的https服务" class="headerlink" title="配置your.domain.com的https服务"></a>配置your.domain.com的https服务</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span>     your.domain.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>     /etc/letsencrypt/live/your.domain.com/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>     /etc/letsencrypt/live/your.domain.com/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_trusted_certificate</span>     /etc/letsencrypt/live/your.domain.com/chain.pem;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class="line">        <span class="attribute">root</span>        /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>        /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启nginx服务"><a href="#重启nginx服务" class="headerlink" title="重启nginx服务"></a>重启nginx服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> nginx nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="刷新Letsencrypt证书"><a href="#刷新Letsencrypt证书" class="headerlink" title="刷新Letsencrypt证书"></a>刷新Letsencrypt证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">    -v `<span class="built_in">pwd</span>`/letsencrypt:/etc/letsencrypt \</span><br><span class="line">    -v `<span class="built_in">pwd</span>`/html:/usr/share/nginx/html \</span><br><span class="line">    certbot/certbot \</span><br><span class="line">    renew</span><br></pre></td></tr></table></figure><p>建议每隔一个月刷新一次证书，将其写入定时任务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> letsencrypt </tag>
            
            <tag> ssl </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Installing IntelliJ IDEA License Server in Docker</title>
      <link href="/2018/07/16/docker-intellij-idea-license-server/"/>
      <url>/2018/07/16/docker-intellij-idea-license-server/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -o IntelliJIDEALicenseServer <span class="string">"http://home.ustc.edu.cn/~mmmwhy/86"</span></span><br><span class="line">chmod a+x IntelliJIDEALicenseServer</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt; docker-compose.yaml</span><br><span class="line">version: <span class="string">"2"</span></span><br><span class="line">services:</span><br><span class="line">    IntelliJIDEALicenseServer:</span><br><span class="line">        image: ubuntu:16.04</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - 1234:1234</span><br><span class="line">        volumes:</span><br><span class="line">            - ./IntelliJIDEALicenseServer:/usr/bin/IntelliJIDEALicenseServer</span><br><span class="line">        <span class="built_in">command</span>: IntelliJIDEALicenseServer -p 1234 -u admin</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploying Gogs in Docker</title>
      <link href="/2018/07/16/docker-gogs/"/>
      <url>/2018/07/16/docker-gogs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://gogs.io/" target="_blank" rel="noopener">Gogs</a>是一个git server，下面是<code>docker-compose.yaml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gogs:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gogs/gogs</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> gogs </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker搭建dnsmasq服务</title>
      <link href="/2018/07/16/docker-dnsmasq/"/>
      <url>/2018/07/16/docker-dnsmasq/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建配置文件目录</span></span><br><span class="line">mkdir configs</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt; configs/addresses.conf</span><br><span class="line"><span class="comment"># Add domains which you want to force to an IP address here.</span></span><br><span class="line"><span class="comment"># The example below send any host in double-click.net to a local</span></span><br><span class="line"><span class="comment"># web-server.</span></span><br><span class="line"><span class="comment">#address=/double-click.net/127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --address (and --server) work with IPv6 addresses too.</span></span><br><span class="line"><span class="comment">#address=/www.thekelleys.org.uk/fe80::20d:60ff:fe36:f83</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建docker-compose.yml文件</span></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt; docker-compose.yml</span><br><span class="line">version: <span class="string">"2"</span></span><br><span class="line">services:</span><br><span class="line">    dnsmasq:</span><br><span class="line">        image: hypc/dnsmasq:2.76-alpine</span><br><span class="line">        ports:</span><br><span class="line">            - 53:53/tcp</span><br><span class="line">            - 53:53/udp</span><br><span class="line">        restart: always</span><br><span class="line">        volumes:</span><br><span class="line">            - ./configs:/etc/dnsmasq.d</span><br><span class="line">        cap_add:</span><br><span class="line">            - NET_ADMIN</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dnsmasq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将coreos中的docker服务设置为自启服务</title>
      <link href="/2018/07/16/coreos-docker/"/>
      <url>/2018/07/16/coreos-docker/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> containerd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.socket</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> coreos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Installing OpenVPN in Docker</title>
      <link href="/2018/07/16/docker-openvpn/"/>
      <url>/2018/07/16/docker-openvpn/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>本教程主要讲怎么使用<code>docker</code>及<code>docker-compose</code>搭建一个OpenVPN服务器，需要进行以下操作：</p><ol><li>安装<code>docker</code>服务，参考<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Install Docker</a>；</li><li>安装<code>docker-compose</code>工具，参考<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Install Docker Compose</a>；</li><li>拉取镜像<code>kylemanna/openvpn</code>。</li></ol><h2 id="安装并运行OpenVPN服务"><a href="#安装并运行OpenVPN服务" class="headerlink" title="安装并运行OpenVPN服务"></a>安装并运行OpenVPN服务</h2><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置OpenVPN数据存放位置</span></span><br><span class="line">OVPN_DATA=`<span class="built_in">pwd</span>`/ovpn_data</span><br><span class="line"><span class="comment"># 设置OpenVPN域名，也可以设置为ip</span></span><br><span class="line">OVPN_DOMAIN=openvpn.example.com</span><br></pre></td></tr></table></figure><h3 id="初始化OVPN-DATA"><a href="#初始化OVPN-DATA" class="headerlink" title="初始化OVPN_DATA"></a>初始化<code>OVPN_DATA</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -v <span class="variable">$OVPN_DATA</span>:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://<span class="variable">$OVPN_DOMAIN</span></span><br><span class="line">docker run -v <span class="variable">$OVPN_DATA</span>:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</span><br></pre></td></tr></table></figure><h3 id="编写docker-compose-yaml文件"><a href="#编写docker-compose-yaml文件" class="headerlink" title="编写docker-compose.yaml文件"></a>编写<code>docker-compose.yaml</code>文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">openvpn:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">kylemanna/openvpn</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">1194</span><span class="string">:1194/udp</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./ovpn_data:/etc/openvpn</span></span><br><span class="line">        <span class="attr">cap_add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br></pre></td></tr></table></figure><h3 id="启动OpenVPN服务"><a href="#启动OpenVPN服务" class="headerlink" title="启动OpenVPN服务"></a>启动OpenVPN服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h2><p>假设客户端名称为：<code>CLIENTNAME</code>。</p><h3 id="创建客户端-1"><a href="#创建客户端-1" class="headerlink" title="创建客户端"></a>创建客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v <span class="variable">$OVPN_DATA</span>:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass</span><br></pre></td></tr></table></figure><h3 id="导出客户端配置文件"><a href="#导出客户端配置文件" class="headerlink" title="导出客户端配置文件"></a>导出客户端配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v <span class="variable">$OVPN_DATA</span>:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient CLIENTNAME &gt; CLIENTNAME.ovpn</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> openvpn </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下实现端口转发</title>
      <link href="/2018/07/16/windows-forword/"/>
      <url>/2018/07/16/windows-forword/</url>
      
        <content type="html"><![CDATA[<p>Windows下可以使用netsh做端口转发：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将<span class="number">192</span>.<span class="number">168</span>.<span class="number">5</span>.<span class="number">3</span>的<span class="number">22</span>端口转发到xxx.xxx.xxx.xxx的<span class="number">22</span>端口</span><br><span class="line">netsh interface portproxy add v4tov4 listenaddress=<span class="number">192</span>.<span class="number">168</span>.<span class="number">5</span>.<span class="number">3</span> listenport=<span class="number">22</span> connectaddress=xxx.xxx.xxx.xxx connectport=<span class="number">22</span></span><br><span class="line"># 查看存在的转发</span><br><span class="line">netsh interface portproxy show all</span><br><span class="line"># 删除IP是<span class="number">192</span>.<span class="number">168</span>.<span class="number">5</span>.<span class="number">3</span>，端口是<span class="number">22</span>的转发</span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress=<span class="number">192</span>.<span class="number">168</span>.<span class="number">5</span>.<span class="number">3</span> listenport=<span class="number">22</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下创建软连接</title>
      <link href="/2018/07/16/windows-link/"/>
      <url>/2018/07/16/windows-link/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; mklink</span><br><span class="line">MKLINK [[/D] | [/H] | [/J]] Link Target</span><br><span class="line"></span><br><span class="line">        /D      创建目录符号链接。默认为文件符号链接。</span><br><span class="line">        /H      创建硬链接而非符号链接。</span><br><span class="line">        /J      创建目录联接。</span><br><span class="line">        Link    指定新的符号链接名称。</span><br><span class="line">        Target  指定新链接引用的路径(相对或绝对)。</span><br><span class="line"></span><br><span class="line">&gt; mklink D:\filelink.txt E:\file.txt</span><br><span class="line">&gt; mklink /D D:\folderlink E:\folder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在python:3.5-alpine镜像中安装psycopg2</title>
      <link href="/2018/07/15/docker-psycopg2/"/>
      <url>/2018/07/15/docker-psycopg2/</url>
      
        <content type="html"><![CDATA[<p>需要先安装依赖包<code>postgresql-dev</code>、<code>gcc</code>、<code>python3-dev</code>、<code>musl-dev</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apk update</span><br><span class="line">apk add postgresql-dev gcc python3-dev musl-dev</span><br><span class="line">pip install psycopg2</span><br></pre></td></tr></table></figure><p>当然也可以先做一个基础镜像：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.5</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk add postgresql-dev gcc python3-dev musl-dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python3"</span>]</span></span><br></pre></td></tr></table></figure><p>在国内也可以使用aliyun的镜像源：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.5</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'</span> /etc/apk/repositories \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add postgresql-dev gcc python3-dev musl-dev</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python3"</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> python </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoreOS中修改docker镜像地址</title>
      <link href="/2018/07/15/coreos-docker-registry/"/>
      <url>/2018/07/15/coreos-docker-registry/</url>
      
        <content type="html"><![CDATA[<p>打开文件<code>/run/systemd/system/docker.service</code>，可以看到环境变量<code>$DOCKER_OPTS</code>，修改docker镜像地址实际上可以认为是修改<code>$DOCKER_OPTS</code>环境变量。</p><p>打开文件<code>/run/flannel/flannel_docker_opts.env</code>，在其中添加下面内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=&quot;--registry-mirror=https://registry.docker-cn.com&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> coreos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoreOS安装docker-compose</title>
      <link href="/2018/07/15/coreos-docker-compose/"/>
      <url>/2018/07/15/coreos-docker-compose/</url>
      
        <content type="html"><![CDATA[<p>由于目录<code>/usr/local/bin</code>不可写，所以docker-compose无法安装到<code>/usr/local/bin</code>目录下；但是<code>/opt/bin</code>目录是可写的，该目录也在<code>PATH</code>路径下，那我们可以将<code>docker-compose</code>安装到这个目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/bin</span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` &gt; /opt/bin/docker-compose</span><br><span class="line">chmod +x /opt/bin/docker-compose</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> coreos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BUG】node-sass安装失败解决办法</title>
      <link href="/2018/07/15/node-sass-error/"/>
      <url>/2018/07/15/node-sass-error/</url>
      
        <content type="html"><![CDATA[<h2 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h2><p>使用taobao镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</span><br></pre></td></tr></table></figure><h2 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h2><p>使用cnpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install node-sass</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win7安装时转移用户文件夹</title>
      <link href="/2018/07/15/windows-change-user-home/"/>
      <url>/2018/07/15/windows-change-user-home/</url>
      
        <content type="html"><![CDATA[<p>安装过程中，在要求输入用户名和密码时，先不输入任何信息，按<code>Shift+F10</code>呼出DOS窗口，然后输入以下命令（假设用户文件夹转移到X盘，且X盘为NTFS分区）：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">robocopy C:\Users X:\Users /E /COPYALL /XJ</span><br><span class="line"><span class="built_in">rmdir</span> C:\Users /S /Q</span><br><span class="line">mklink /J C:\Users X:\Users</span><br></pre></td></tr></table></figure><p>而后关闭DOS窗口，继续安装直至完成，如此安装的Win7，所有用户文件夹都在X盘上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端彩色输出</title>
      <link href="/2018/07/14/terminal-colorful/"/>
      <url>/2018/07/14/terminal-colorful/</url>
      
        <content type="html"><![CDATA[<p><strong>控制代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">\033[0m             关闭所有属性</span><br><span class="line">\033[1m             设置高亮</span><br><span class="line">\033[4m             下划线</span><br><span class="line">\033[5m             闪烁</span><br><span class="line">\033[7m             反显</span><br><span class="line">\033[8m             消隐</span><br><span class="line">\033[30m--\033[37m  设置前景色：黑、深红、绿、黄、蓝、紫、深绿、白</span><br><span class="line">\033[40m--\033[47m  设置背景色：黑、红、绿、黄、蓝、紫、深绿、白</span><br><span class="line">\033[nA             光标上移n行</span><br><span class="line">\033[nB             光标下移n行</span><br><span class="line">\033[nC             光标右移n列</span><br><span class="line">\033[nD             光标左移n列</span><br><span class="line">\033[y;xH           设置光标的位置</span><br><span class="line">\033[2J             清屏</span><br><span class="line">\033[K              清除从光标列到行尾的内容</span><br><span class="line">\033[s              保存光标位置</span><br><span class="line">\033[u              恢复光标位置</span><br><span class="line">\033[?25l           隐藏光标</span><br><span class="line">\033[?25h           显示光标</span><br></pre></td></tr></table></figure><p><strong>例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">'\033[31mcontent\033[37m'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>envsubst</title>
      <link href="/2018/07/14/envsubst/"/>
      <url>/2018/07/14/envsubst/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">envsubst [option] [shell-format]</span><br></pre></td></tr></table></figure><p>详见：<a href="https://www.gnu.org/software/gettext/manual/html_node/envsubst-Invocation.html" target="_blank" rel="noopener">https://www.gnu.org/software/gettext/manual/html_node/envsubst-Invocation.html</a></p><p><strong>示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ env</span><br><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line">c=3</span><br><span class="line">...</span><br><span class="line">$ cat a.template</span><br><span class="line">a=<span class="variable">$a</span></span><br><span class="line">b=<span class="variable">$b</span></span><br><span class="line">c=<span class="variable">$c</span></span><br><span class="line">$ envsubst &lt; a.template</span><br><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line">c=3</span><br><span class="line">$ envsubst <span class="string">'$$a $$b'</span> &lt; a.template</span><br><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line">c=<span class="variable">$c</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ionic start错误</title>
      <link href="/2018/07/14/ionic-start-error/"/>
      <url>/2018/07/14/ionic-start-error/</url>
      
        <content type="html"><![CDATA[<p>执行<code>ionic start my-app --v2</code>时出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error with start undefined</span><br><span class="line">Error Initializing app: There was an error with the spawned command: npminstall</span><br><span class="line">There was an error with the spawned command: npminstall</span><br></pre></td></tr></table></figure><p>这个错误是由于npm版本太旧造成的，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> ionic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域资源共享</title>
      <link href="/2018/07/14/cross-origin/"/>
      <url>/2018/07/14/cross-origin/</url>
      
        <content type="html"><![CDATA[<p>跨域资源共享（Cross-Origin Resource Sharing, CORS）</p><p><a href="https://enable-cors.org/" target="_blank" rel="noopener">https://enable-cors.org</a></p><p><a href="https://www.html5rocks.com/en/tutorials/cors/" target="_blank" rel="noopener">https://www.html5rocks.com/en/tutorials/cors/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OSX系统路由操作</title>
      <link href="/2018/07/12/osx-route/"/>
      <url>/2018/07/12/osx-route/</url>
      
        <content type="html"><![CDATA[<p><strong>查看路由表：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nr</span><br></pre></td></tr></table></figure><p><strong>删除路由：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route delete 0.0.0.0        <span class="comment"># 删除默认路由</span></span><br><span class="line">route delete 10.0.100.0     <span class="comment"># 删除普通路由</span></span><br></pre></td></tr></table></figure><p><strong>添加路由：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route add -net 0.0.0.0 192.168.1.1          <span class="comment"># 添加默认路由</span></span><br><span class="line">route add 192.168.2.0/24 192.168.1.1   <span class="comment"># 将192.168.2网段的网关设置为192.168.1.1</span></span><br></pre></td></tr></table></figure><p><strong>附：</strong></p><p>全球IP段查询：<a href="http://ipblock.chacuo.net/" target="_blank" rel="noopener">http://ipblock.chacuo.net/</a></p><p>中国最新IP段：<a href="http://ipblock.chacuo.net/down/t_txt=c_CN" target="_blank" rel="noopener">http://ipblock.chacuo.net/down/t_txt=c_CN</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">cnroute</span></span>()&#123;</span><br><span class="line">    <span class="built_in">command</span> curl -s http://ipblock.chacuo.net/down/t_txt=c_CN | awk <span class="string">'&#123;print $3&#125;'</span> | xargs -I &#123;&#125; sudo route add &#123;&#125; 192.168.1.1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> osx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu搭建PPTP服务</title>
      <link href="/2018/07/11/ubuntu-pptp/"/>
      <url>/2018/07/11/ubuntu-pptp/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y pptpd</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt; /etc/pptpd.conf</span><br><span class="line">localip     192.168.17.1</span><br><span class="line">remoteip    192.168.17.100-199</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt; /etc/ppp/pptpd-options</span><br><span class="line">ms-dns  192.168.17.1</span><br><span class="line">ms-dns  8.8.8.8</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt; /etc/ppp/chap-secrets</span><br><span class="line">username    *    password    *</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> pptpd</span><br><span class="line">systemctl restart pptpd</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'net.ipv4.ip_forward=1'</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.17.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vpn </tag>
            
            <tag> ubuntu </tag>
            
            <tag> pptp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量文件错误导致进不了linux系统</title>
      <link href="/2018/07/11/linux-environment/"/>
      <url>/2018/07/11/linux-environment/</url>
      
        <content type="html"><![CDATA[<ol><li>机器启动后，以控制台方式进入系统</li><li>找到命令的全路径，修改配置文件<code>/usr/bin/vi /etc/environment</code></li><li>重启系统</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose网络设置</title>
      <link href="/2018/07/11/docker-compose-network/"/>
      <url>/2018/07/11/docker-compose-network/</url>
      
        <content type="html"><![CDATA[<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">main:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:3.0</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">network_name</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">network_name:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">        <span class="attr">ipam:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">172.27</span><span class="number">.1</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SublimeText2配置滚动超过页尾</title>
      <link href="/2018/07/10/sublimetext-scroll/"/>
      <url>/2018/07/10/sublimetext-scroll/</url>
      
        <content type="html"><![CDATA[<p>打开个人设置，在其中设置参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scroll_past_end"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sublimetext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SublimeText2关闭记住上次打开的文件</title>
      <link href="/2018/07/10/sublimetext-open-files/"/>
      <url>/2018/07/10/sublimetext-open-files/</url>
      
        <content type="html"><![CDATA[<p>在个人设置中添加下面配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"hot_exit"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"remember_open_files"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sublimetext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SublimeText2设置空格可视化</title>
      <link href="/2018/07/10/sublimetext-white-space/"/>
      <url>/2018/07/10/sublimetext-white-space/</url>
      
        <content type="html"><![CDATA[<p>在个人设置中设置下面参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"draw_white_space"</span>: <span class="string">"all"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sublimetext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron</title>
      <link href="/2018/07/10/electron/"/>
      <url>/2018/07/10/electron/</url>
      
        <content type="html"><![CDATA[<p>在profile（<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, or <code>~/.bashrc</code>）文件中添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ELECTRON_MIRROR</span>=https://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcpdump命令</title>
      <link href="/2018/07/10/tcpdump/"/>
      <url>/2018/07/10/tcpdump/</url>
      
        <content type="html"><![CDATA[<p>tcpdump命令是一款sniffer工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用<code>-w</code>选项将数据包保存到文件中，方便以后分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-a: 尝试将网络和广播地址转换成名称；</span><br><span class="line">-c &lt;数据包数目&gt;: 收到指定的数据包数目后，就停止进行倾倒操作；</span><br><span class="line">-d: 把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；</span><br><span class="line">-dd: 把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；</span><br><span class="line">-ddd: 把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；</span><br><span class="line">-e: 在每列倾倒资料上显示连接层级的文件头；</span><br><span class="line">-f: 用数字显示网际网络地址；</span><br><span class="line">-F &lt;表达文件&gt;: 指定内含表达方式的文件；</span><br><span class="line">-i &lt;网络界面&gt;: 使用指定的网络截面送出数据包；</span><br><span class="line">-l: 使用标准输出列的缓冲区；</span><br><span class="line">-n: 不把主机的网络地址转换成名字；</span><br><span class="line">-N: 不列出域名；</span><br><span class="line">-O: 不将数据包编码最佳化；</span><br><span class="line">-p: 不让网络界面进入混杂模式；</span><br><span class="line">-q: 快速输出，仅列出少数的传输协议信息；</span><br><span class="line">-r &lt;数据包文件&gt;: 从指定的文件读取数据包数据；</span><br><span class="line">-s &lt;数据包大小&gt;: 设置每个数据包的大小；</span><br><span class="line">-S: 用绝对而非相对数值列出TCP关联数；</span><br><span class="line">-t: 在每列倾倒资料上不显示时间戳记；</span><br><span class="line">-tt:  在每列倾倒资料上显示未经格式化的时间戳记；</span><br><span class="line">-T &lt;数据包类型&gt;: 强制将表达方式所指定的数据包转译成设置的数据包类型；</span><br><span class="line">-v: 详细显示指令执行过程；</span><br><span class="line">-vv: 更详细显示指令执行过程；</span><br><span class="line">-x: 用十六进制字码列出数据包资料；</span><br><span class="line">-w &lt;数据包文件&gt;: 把数据包数据写入指定的文件。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>实例</strong></p><p>直接启动tcpdump将监视第一个网络接口上所有流过的数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump</span><br></pre></td></tr></table></figure><p>监视指定网络接口的数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth1</span><br></pre></td></tr></table></figure><p>指定ip,例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 210.27.48.1</span><br></pre></td></tr></table></figure><p>截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host <span class="string">"210.27.48.1 and (210.27.48.2 or 210.27.48.3)"</span></span><br></pre></td></tr></table></figure><p>如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump ip host 210.27.48.1 and !210.27.48.2</span><br></pre></td></tr></table></figure><p>截获主机hostname发送的所有数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 src host hostname</span><br></pre></td></tr></table></figure><p>监视所有送到主机hostname的数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 dst host hostname</span><br></pre></td></tr></table></figure><p>如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump tcp port 23 host 210.27.48.1</span><br></pre></td></tr></table></figure><p>打印所有源地址或目标地址是本地主机的IP数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump ip and not net localnet</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件版本号</title>
      <link href="/2018/07/09/semver/"/>
      <url>/2018/07/09/semver/</url>
      
        <content type="html"><![CDATA[<p>版本格式：<code>主版本号.次版本号[-先行版本号][+编译版本号]</code>.修订号，版本号递增规则如下：</p><ol><li><strong>主版本号</strong>：当你做了不兼容的<code>API</code>修改</li><li><strong>次版本号</strong>：当你做了向下兼容的功能性新增</li><li><strong>修订号</strong>：当你做了向下兼容的问题修正</li><li><strong>先行版本号</strong>：表示这个版本并非稳定而且可能无法达到兼容的需求， 值一般为：<code>alpha</code>、<code>beta</code>、<code>gamma</code>、<code>rc</code>、<code>release</code>、<code>stable</code>等</li><li><strong>编译版本号</strong>：当两个版本只有在版本编译信息有差别时，属于相同的优先层级</li></ol><p>详细参见：<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本2.0.0</a>。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><code>1.0.0-alpha</code>、<code>1.0.0-alpha.1</code>、<code>1.0.0-rc.1</code>、<code>1.0.0-stable+build.201807091324</code>、<code>1.1.2+sha.7e3e2a0</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> semver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS颜色值</title>
      <link href="/2018/07/09/css-color/"/>
      <url>/2018/07/09/css-color/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Color Name</th><th>HEX</th><th>Color</th></tr></thead><tbody><tr><td>AliceBlue</td><td>#F0F8FF     </td><td bgcolor="AliceBlue">#F0F8FF</td></tr><tr><td>AntiqueWhite</td><td>#FAEBD7     </td><td bgcolor="AntiqueWhite">#FAEBD7</td></tr><tr><td>Aqua</td><td>#00FFFF     </td><td bgcolor="Aqua">#00FFFF</td></tr><tr><td>Aquamarine</td><td>#7FFFD4     </td><td bgcolor="Aquamarine">#7FFFD4</td></tr><tr><td>Azure</td><td>#F0FFFF     </td><td bgcolor="Azure">#F0FFFF</td></tr><tr><td>Beige</td><td>#F5F5DC     </td><td bgcolor="Beige">#F5F5DC</td></tr><tr><td>Bisque</td><td>#FFE4C4     </td><td bgcolor="Bisque">#FFE4C4</td></tr><tr><td>Black</td><td>#000000     </td><td bgcolor="Black">#000000</td></tr><tr><td>BlanchedAlmond</td><td>#FFEBCD     </td><td bgcolor="BlanchedAlmond">#FFEBCD</td></tr><tr><td>Blue</td><td>#0000FF     </td><td bgcolor="Blue">#0000FF</td></tr><tr><td>BlueViolet</td><td>#8A2BE2     </td><td bgcolor="BlueViolet">#8A2BE2</td></tr><tr><td>Brown</td><td>#A52A2A     </td><td bgcolor="Brown">#A52A2A</td></tr><tr><td>BurlyWood</td><td>#DEB887     </td><td bgcolor="BurlyWood">#DEB887</td></tr><tr><td>CadetBlue</td><td>#5F9EA0     </td><td bgcolor="CadetBlue">#5F9EA0</td></tr><tr><td>Chartreuse</td><td>#7FFF00     </td><td bgcolor="Chartreuse">#7FFF00</td></tr><tr><td>Chocolate</td><td>#D2691E     </td><td bgcolor="Chocolate">#D2691E</td></tr><tr><td>Coral</td><td>#FF7F50     </td><td bgcolor="Coral">#FF7F50</td></tr><tr><td>CornflowerBlue</td><td>#6495ED     </td><td bgcolor="CornflowerBlue">#6495ED</td></tr><tr><td>Cornsilk</td><td>#FFF8DC     </td><td bgcolor="Cornsilk">#FFF8DC</td></tr><tr><td>Crimson</td><td>#DC143C     </td><td bgcolor="Crimson">#DC143C</td></tr><tr><td>Cyan</td><td>#00FFFF     </td><td bgcolor="Cyan">#00FFFF</td></tr><tr><td>DarkBlue</td><td>#00008B     </td><td bgcolor="DarkBlue">#00008B</td></tr><tr><td>DarkCyan</td><td>#008B8B     </td><td bgcolor="DarkCyan">#008B8B</td></tr><tr><td>DarkGoldenRod</td><td>#B8860B     </td><td bgcolor="DarkGoldenRod">#B8860B</td></tr><tr><td>DarkGray</td><td>#A9A9A9     </td><td bgcolor="DarkGray">#A9A9A9</td></tr><tr><td>DarkGreen</td><td>#006400     </td><td bgcolor="DarkGreen">#006400</td></tr><tr><td>DarkKhaki</td><td>#BDB76B     </td><td bgcolor="DarkKhaki">#BDB76B</td></tr><tr><td>DarkMagenta</td><td>#8B008B     </td><td bgcolor="DarkMagenta">#8B008B</td></tr><tr><td>DarkOliveGreen</td><td>#556B2F     </td><td bgcolor="DarkOliveGreen">#556B2F</td></tr><tr><td>DarkOrange</td><td>#FF8C00     </td><td bgcolor="DarkOrange">#FF8C00</td></tr><tr><td>DarkOrchid</td><td>#9932CC     </td><td bgcolor="DarkOrchid">#9932CC</td></tr><tr><td>DarkRed</td><td>#8B0000     </td><td bgcolor="DarkRed">#8B0000</td></tr><tr><td>DarkSalmon</td><td>#E9967A     </td><td bgcolor="DarkSalmon">#E9967A</td></tr><tr><td>DarkSeaGreen</td><td>#8FBC8F     </td><td bgcolor="DarkSeaGreen">#8FBC8F</td></tr><tr><td>DarkSlateBlue</td><td>#483D8B     </td><td bgcolor="DarkSlateBlue">#483D8B</td></tr><tr><td>DarkSlateGray</td><td>#2F4F4F     </td><td bgcolor="DarkSlateGray">#2F4F4F</td></tr><tr><td>DarkTurquoise</td><td>#00CED1     </td><td bgcolor="DarkTurquoise">#00CED1</td></tr><tr><td>DarkViolet</td><td>#9400D3     </td><td bgcolor="DarkViolet">#9400D3</td></tr><tr><td>DeepPink</td><td>#FF1493     </td><td bgcolor="DeepPink">#FF1493</td></tr><tr><td>DeepSkyBlue</td><td>#00BFFF     </td><td bgcolor="DeepSkyBlue">#00BFFF</td></tr><tr><td>DimGray</td><td>#696969     </td><td bgcolor="DimGray">#696969</td></tr><tr><td>DodgerBlue</td><td>#1E90FF     </td><td bgcolor="DodgerBlue">#1E90FF</td></tr><tr><td>FireBrick</td><td>#B22222     </td><td bgcolor="FireBrick">#B22222</td></tr><tr><td>FloralWhite</td><td>#FFFAF0     </td><td bgcolor="FloralWhite">#FFFAF0</td></tr><tr><td>ForestGreen</td><td>#228B22     </td><td bgcolor="ForestGreen">#228B22</td></tr><tr><td>Fuchsia</td><td>#FF00FF     </td><td bgcolor="Fuchsia">#FF00FF</td></tr><tr><td>Gainsboro</td><td>#DCDCDC     </td><td bgcolor="Gainsboro">#DCDCDC</td></tr><tr><td>GhostWhite</td><td>#F8F8FF     </td><td bgcolor="GhostWhite">#F8F8FF</td></tr><tr><td>Gold</td><td>#FFD700     </td><td bgcolor="Gold">#FFD700</td></tr><tr><td>GoldenRod</td><td>#DAA520     </td><td bgcolor="GoldenRod">#DAA520</td></tr><tr><td>Gray</td><td>#808080     </td><td bgcolor="Gray">#808080</td></tr><tr><td>Green</td><td>#008000     </td><td bgcolor="Green">#008000</td></tr><tr><td>GreenYellow</td><td>#ADFF2F     </td><td bgcolor="GreenYellow">#ADFF2F</td></tr><tr><td>HoneyDew</td><td>#F0FFF0     </td><td bgcolor="HoneyDew">#F0FFF0</td></tr><tr><td>HotPink</td><td>#FF69B4     </td><td bgcolor="HotPink">#FF69B4</td></tr><tr><td>IndianRed</td><td>#CD5C5C     </td><td bgcolor="IndianRed">#CD5C5C</td></tr><tr><td>Indigo</td><td>#4B0082     </td><td bgcolor="Indigo">#4B0082</td></tr><tr><td>Ivory</td><td>#FFFFF0     </td><td bgcolor="Ivory">#FFFFF0</td></tr><tr><td>Khaki</td><td>#F0E68C     </td><td bgcolor="Khaki">#F0E68C</td></tr><tr><td>Lavender</td><td>#E6E6FA     </td><td bgcolor="Lavender">#E6E6FA</td></tr><tr><td>LavenderBlush</td><td>#FFF0F5     </td><td bgcolor="LavenderBlush">#FFF0F5</td></tr><tr><td>LawnGreen</td><td>#7CFC00     </td><td bgcolor="LawnGreen">#7CFC00</td></tr><tr><td>LemonChiffon</td><td>#FFFACD     </td><td bgcolor="LemonChiffon">#FFFACD</td></tr><tr><td>LightBlue</td><td>#ADD8E6     </td><td bgcolor="LightBlue">#ADD8E6</td></tr><tr><td>LightCoral</td><td>#F08080     </td><td bgcolor="LightCoral">#F08080</td></tr><tr><td>LightCyan</td><td>#E0FFFF     </td><td bgcolor="LightCyan">#E0FFFF</td></tr><tr><td>LightGoldenRodYellow</td><td>#FAFAD2     </td><td bgcolor="LightGoldenRodYellow">#FAFAD2</td></tr><tr><td>LightGray</td><td>#D3D3D3     </td><td bgcolor="LightGray">#D3D3D3</td></tr><tr><td>LightGreen</td><td>#90EE90     </td><td bgcolor="LightGreen">#90EE90</td></tr><tr><td>LightPink</td><td>#FFB6C1     </td><td bgcolor="LightPink">#FFB6C1</td></tr><tr><td>LightSalmon</td><td>#FFA07A     </td><td bgcolor="LightSalmon">#FFA07A</td></tr><tr><td>LightSeaGreen</td><td>#20B2AA     </td><td bgcolor="LightSeaGreen">#20B2AA</td></tr><tr><td>LightSkyBlue</td><td>#87CEFA     </td><td bgcolor="LightSkyBlue">#87CEFA</td></tr><tr><td>LightSlateGray</td><td>#778899     </td><td bgcolor="LightSlateGray">#778899</td></tr><tr><td>LightSteelBlue</td><td>#B0C4DE     </td><td bgcolor="LightSteelBlue">#B0C4DE</td></tr><tr><td>LightYellow</td><td>#FFFFE0     </td><td bgcolor="LightYellow">#FFFFE0</td></tr><tr><td>Lime</td><td>#00FF00     </td><td bgcolor="Lime">#00FF00</td></tr><tr><td>LimeGreen</td><td>#32CD32     </td><td bgcolor="LimeGreen">#32CD32</td></tr><tr><td>Linen</td><td>#FAF0E6     </td><td bgcolor="Linen">#FAF0E6</td></tr><tr><td>Magenta</td><td>#FF00FF     </td><td bgcolor="Magenta">#FF00FF</td></tr><tr><td>Maroon</td><td>#800000     </td><td bgcolor="Maroon">#800000</td></tr><tr><td>MediumAquaMarine</td><td>#66CDAA     </td><td bgcolor="MediumAquaMarine">#66CDAA</td></tr><tr><td>MediumBlue</td><td>#0000CD     </td><td bgcolor="MediumBlue">#0000CD</td></tr><tr><td>MediumOrchid</td><td>#BA55D3     </td><td bgcolor="MediumOrchid">#BA55D3</td></tr><tr><td>MediumPurple</td><td>#9370DB     </td><td bgcolor="MediumPurple">#9370DB</td></tr><tr><td>MediumSeaGreen</td><td>#3CB371     </td><td bgcolor="MediumSeaGreen">#3CB371</td></tr><tr><td>MediumSlateBlue</td><td>#7B68EE     </td><td bgcolor="MediumSlateBlue">#7B68EE</td></tr><tr><td>MediumSpringGreen</td><td>#00FA9A     </td><td bgcolor="MediumSpringGreen">#00FA9A</td></tr><tr><td>MediumTurquoise</td><td>#48D1CC     </td><td bgcolor="MediumTurquoise">#48D1CC</td></tr><tr><td>MediumVioletRed</td><td>#C71585     </td><td bgcolor="MediumVioletRed">#C71585</td></tr><tr><td>MidnightBlue</td><td>#191970     </td><td bgcolor="MidnightBlue">#191970</td></tr><tr><td>MintCream</td><td>#F5FFFA     </td><td bgcolor="MintCream">#F5FFFA</td></tr><tr><td>MistyRose</td><td>#FFE4E1     </td><td bgcolor="MistyRose">#FFE4E1</td></tr><tr><td>Moccasin</td><td>#FFE4B5     </td><td bgcolor="Moccasin">#FFE4B5</td></tr><tr><td>NavajoWhite</td><td>#FFDEAD     </td><td bgcolor="NavajoWhite">#FFDEAD</td></tr><tr><td>Navy</td><td>#000080     </td><td bgcolor="Navy">#000080</td></tr><tr><td>OldLace</td><td>#FDF5E6     </td><td bgcolor="OldLace">#FDF5E6</td></tr><tr><td>Olive</td><td>#808000     </td><td bgcolor="Olive">#808000</td></tr><tr><td>OliveDrab</td><td>#6B8E23     </td><td bgcolor="OliveDrab">#6B8E23</td></tr><tr><td>Orange</td><td>#FFA500     </td><td bgcolor="Orange">#FFA500</td></tr><tr><td>OrangeRed</td><td>#FF4500     </td><td bgcolor="OrangeRed">#FF4500</td></tr><tr><td>Orchid</td><td>#DA70D6     </td><td bgcolor="Orchid">#DA70D6</td></tr><tr><td>PaleGoldenRod</td><td>#EEE8AA     </td><td bgcolor="PaleGoldenRod">#EEE8AA</td></tr><tr><td>PaleGreen</td><td>#98FB98     </td><td bgcolor="PaleGreen">#98FB98</td></tr><tr><td>PaleTurquoise</td><td>#AFEEEE     </td><td bgcolor="PaleTurquoise">#AFEEEE</td></tr><tr><td>PaleVioletRed</td><td>#DB7093     </td><td bgcolor="PaleVioletRed">#DB7093</td></tr><tr><td>PapayaWhip</td><td>#FFEFD5     </td><td bgcolor="PapayaWhip">#FFEFD5</td></tr><tr><td>PeachPuff</td><td>#FFDAB9     </td><td bgcolor="PeachPuff">#FFDAB9</td></tr><tr><td>Peru</td><td>#CD853F     </td><td bgcolor="Peru">#CD853F</td></tr><tr><td>Pink</td><td>#FFC0CB     </td><td bgcolor="Pink">#FFC0CB</td></tr><tr><td>Plum</td><td>#DDA0DD     </td><td bgcolor="Plum">#DDA0DD</td></tr><tr><td>PowderBlue</td><td>#B0E0E6     </td><td bgcolor="PowderBlue">#B0E0E6</td></tr><tr><td>Purple</td><td>#800080     </td><td bgcolor="Purple">#800080</td></tr><tr><td>Red</td><td>#FF0000     </td><td bgcolor="Red">#FF0000</td></tr><tr><td>RosyBrown</td><td>#BC8F8F     </td><td bgcolor="RosyBrown">#BC8F8F</td></tr><tr><td>RoyalBlue</td><td>#4169E1     </td><td bgcolor="RoyalBlue">#4169E1</td></tr><tr><td>SaddleBrown</td><td>#8B4513     </td><td bgcolor="SaddleBrown">#8B4513</td></tr><tr><td>Salmon</td><td>#FA8072     </td><td bgcolor="Salmon">#FA8072</td></tr><tr><td>SandyBrown</td><td>#F4A460     </td><td bgcolor="SandyBrown">#F4A460</td></tr><tr><td>SeaGreen</td><td>#2E8B57     </td><td bgcolor="SeaGreen">#2E8B57</td></tr><tr><td>SeaShell</td><td>#FFF5EE     </td><td bgcolor="SeaShell">#FFF5EE</td></tr><tr><td>Sienna</td><td>#A0522D     </td><td bgcolor="Sienna">#A0522D</td></tr><tr><td>Silver</td><td>#C0C0C0     </td><td bgcolor="Silver">#C0C0C0</td></tr><tr><td>SkyBlue</td><td>#87CEEB     </td><td bgcolor="SkyBlue">#87CEEB</td></tr><tr><td>SlateBlue</td><td>#6A5ACD     </td><td bgcolor="SlateBlue">#6A5ACD</td></tr><tr><td>SlateGray</td><td>#708090     </td><td bgcolor="SlateGray">#708090</td></tr><tr><td>Snow</td><td>#FFFAFA     </td><td bgcolor="Snow">#FFFAFA</td></tr><tr><td>SpringGreen</td><td>#00FF7F     </td><td bgcolor="SpringGreen">#00FF7F</td></tr><tr><td>SteelBlue</td><td>#4682B4     </td><td bgcolor="SteelBlue">#4682B4</td></tr><tr><td>Tan</td><td>#D2B48C     </td><td bgcolor="Tan">#D2B48C</td></tr><tr><td>Teal</td><td>#008080     </td><td bgcolor="Teal">#008080</td></tr><tr><td>Thistle</td><td>#D8BFD8     </td><td bgcolor="Thistle">#D8BFD8</td></tr><tr><td>Tomato</td><td>#FF6347     </td><td bgcolor="Tomato">#FF6347</td></tr><tr><td>Turquoise</td><td>#40E0D0     </td><td bgcolor="Turquoise">#40E0D0</td></tr><tr><td>Violet</td><td>#EE82EE     </td><td bgcolor="Violet">#EE82EE</td></tr><tr><td>Wheat</td><td>#F5DEB3     </td><td bgcolor="Wheat">#F5DEB3</td></tr><tr><td>White</td><td>#FFFFFF     </td><td bgcolor="White">#FFFFFF</td></tr><tr><td>WhiteSmoke</td><td>#F5F5F5     </td><td bgcolor="WhiteSmoke">#F5F5F5</td></tr><tr><td>Yellow</td><td>#FFFF00     </td><td bgcolor="Yellow">#FFFF00</td></tr><tr><td>YellowGreen</td><td>#9ACD32     </td><td bgcolor="YellowGreen">#9ACD32</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu手动添加启动图标</title>
      <link href="/2018/07/08/ubuntu-desktop/"/>
      <url>/2018/07/08/ubuntu-desktop/</url>
      
        <content type="html"><![CDATA[<p>在<code>/usr/share/applications</code>目录下创建一个以<code>.desktop</code>结尾的文件，里面内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Desktop Entry]</span></span><br><span class="line"><span class="attr">Name</span>=eclipse</span><br><span class="line"><span class="attr">Type</span>=Application</span><br><span class="line"><span class="attr">Exec</span>=/usr/share/eclipse/eclipse</span><br><span class="line"><span class="attr">Icon</span>=/usr/share/eclipse/icon.xpm</span><br><span class="line"><span class="attr">Categories</span>=Application<span class="comment">;Utility;</span></span><br><span class="line"><span class="attr">Terminal</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>关键字说明：</strong></p><ul><li>Name: 快捷方式的名字</li><li>Type: 程序类型</li><li>Exec: 要执行的程序</li><li>Icon: 执行程序的图标</li><li>Categories: 快捷方式显示的位置</li><li>Terminal: 是否使用终端</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH免密登录</title>
      <link href="/2018/07/08/ssh-nopasswd/"/>
      <url>/2018/07/08/ssh-nopasswd/</url>
      
        <content type="html"><![CDATA[<p><strong>客户端操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端生成公钥私钥</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment"># 将公钥传送到服务器上</span></span><br><span class="line">scp ~/.ssh/id_rsa.pub root@192.168.1.2:~/aaa.pub</span><br></pre></td></tr></table></figure><p><strong>服务端操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将公钥添加到 authorized_keys 文件后面</span></span><br><span class="line">cat aaa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h2 id="SELinux引起的ssh公钥认证失败问题"><a href="#SELinux引起的ssh公钥认证失败问题" class="headerlink" title="SELinux引起的ssh公钥认证失败问题"></a>SELinux引起的ssh公钥认证失败问题</h2><p><code>sshd</code>配置正确的情况下，还是无法使用<code>publickey</code>登陆，那么极有可能是被<code>SELinux</code>拦截了，造成的原因可能是<code>.ssh</code>目录的权限错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br><span class="line">restorecon -r -vv ~/.ssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python计算MD5值</title>
      <link href="/2018/07/08/python-md5/"/>
      <url>/2018/07/08/python-md5/</url>
      
        <content type="html"><![CDATA[<h2 id="计算字符串的MD5值"><a href="#计算字符串的MD5值" class="headerlink" title="计算字符串的MD5值"></a>计算字符串的MD5值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">string = <span class="string">''</span></span><br><span class="line">md5 = hashlib.md5(string.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">print(md5)</span><br></pre></td></tr></table></figure><h2 id="计算文件的MD5值"><a href="#计算文件的MD5值" class="headerlink" title="计算文件的MD5值"></a>计算文件的MD5值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">file = <span class="string">''</span></span><br><span class="line">md5file = open(file, <span class="string">'rb'</span>)</span><br><span class="line">md5 = hashlib.md5(md5file.read()).hexdigest()</span><br><span class="line">md5file.close()</span><br><span class="line">print(md5)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python获取本机IP、mac地址、计算机名</title>
      <link href="/2018/07/08/python-ip/"/>
      <url>/2018/07/08/python-ip/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mac_address</span><span class="params">()</span>:</span></span><br><span class="line">    mac=uuid.UUID(int = uuid.getnode()).hex[<span class="number">-12</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">":"</span>.join([mac[e:e+<span class="number">2</span>] <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Mac地址</span></span><br><span class="line">mymac = get_mac_address()</span><br><span class="line"><span class="comment">#获取本机电脑名</span></span><br><span class="line">myname = socket.getfqdn(socket.gethostname())</span><br><span class="line"><span class="comment">#获取本机ip</span></span><br><span class="line">myaddr = socket.gethostbyname(myname)</span><br><span class="line"></span><br><span class="line">print(mymac)</span><br><span class="line">print(myname)</span><br><span class="line">print(myaddr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSX系统截图</title>
      <link href="/2018/07/07/osx-screenshot/"/>
      <url>/2018/07/07/osx-screenshot/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>全屏截图</strong></p><p>  同时按住<code>command+shift+3</code>，便可以对整个屏幕进行截图，截完的图片自动保存在桌面上。</p></li><li><p><strong>任意部分截图</strong></p><p>  同时按住<code>command+shift+4</code>，然后用鼠标选择你希望截图的区域，松开鼠标，便可以自动截图，图片保存在桌面上。</p></li><li><p><strong>对规则图形进行截图</strong></p><p>  同时按住<code>command+shift+4</code>，然后按一下空格健，然后用鼠标选择一块区域，单击就能实现自动截图，图片保存在桌面上。</p></li></ul><p><em>详细用法参见：<a href="https://support.apple.com/zh-cn/HT201361" target="_blank" rel="noopener">https://support.apple.com/zh-cn/HT201361</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> osx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备份sqlite3数据库</title>
      <link href="/2018/07/07/sqlite3-backup/"/>
      <url>/2018/07/07/sqlite3-backup/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 db.sqlite3 .dump &gt; db.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js解析url中的参数</title>
      <link href="/2018/07/07/js-parse-uri/"/>
      <url>/2018/07/07/js-parse-uri/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(getQueryString(name))</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryParams</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> search = location.search; <span class="comment">//获取url中"?"符后的字串</span></span><br><span class="line">   <span class="keyword">var</span> theRequest = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">   <span class="keyword">if</span> (search.indexOf(<span class="string">"?"</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> search = search.substr(<span class="number">1</span>);</span><br><span class="line">      params = search.split(<span class="string">"&amp;"</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; params.length; i ++) &#123;</span><br><span class="line">         theRequest[params[i].split(<span class="string">"="</span>)[<span class="number">0</span>]] = <span class="built_in">decodeURIComponent</span>(params[i].split(<span class="string">"="</span>)[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> theRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(getQueryParams())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让sudo操作不输入密码</title>
      <link href="/2018/07/07/linux-sudo/"/>
      <url>/2018/07/07/linux-sudo/</url>
      
        <content type="html"><![CDATA[<p>假设你想让用户名为<code>test</code>的用户可以在使用sudo的时候不输入密码，你需要修改文件<code>/etc/sudoers.d/test</code>（没有则创建），其中test为你的用户名。文件内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS设置超出部分内容显示为省略号</title>
      <link href="/2018/07/07/css-nowrap/"/>
      <url>/2018/07/07/css-nowrap/</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx设置密码访问</title>
      <link href="/2018/07/07/nginx-passwd/"/>
      <url>/2018/07/07/nginx-passwd/</url>
      
        <content type="html"><![CDATA[<h2 id="安装apache的htpasswd工具"><a href="#安装apache的htpasswd工具" class="headerlink" title="安装apache的htpasswd工具"></a>安装apache的htpasswd工具</h2><h2 id="使用htpasswd工具生成密码文件"><a href="#使用htpasswd工具生成密码文件" class="headerlink" title="使用htpasswd工具生成密码文件"></a>使用htpasswd工具生成密码文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -bc .htpasswd user userpasswd</span><br></pre></td></tr></table></figure><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /xxx &#123;</span><br><span class="line">    <span class="attribute">root</span>            /usr/local/example;</span><br><span class="line">    <span class="attribute">index</span>           index.html index.htm;</span><br><span class="line">    <span class="attribute">auth_basic</span>      <span class="string">""</span>;             <span class="comment"># 显示给用户的提示</span></span><br><span class="line">    <span class="attribute">uth_basic_user_file</span>    /etc/nginx/.htpasswd;  <span class="comment"># 密码文件的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>上面配置可能造成php无法解析，此时需要在location里面再配置一层location：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /xxx &#123;</span><br><span class="line">    <span class="attribute">root</span>            /usr/local/example;</span><br><span class="line">    <span class="attribute">index</span>           index.html index.htm;</span><br><span class="line">    <span class="attribute">auth_basic</span>      <span class="string">""</span>;             <span class="comment"># 显示给用户的提示</span></span><br><span class="line">    <span class="attribute">uth_basic_user_file</span>    /etc/nginx/.htpasswd;  <span class="comment"># 密码文件的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(php|php5)?$</span> &#123;</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx强制文件下载</title>
      <link href="/2018/07/07/nginx-force-download/"/>
      <url>/2018/07/07/nginx-force-download/</url>
      
        <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|bmp|png|mp3|wma|mp4|swf|txt)$</span> &#123;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$query_string</span> <span class="regexp">~ "download=true")</span> &#123;</span><br><span class="line">        <span class="attribute">add_header</span> Content-Disposition <span class="string">"attachment; filename=<span class="variable">$request_filename</span>"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js字符串格式化</title>
      <link href="/2018/07/06/js-string-format/"/>
      <url>/2018/07/06/js-string-format/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span>(args) == <span class="string">"object"</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> args) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[key] != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(&#123;"</span> + key + <span class="string">"&#125;)"</span>, <span class="string">"g"</span>);</span><br><span class="line">                result = result.replace(reg, args[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>[i] != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(&#123;)"</span> + i + <span class="string">"(&#125;)"</span>, <span class="string">"g"</span>);</span><br><span class="line">                result = result.replace(reg, <span class="built_in">arguments</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> template1 = <span class="string">"Hello, &#123;0&#125;!"</span>;</span><br><span class="line"><span class="keyword">var</span> template2 = <span class="string">"Hello, &#123;name&#125;!"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(template1.format(<span class="string">"Tom"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(template2.format(&#123;<span class="attr">name</span>: <span class="string">"Tom"</span>&#125;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GVim UTF-8乱码</title>
      <link href="/2018/07/06/gvim-encoding/"/>
      <url>/2018/07/06/gvim-encoding/</url>
      
        <content type="html"><![CDATA[<p>打开文件<code>.vimrc</code>或<code>_vimrc</code>，在开头处加上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="variable">$LANG</span>=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line"><span class="built_in">set</span> fileencodings=utf-8,chinese,latin-1</span><br><span class="line"><span class="built_in">set</span> termencoding=utf8</span><br><span class="line"><span class="built_in">set</span> encoding=utf-8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker中运行定时任务</title>
      <link href="/2018/07/06/docker-crond/"/>
      <url>/2018/07/06/docker-crond/</url>
      
        <content type="html"><![CDATA[<h2 id="直接使用cron启动"><a href="#直接使用cron启动" class="headerlink" title="直接使用cron启动"></a>直接使用cron启动</h2><p><strong>Dockerfile</strong>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y cron</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line">WORKDIW /app</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'* * * * * root bash -c "/app/cron.sh"'</span> &gt;&gt; /etc/crontab</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"cron"</span>, <span class="string">"-f"</span>]</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>有时候在docker容器中启动定时任务的时候可能取不到环境变量，此时可以这样启动定时任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env &gt;&gt; /etc/environment &amp;&amp; cron -f</span><br></pre></td></tr></table></figure><h2 id="使用supervisor管理"><a href="#使用supervisor管理" class="headerlink" title="使用supervisor管理"></a>使用supervisor管理</h2><p><strong>cron.conf</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[program:cron]</span><br><span class="line">command=bash -c &quot;cron -f&quot;</span><br><span class="line">user=root</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">redirect_stderr=true</span><br></pre></td></tr></table></figure><p><strong>Dockerfile</strong>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y supervisor cron</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /app</span></span><br><span class="line">WORKDIW /app</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'* * * * * root bash -c "/app/cron.sh"'</span> &gt;&gt; /etc/crontab</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cat cron.conf &gt; /etc/supervisor/conf.d/cron.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"supervisor"</span>, <span class="string">"-n"</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java MD5签名</title>
      <link href="/2018/07/06/java-md5/"/>
      <url>/2018/07/06/java-md5/</url>
      
        <content type="html"><![CDATA[<p>依赖Apache的<code>commons-codec-1.9.jar</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MD5签名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2014-11-14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     *            需要签名的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 签名结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String text, String key)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        text = text + key;</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5Hex(text.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     *            需要签名的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign</span></span><br><span class="line"><span class="comment">     *            签名结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验证结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String text, String sign, String key)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        text = text + key;</span><br><span class="line">        String mysign = DigestUtils.md5Hex(text.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">        <span class="keyword">return</span> mysign.equals(sign);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java AES加密</title>
      <link href="/2018/07/06/java-aes/"/>
      <url>/2018/07/06/java-aes/</url>
      
        <content type="html"><![CDATA[<p>依赖Apache的<code>commons-codec-1.9.jar</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AES</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2014-11-13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AES</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     *            密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> base64编码密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String content, String password)</span> <span class="keyword">throws</span> GeneralSecurityException,</span></span><br><span class="line"><span class="function">            UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] byteContent = content.getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(doFinal(byteContent, password, Cipher.ENCRYPT_MODE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            base64编码的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     *            密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String content, String password)</span> <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] byteContent = Base64.decodeBase64(content);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(doFinal(byteContent, password, Cipher.DECRYPT_MODE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] doFinal(<span class="keyword">byte</span>[] byteContent, String password, <span class="keyword">int</span> mode) <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">        KeyGenerator kgen = KeyGenerator.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">        kgen.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(password.getBytes()));</span><br><span class="line">        SecretKey secretKey = kgen.generateKey();</span><br><span class="line">        <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">        SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">        cipher.init(mode, key);</span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(byteContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> aes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java RSA加密</title>
      <link href="/2018/07/06/java-rsa/"/>
      <url>/2018/07/06/java-rsa/</url>
      
        <content type="html"><![CDATA[<p>依赖Apache的<code>commons-codec-1.9.jar</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSA</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2014-10-15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 签名算法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIGN_ALGORITHM = <span class="string">"SHA1WithRSA"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            要签名的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey</span></span><br><span class="line"><span class="comment">     *            Base64格式的私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Base64格式的签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String content, String privateKey)</span> <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        PrivateKey priKey = getPrivateKey(privateKey);</span><br><span class="line">        Signature signature = Signature.getInstance(SIGN_ALGORITHM);</span><br><span class="line">        signature.initSign(priKey);</span><br><span class="line">        signature.update(content.getBytes());</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(signature.sign());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sign</span></span><br><span class="line"><span class="comment">     *            Base64格式的签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey</span></span><br><span class="line"><span class="comment">     *            Base64格式的公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String content, String sign, String publicKey)</span> <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        PublicKey pubKey = getPublicKey(publicKey);</span><br><span class="line">        Signature signature = Signature.getInstance(SIGN_ALGORITHM);</span><br><span class="line">        signature.initVerify(pubKey);</span><br><span class="line">        signature.update(content.getBytes());</span><br><span class="line">        <span class="keyword">return</span> signature.verify(Base64.decodeBase64(sign));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用公钥进行加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey</span></span><br><span class="line"><span class="comment">     *            base64编码的公钥字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> base64编码的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String content, String publicKey)</span> <span class="keyword">throws</span> UnsupportedEncodingException,</span></span><br><span class="line"><span class="function">            GeneralSecurityException </span>&#123;</span><br><span class="line">        PublicKey pubKey = getPublicKey(publicKey);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] byteContent = content.getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, pubKey);</span><br><span class="line">        <span class="keyword">byte</span>[] result = cipher.doFinal(byteContent);</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用私钥进行解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            base64编码的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey</span></span><br><span class="line"><span class="comment">     *            base64编码的私钥字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String content, String privateKey)</span> <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        PrivateKey priKey = getPrivateKey(privateKey);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] byteContent = Base64.decodeBase64(content);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, priKey);</span><br><span class="line">        <span class="keyword">byte</span>[] result = cipher.doFinal(byteContent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将公钥字符串转换为PublicKey实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey</span></span><br><span class="line"><span class="comment">     *            公钥base64编码的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PublicKey实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKey</span><span class="params">(String publicKey)</span> <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] encodedKey = Base64.decodeBase64(publicKey);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(encodedKey));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将私钥字符串转换为PrivateKey实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey</span></span><br><span class="line"><span class="comment">     *            私钥base64编码的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PrivateKey实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PrivateKey <span class="title">getPrivateKey</span><span class="params">(String privateKey)</span> <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        PKCS8EncodedKeySpec priPKCS8 = <span class="keyword">new</span> PKCS8EncodedKeySpec(Base64.decodeBase64(privateKey));</span><br><span class="line">        KeyFactory keyf = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> keyf.generatePrivate(priPKCS8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django多对多关联字段查询</title>
      <link href="/2018/07/06/django-many-to-many/"/>
      <url>/2018/07/06/django-many-to-many/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">40</span>)</span><br><span class="line">    email - models.EmailField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    authors = models.ManyToManyField(Author)</span><br></pre></td></tr></table></figure><h3 id="从Book角度查询Author："><a href="#从Book角度查询Author：" class="headerlink" title="从Book角度查询Author："></a>从Book角度查询Author：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">book = Book.objects.get(id=<span class="number">1</span>)</span><br><span class="line">book.authors.all()  <span class="comment"># 查询id为1的Book的所有Author</span></span><br><span class="line">book.authors.filter(first_name=<span class="string">'jack'</span>)  <span class="comment"># 查询id为的Author中first_name为jack的Author</span></span><br></pre></td></tr></table></figure><h3 id="从Author角度查询Book："><a href="#从Author角度查询Book：" class="headerlink" title="从Author角度查询Book："></a>从Author角度查询Book：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author = Author.objects.get(id=<span class="number">1</span>)</span><br><span class="line">author.book_set.all()   <span class="comment"># 查询id为1的Author的所有Book</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django测试需要登录的接口</title>
      <link href="/2018/07/06/django-testcase/"/>
      <url>/2018/07/06/django-testcase/</url>
      
        <content type="html"><![CDATA[<p>有时候需要测试一些需要登录的接口，或者测试一些需要特定权限才能调用的接口，而这些都需要登录，在写测试用例的时候可以继承<code>django.test.TestCase</code>，然后调用<code>self.client.login(self, **credentials)</code>或<code>self.client.force_login(self, user, backend=None)</code>来进行登录。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django使用MySQL数据库</title>
      <link href="/2018/07/06/django-mysql/"/>
      <url>/2018/07/06/django-mysql/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'mydatabase'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'mydatabaseuser'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'mypassword'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'5432'</span>,</span><br><span class="line">        <span class="string">'TEST'</span>: &#123;</span><br><span class="line">            <span class="string">'CHARSET'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">            <span class="string">'COLLATION'</span>: <span class="string">'utf8_general_ci'</span>,</span><br><span class="line">            <span class="string">'NAME'</span>: <span class="string">'test_mydatabase'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>创建数据库：<code>CREATE DATABASE mydatabase CHARACTER SET utf8;</code>；</li><li>安装mysql依赖：<code>pip install pymysql</code>；</li><li>配置参数中<code>CHARSET</code>、<code>COLLATION</code>，若没有这两个参数的话，执行测试用例的时候会报编码错误。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curl显示连接时间</title>
      <link href="/2018/07/05/curl/"/>
      <url>/2018/07/05/curl/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> curlw=<span class="string">'curl -i -w "\n\n----------------\ntime_connect: %&#123;time_connect&#125;\ntime_starttransfer: %&#123;time_starttransfer&#125;\ntime_total: %&#123;time_total&#125;\n"'</span></span><br></pre></td></tr></table></figure><ul><li><code>time_namelookup</code>: DNS解析域名的时间</li><li><code>time_connect</code>: client和server端建立TCP连接的时间</li><li><code>time_starttransfer</code>: 从client发出请求；到web得到server响应第一个字节的时间</li><li><code>time_total</code>: client发出请求；到web得到server发送所有的相应数据的时间</li><li><code>speed_download</code>: 下载速度，单位byte/s</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSX系统安装DNSmasq服务</title>
      <link href="/2018/07/05/dnsmasq/"/>
      <url>/2018/07/05/dnsmasq/</url>
      
        <content type="html"><![CDATA[<p>DNSmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络，它提供了DNS功能和可选择的DHCP功能。它服务那些只在本地适用的域名，这些域名是不会在全球的DNS服务器中出现的。DHCP服务器和DNS服务器结合，并且允许DHCP分配的地址能在DNS中正常解析，而这些DHCP分配的地址和相关命令可以配置到每台主机中，也可以配置到一台核心设备中（比如路由器），DNSmasq支持静态和动态两种DHCP配置方式。</p><h2 id="安装DNSmasq"><a href="#安装DNSmasq" class="headerlink" title="安装DNSmasq"></a>安装DNSmasq</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install dnsmasq</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>拷贝默认配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/opt/dnsmasq/dnsmasq.conf.example /usr/<span class="built_in">local</span>/etc/dnsmasq.conf</span><br></pre></td></tr></table></figure><p><strong>设置dnsmasq的DNS服务</strong></p><p>打开文件<code>/usr/local/etc/resolv.dnsmasq.conf</code>，设置以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># google dns</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line"># open dns</span><br><span class="line">nameserver 208.67.222.222</span><br><span class="line">nameserver 208.67.220.220</span><br></pre></td></tr></table></figure><p>打开文件<code>/usr/local/etc/dnsmasq.conf</code>，设置以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resolv-file=/usr/local/etc/resolv.dnsmasq.conf</span><br><span class="line">address=/xxx.com/127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -fv /usr/<span class="built_in">local</span>/opt/dnsmasq/*.plist /Library/LaunchDaemons</span><br><span class="line">sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @127.0.0.1 xxx.com</span><br></pre></td></tr></table></figure><p>使用时需要将本机DNS改为<code>127.0.0.1</code>。</p><h2 id="重启DNSmasq"><a href="#重启DNSmasq" class="headerlink" title="重启DNSmasq"></a>重启DNSmasq</h2><p>如果修改了配置文件，可以通过下面命令重启dnsmasq：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl stop homebrew.mxcl.dnsmasq</span><br><span class="line">sudo launchctl start homebrew.mxcl.dnsmasq</span><br></pre></td></tr></table></figure><p>使用线面命令清除dns缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dnsmasq </tag>
            
            <tag> osx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Pull部分文件</title>
      <link href="/2018/07/05/git-pull/"/>
      <url>/2018/07/05/git-pull/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add -f origin https://xxx/git/xxx.git</span><br><span class="line">git config core.sparsecheckout <span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"docs"</span> &gt;&gt; .git/info/sparse-checkout</span><br><span class="line">git pull origin master</span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/master master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装MySQL</title>
      <link href="/2018/07/05/install-mysql/"/>
      <url>/2018/07/05/install-mysql/</url>
      
        <content type="html"><![CDATA[<p>执行以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y mysql-server mysql-client libmysqlclient-dev</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：安装时候中间需要输入mysql数据库的密码，如果不想在安装过程中输入密码，可以在安装之前执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debconf-set-selections &lt;&lt;&lt; <span class="string">'mysql-server mysql-server/root_password password your_password'</span></span><br><span class="line">debconf-set-selections &lt;&lt;&lt; <span class="string">'mysql-server mysql-server/root_password_again password your_password'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitbook</title>
      <link href="/2018/07/05/gitbook/"/>
      <url>/2018/07/05/gitbook/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改文件<code>book.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"$title$"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"$author$"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"$description$"</span>,</span><br><span class="line">    <span class="attr">"repository"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"$url$"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"theme-opendocs"</span>, <span class="string">"advanced-emoji"</span>, <span class="string">"bg-nest"</span>,</span><br><span class="line">        <span class="string">"ace"</span>, <span class="string">"codeblock-label"</span>,</span><br><span class="line">        <span class="string">"simpletabs"</span>,</span><br><span class="line">        <span class="string">"include"</span>,</span><br><span class="line">        <span class="string">"katex"</span>,</span><br><span class="line">        <span class="string">"-highlight"</span>, <span class="string">"prism"</span>,</span><br><span class="line">        <span class="string">"-lunr"</span>, <span class="string">"-search"</span>, <span class="string">"search-pro"</span>,</span><br><span class="line">        <span class="string">"-sharing"</span>,</span><br><span class="line">        <span class="string">"-fontsettings"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"gitbook"</span>: <span class="string">"&gt;=3.0.0"</span>,</span><br><span class="line">    <span class="attr">"pluginsConfig"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip</title>
      <link href="/2018/07/05/pip/"/>
      <url>/2018/07/05/pip/</url>
      
        <content type="html"><![CDATA[<p>在用户home目录下新建文件<code>~/.pip/pip.conf</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span>=https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/2018/07/05/nvm/"/>
      <url>/2018/07/05/nvm/</url>
      
        <content type="html"><![CDATA[<p>根据<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>进行安装，安装之后会在你的profile（<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, or <code>~/.bashrc</code>）文件中添加以下两行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure><p>然后在后面添加一行：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NVM_NODEJS_ORG_MIRROR</span>=https://npm.taobao.org/mirrors/node</span><br><span class="line"><span class="attr">NVM_IOJS_ORG_MIRROR</span>=https://npm.taobao.org/mirrors/iojs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm</title>
      <link href="/2018/07/05/npm/"/>
      <url>/2018/07/05/npm/</url>
      
        <content type="html"><![CDATA[<p>在用户home目录下新建文件<code>~/.npmrc</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">registry</span>=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="attr">chromedriver_cdnurl</span>=https://npm.taobao.org/mirrors/chromedriver/</span><br><span class="line"><span class="attr">electron_mirror</span>=https://npm.taobao.org/mirrors/electron/</span><br><span class="line"><span class="attr">phantomjs_cdnurl</span>=https://npm.taobao.org/mirrors/phantomjs/</span><br><span class="line"><span class="attr">sass_binary_site</span>=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/05/hello-world/"/>
      <url>/2018/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
